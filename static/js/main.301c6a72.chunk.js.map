{"version":3,"sources":["data/constants.js","data/linked-list/1-prepend.js","data/linked-list/2-append.js","data/linked-list/3-delete.js","data/linked-list/4-find.js","data/linked-list/5-deleteTail.js","data/linked-list/6-deleteHead.js","data/linked-list/7-fromArray.js","data/linked-list/8-toArray.js","data/linked-list/9-reverse.js","data/doubly-linked-list/10-prepend.js","data/doubly-linked-list/11-append.js","data/doubly-linked-list/12-delete.js","data/doubly-linked-list/13-find.js","data/doubly-linked-list/14-deleteTail.js","data/doubly-linked-list/15-deleteHead.js","data/doubly-linked-list/16-fromArray.js","data/doubly-linked-list/17-toArray.js","data/doubly-linked-list/18-reverse.js","data/algorithms/19-fibonacci-recursive.js","data/algorithms/20-fibonacci-iterative.js","data/queue/21-implement-from-ll.js","data/queue/22-implement-from-array.js","data/stack/23-implement-from-ll.js","data/stack/24-implement-from-array.js","data/hash-table/25-implement-set.js","data/hash-table/26-implement-get.js","data/hash-table/27-implement-delete.js","data/heap/28-child-functions.js","data/heap/29-parent-functions.js","data/heap/30-peek.js","data/heap/31-find.js","data/heap/32-poll.js","data/heap/33-add.js","data/heap/34-remove.js","data/heap/35-heapifyUp.js","data/heap/36-heapifyDown.js","data/binary-search-tree/37-insert.js","data/binary-search-tree/38-search.js","data/binary-search-tree/39-delete.js","data/binary-search-tree/40-pre-order-iterative.js","data/binary-search-tree/41-pre-order-recursive.js","data/binary-search-tree/42-in-order-iterative.js","data/binary-search-tree/43-in-order-recursive.js","data/binary-search-tree/44-post-order-iterative.js","data/binary-search-tree/45-post-order-recursive.js","data/binary-search-tree/46-level-order-bfs.js","data/graph/47-add-vertex.js","data/graph/48-add-edge.js","data/graph/49-delete-vertex.js","data/graph/50-delete-edge.js","data/graph/51-dfs-recursive.js","data/graph/56-dfs-iterative.js","data/inventory.js","data/graph/52-bfs.js","data/trie/53-insert.js","data/trie/54-search.js","data/trie/55-delete.js","data/graph/57-detect-cycle.js","data/graph/58-check-path-exists.js","data/graph/59-shortest-path-simple.js","data/algorithms/60-binary-search-recursive.js","data/algorithms/61-binary-search-iterative.js","data/sort/62-quicksort.js","data/sort/63-mergesort.js","data/algorithms/64-two-sum.js","data/algorithms/65-minimum-rectangle.js","data/cache/66-lru-cache.js","data/stack/67-basic-calc-parentheses.js","data/algorithms/68-word-search.js","data/linked-list/69-reorder-list.js","data/algorithms/70-anagrams-in-string.js","data/algorithms/71-randomized-set.js","data/dp/72-minimum_path_sum.js","data/algorithms/73-number-of-islands.js","data/dp/74-decode-ways-recursive.js","data/linked-list/75-add-two-numbers.js","data/algorithms/76-merge-intervals.js","data/algorithms/77-best-time-stock.js","data/algorithms/78-product-except-self.js","data/graph/79-shortest-path-binary-matrix.js","data/linked-list/80-palindrome-linked-list.js","data/algorithms/81-verify-alien-dictionary.js","data/algorithms/82-length-longest-substring.js","data/algorithms/83-meeting-rooms-2.js","data/design/84-design-metro-system.js","data/dp/85-maximal-square.js","data/sliding-window/86-find-avg-of-subarrays.js","data/sliding-window/87-find-max-of-subarrays.js","data/sliding-window/88-smallest-subarray-given-sum.js","data/sliding-window/89-longest-substr-k-distinct.js","data/sliding-window/90-fruits-into-basket.js","data/sliding-window/91-no-repeat-substring.js","data/sliding-window/92-longest-substr-same-letter.js","data/sliding-window/93-longest-binary-subarray-after-repl.js","data/sliding-window/94-permutation-in-a-string.js","data/sliding-window/95-string-anagrams.js","data/sliding-window/96-smallest-window-count-substr.js","data/sliding-window/97-words-concatenation.js","data/educative/98-bitwise-xor.js","data/educative/99-cyclic-sort.js","data/educative/100-find-missing-number.js","data/educative/101-find-all-missing-numbers.js","data/educative/102-find-duplicate-number.js","data/educative/103-find-all-duplicate-numbers.js","data/educative/104-knapsack.js","data/educative/105-linked-list-cycle.js","data/educative/106-middle-of-linked-list.js","data/educative/107-merge-k-sorted-lists.js","data/educative/108-insert-intervals.js","data/educative/109-order-agnostic-binary-search.js","data/educative/110-bitonic-array-maximum.js","data/educative/111-reverse-sub-list.js","data/educative/112-subsets.js","data/educative/113-subsets-with-duplicates.js","data/educative/114-top-k-numbers.js","data/educative/115-kth-smallest-number.js","data/educative/116-k-closest-pts.js","data/educative/117-connect-ropes.js","data/educative/118-topological-sort.js","data/educative/119-binary-tree-level-order-traversal.js","data/educative/120-reverse-level-order-traversal.js","data/educative/121-level-averages.js","data/educative/122-minimum-depth-binary-tree.js","data/educative/123-level-order-successor.js","data/educative/124-binary-tree-path-sum.js","data/educative/125-find-median-stream.js","data/educative/126-pair-with-target-sum.js","data/educative/127-remove-duplicates.js","data/educative/128-squaring-sorted-array.js","redux/gameStore.js","worker.js","personalBests.js","util.js","redux/thunks.js","Game/EditorMain.js","Game/EditorSecondary.js","Game/TestCodeModal.js","Game/TestCaseTable.js","Game/TabCards.js","Game/Problem.js","redux/filterStore.js","SessionStats.js","HistoricStats.js","MainMenu.js","Home/ResultsCard.js","Home/SelectionsCard.js","Home/CategoryCard.js","Home/ControlCard.js","Home/Filters.js","Home/HomePage.js","ProblemTextModal.js","App.js","index.js"],"names":["DATA_STRUCTURE","ALGORITHM","BEGINNER","INTERMEDIATE","ADVANCED","HEAP","GRAPH","GENERAL","TEMP","data","problemID","problemName","problemText","testCases","id","name","inherit","code","evaluate","expected","setupCode","category","type","difficulty","maxExecutionTime","solution","stages","solutionLines","stage","text","JSON","stringify","undefined","aggregate","1","_ll_prepend","2","_ll_append","3","_ll_delete","4","_ll_find","5","_ll_deleteTail","6","_ll_deleteHead","7","_ll_fromArray","8","_ll_toArray","9","_ll_reverse","10","_dll_prepend","11","_dll_append","12","_dll_delete","13","_dll_find","14","_dll_deleteTail","15","_dll_deleteHead","16","_dll_fromArray","17","_dll_toArray","18","_dll_reverse","19","_alg_fibonnaci_recursive","20","_alg_fibonnaci_iterative","21","_queue_implement_ll","22","_queue_implement_array","23","_stack_implement_ll","24","_stack_implement_array","25","_ht_implement_set","26","_ht_implement_get","27","_ht_implement_delete","28","_heap_child_functions","29","_heap_parent_functions","30","_heap_peek","31","_heap_find","32","_heap_poll","33","_heap_add","34","_heap_remove","35","_heap_heapifyUp","36","_heap_heapifyDown","37","_bst_insert","38","_bst_search","39","_bst_delete","40","_bst_pre_order_iter","41","_bst_pre_order_rec","42","_bst_in_order_iter","43","_bst_in_order_rec","44","_bst_post_order_iter","45","_bst_post_order_rec","46","_bst_level_order_bfs","47","_graph_add_vertex","48","_graph_add_edge","49","_graph_delete_vertex","50","_graph_delete_edge","51","_graph_dfs_recursive","52","53","54","55","56","_graph_dfs_iterative","57","58","59","60","61","62","63","64","65","66","key","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","maxEffort","Object","keys","forEach","effortCount","line","effort","MAX_EFFORT","inventory","categories","Array","from","Set","map","sort","gameSlice","createSlice","initialState","value","value2","results","revealButtonPressed","isBusyTesting","activeIndex","totalSeconds","isRunning","open","noteCode","tableSort","sessionHistory","reducers","setValue","state","payload","setValue2","setResults","setRevealButtonPressed","setIsBusyTesting","setActiveIndex","setTotalSeconds","setOpen","setNoteCode","updateTableSort","setSessionHistory","incrementTotalSeconds","setIsRunning","startRunningTests","concludeRunningTests","r","entry","every","d","ok","push","clickNextToResults","clickSkipToResults","seconds","clickNext","clickSkip","revealAnswer","join","actions","gameReducer","reducer","Worker_fn","Worker","submitResult","personalBestsRaw","localStorage","getItem","personalBests","parse","Error","previousBest","setItem","err","getPersonalBests","constructTest","inheritedCode","idRef","foundCase","find","console","error","test","convertToTimer","secondsRaw","hours","minutes","Math","floor","convertToHoursMinutesSeconds","String","padStart","colorCodeTime","passedAllTests","personalBest","color","length","clickRun","createAsyncThunk","thunkAPI","a","getState","game","dispatch","promisedResults","worker","obj","Comlink","response","catch","e","message","timeout","Promise","resolve","reject","setTimeout","race","val","terminate","representation","presentation","actual","all","then","EditorMain","useDispatch","useSelector","editor1","React","propsRef","useParams","current","style","padding","width","backgroundColor","borderRadius","ref","placeholder","mode","theme","onChange","editor","resize","height","showGutter","highlightActiveLine","wrapEnabled","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","showLineNumbers","tabSize","commands","bindKey","win","mac","exec","formatted","prettier","format","session","getValue","parser","plugins","parserBabel","log","EditorSecondary","editor2","readOnly","hljs","registerLanguage","javascript","TestCodeModal","Modal","onClose","onOpen","Header","Content","whiteSpace","border","fontFamily","dangerouslySetInnerHTML","__html","highlight","Actions","Button","onClick","TestCaseTable","sortedResults","b","Table","celled","compact","className","Row","HeaderCell","textAlign","cursor","Body","Cell","Icon","role","constructedTest","converter","showdown","Converter","TabCards","hasTests","Card","fluid","raised","float","fontVariant","display","lineHeight","verticalAlign","boxShadow","marginRight","marginLeft","title","slice","overflowY","makeHtml","Problem","transform","durationIndex","entries","index","duration","Infinity","defaultCategoryData","isSelected","filterSlice","selections","showModal","activeProblemText","dsChecked","algChecked","minEffort","begChecked","intChecked","advChecked","expChecked","setSelections","shiftSelection","setShowModal","setActiveProblemText","setCategories","setDsChecked","setAlgChecked","setEffortSlider","pressReset","setBegChecked","setIntChecked","setAdvChecked","setExpChecked","filterReducer","SessionStats","paddingBottom","margin","maxWidth","letterSpacing","measuredTime","bestTime","HistoricStats","forceUpdate","setForceUpdate","clearPersonalBests","MainMenu","page","filter","history","useHistory","passedTests","showNextButton","hasNext","Boolean","Menu","Item","Group","Popup","content","trigger","icon","fontWeight","fontSize","disabled","nextId","contextMessage","position","ResultsCard","addProblemId","filteredResults","includes","header","Divider","random","addRandom","labelPosition","clear","problem","inProblemSet","colSpan","SelectionsCard","primary","CategoryCard","allAreSelected","noneAreSelected","item","Checkbox","label","updatedCategories","updateCheckbox","checked","ControlCard","selectedMinValue","selectedMaxValue","onSliderValuesChange","minValue","maxValue","sliderMinValue","sliderMaxValue","Filters","runFilters","chosenCategories","filtered","Number","overflowX","top","left","HomePage","ProblemTextModal","interval","App","window","setInterval","clearInterval","exact","path","combineReducers","persistConfig","version","storage","storageSession","persistedReducer","persistReducer","store","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","ReactDOM","render","loading","document","getElementById"],"mappings":"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","file":"static/js/main.301c6a72.chunk.js","sourcesContent":["export const DATA_STRUCTURE = 'data-structure';\nexport const ALGORITHM = 'algorithm';\n\nexport const BEGINNER = 'Beginner';\nexport const INTERMEDIATE = 'Intermediate';\nexport const ADVANCED = 'Advanced';\nexport const EXPERT = 'Expert';\n\nexport const LINKED_LIST = 'Linked List';\nexport const DOUBLY_LINKED_LIST = 'Doubly Linked List';\nexport const QUEUE = 'Queue';\nexport const STACK = 'Stack';\nexport const HASH_TABLE = 'Hash-Table';\nexport const HEAP = 'Heap';\nexport const BINARY_SEARCH_TREE = 'Binary Search Tree';\nexport const GRAPH = 'Graph';\nexport const TRIE = 'Trie';\nexport const CACHE = 'Cache';\nexport const DYNAMIC_PROGRAMMING = 'Dynamic Programming';\nexport const GENERAL = 'General';\nexport const FIBONACCI = 'Fibonacci';\nexport const BINARY_SEARCH = 'Binary Search';\nexport const SORTING = 'Sorting';\nexport const RECURSION = 'Recursion';\nexport const DESIGN = 'Design';\nexport const SLIDING_WINDOW = 'Sliding Window';\nexport const BITWISE = 'Bitwise';\nexport const CYCLIC_SORT = 'Cyclic Sort';\n\nexport const TEMP = 'Temp';\n","import { LINKED_LIST, DATA_STRUCTURE, BEGINNER } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class LinkedListNode {' },\n  { stage: 0, text: '  constructor(value, next = null) {' },\n  { stage: 0, text: '    this.value = value;' },\n  { stage: 0, text: '    this.next = next;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class LinkedList {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.head = null;' },\n  { stage: 0, text: '    this.tail = null;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  prepend(value) {' },\n  { stage: 2, text: '    const newNode = new LinkedListNode(value, this.head);' },\n  { stage: 2, text: '    this.head = newNode;' },\n  { stage: 2, text: '' },\n  { stage: 3, text: '    if (!this.tail) {' },\n  { stage: 3, text: '      this.tail = newNode;' },\n  { stage: 3, text: '    }' },\n  { stage: 2, text: '' },\n  { stage: 2, text: '    return this;' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 1,\n  problemName: 'Implement **prepend** in a *LinkedList* class.',\n  problemText:\n    'Write a **prepend** method in a *LinkedList* class that accepts an arbitrary `value` parameter, creates a new Node, and inserts it at the front of the list.  The method should return the original list.',\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const ll=new LinkedList();`,\n      evaluate: `Boolean(ll);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'empty list, head value',\n      inherit: [1],\n      code: `ll.prepend(5);`,\n      evaluate: `ll.head.value;`,\n      expected: 5,\n    },\n    {\n      id: 3,\n      name: 'empty list, tail value',\n      inherit: [1],\n      code: `ll.prepend(6);`,\n      evaluate: `ll.tail.value;`,\n      expected: 6,\n    },\n    {\n      id: 4,\n      name: 'insert two nodes',\n      inherit: [1, 2],\n      code: `ll.prepend(7);`,\n      evaluate: `ll.tail.value === 5 && ll.head.value === 7;`,\n      expected: true,\n    },\n    {\n      id: 5,\n      name: 'returns itself',\n      inherit: [1, 2],\n      code: ``,\n      evaluate: `ll.prepend(10) === ll;`,\n      expected: true,\n    },\n  ],\n  setupCode: '',\n  category: LINKED_LIST,\n  type: DATA_STRUCTURE,\n  difficulty: BEGINNER,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 120],\n    solutionLines: solution,\n  },\n};\n","import { LINKED_LIST, DATA_STRUCTURE, BEGINNER } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class LinkedListNode {' },\n  { stage: 0, text: '  constructor(value, next = null) {' },\n  { stage: 0, text: '    this.value = value;' },\n  { stage: 0, text: '    this.next = next;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class LinkedList {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.head = null;' },\n  { stage: 0, text: '    this.tail = null;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  append(value) {' },\n  { stage: 2, text: '    const newNode = new LinkedListNode(value);' },\n  { stage: 2, text: '' },\n  { stage: 3, text: '    if (!this.head) {' },\n  { stage: 4, text: '      this.head = newNode;' },\n  { stage: 4, text: '      this.tail = newNode;' },\n  { stage: 4, text: '      return this;' },\n  { stage: 3, text: '    }' },\n  { stage: 3, text: '' },\n  { stage: 5, text: '    this.tail.next = newNode;' },\n  { stage: 5, text: '    this.tail = newNode;' },\n  { stage: 5, text: '' },\n  { stage: 2, text: '    return this;' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 2,\n  problemName: 'Implement **append** in a *LinkedList* class.',\n  problemText:\n    'Write an **append** method in a *LinkedList* class that accepts an arbitrary `value` parameter, creates a new Node, and inserts it at the end of the list.  The method should return the original list.',\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const ll=new LinkedList();`,\n      evaluate: `Boolean(ll);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'append one node, check head',\n      inherit: [1],\n      code: `ll.append(5);`,\n      evaluate: `ll.head.value;`,\n      expected: 5,\n    },\n    {\n      id: 3,\n      name: 'append one node, check tail',\n      inherit: [1, 2],\n      code: ``,\n      evaluate: `ll.tail.value;`,\n      expected: 5,\n    },\n    {\n      id: 4,\n      name: 'append two nodes, check head',\n      inherit: [1, 2],\n      code: `ll.append(7);`,\n      evaluate: `ll.head.value;`,\n      expected: 5,\n    },\n    {\n      id: 5,\n      name: 'append two nodes, check tail',\n      inherit: [1, 2, 4],\n      code: ``,\n      evaluate: `ll.tail.value;`,\n      expected: 7,\n    },\n    {\n      id: 6,\n      name: 'returns itself',\n      inherit: [1, 2],\n      code: ``,\n      evaluate: `ll.append(10) === ll;`,\n      expected: true,\n    },\n  ],\n  setupCode: '',\n  category: LINKED_LIST,\n  type: DATA_STRUCTURE,\n  difficulty: BEGINNER,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 180],\n    solutionLines: solution,\n  },\n};\n","import { LINKED_LIST, DATA_STRUCTURE, ADVANCED } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class LinkedListNode {' },\n  { stage: 0, text: '  constructor(value, next = null) {' },\n  { stage: 0, text: '    this.value = value;' },\n  { stage: 0, text: '    this.next = next;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class LinkedList {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.head = null;' },\n  { stage: 0, text: '    this.tail = null;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  delete(value) {' },\n  { stage: 2, text: '    if (!this.head) {' },\n  { stage: 2, text: '      return null;' },\n  { stage: 2, text: '    }' },\n  { stage: 2, text: '' },\n  { stage: 3, text: '    let deletedNode = null;' },\n  { stage: 3, text: '' },\n  { stage: 4, text: '    while (this.head && this.head.value === value) {' },\n  { stage: 4, text: '      deletedNode = this.head;' },\n  { stage: 4, text: '      this.head = this.head.next;' },\n  { stage: 4, text: '    }' },\n  { stage: 4, text: '' },\n  { stage: 5, text: '    let currentNode = this.head;' },\n  { stage: 5, text: '' },\n  { stage: 5, text: '    if (currentNode !== null) {' },\n  { stage: 6, text: '      while (currentNode.next) {' },\n  { stage: 6, text: '        if (currentNode.next.value === value) {' },\n  { stage: 7, text: '          deletedNode = currentNode.next;' },\n  { stage: 7, text: '          currentNode.next = currentNode.next.next;' },\n  { stage: 7, text: '        } else {' },\n  { stage: 7, text: '          currentNode = currentNode.next;' },\n  { stage: 6, text: '        }' },\n  { stage: 6, text: '      }' },\n  { stage: 5, text: '    }' },\n  { stage: 5, text: '' },\n  { stage: 8, text: '    if (this.tail.value === value) {' },\n  { stage: 8, text: '      this.tail = currentNode;' },\n  { stage: 8, text: '    }' },\n  { stage: 3, text: '' },\n  { stage: 2, text: '    return deletedNode;' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 3,\n  problemName: 'Implement **delete** in a *LinkedList* class.',\n  problemText:\n    'Write a **delete** method in a *LinkedList* class that accepts an arbitrary `value` parameter and removes all nodes that match that value.  The method should return the last node deleted (or `null` if no match found).',\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const ll=new LinkedList();`,\n      evaluate: `Boolean(ll);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'delete head return value',\n      inherit: [1],\n      code: `ll.append(5);ll.append(4);ll.append(7);ll.append(8);`,\n      evaluate: `ll.delete(5).value;`,\n      expected: 5,\n    },\n    {\n      id: 3,\n      name: 'delete tail return value',\n      inherit: [1, 2],\n      code: ``,\n      evaluate: `ll.delete(8).value;`,\n      expected: 8,\n    },\n    {\n      id: 4,\n      name: 'delete head resets head',\n      inherit: [1, 2],\n      code: ``,\n      evaluate: `ll.delete(5);ll.head.value;`,\n      expected: 4,\n    },\n    {\n      id: 5,\n      name: 'delete tail resets tail',\n      inherit: [1, 2],\n      code: ``,\n      evaluate: `ll.delete(8);ll.tail.value;`,\n      expected: 7,\n    },\n    {\n      id: 6,\n      name: 'delete second item, head points to correct next',\n      inherit: [1, 2],\n      code: ``,\n      evaluate: `ll.delete(4);ll.head.next.value;`,\n      expected: 7,\n    },\n  ],\n  setupCode: `\n  LinkedList.prototype.append = function (value) {\n    const newNode = new LinkedListNode(value);\n    if (!this.head) {\n      this.head = newNode;\n      this.tail = newNode;\n      return this;\n    }\n    this.tail.next = newNode;\n    this.tail = newNode;\n    return this;\n  };`,\n  category: LINKED_LIST,\n  type: DATA_STRUCTURE,\n  difficulty: ADVANCED,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 270],\n    solutionLines: solution,\n  },\n};\n","import { LINKED_LIST, DATA_STRUCTURE, BEGINNER } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class LinkedListNode {' },\n  { stage: 0, text: '  constructor(value, next = null) {' },\n  { stage: 0, text: '    this.value = value;' },\n  { stage: 0, text: '    this.next = next;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class LinkedList {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.head = null;' },\n  { stage: 0, text: '    this.tail = null;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  find(value) {' },\n  { stage: 2, text: '    let currentNode = this.head;' },\n  { stage: 2, text: '' },\n  { stage: 3, text: '    while (currentNode) {' },\n  { stage: 4, text: '      if (currentNode.value === value) {' },\n  { stage: 4, text: '        return currentNode;' },\n  { stage: 4, text: '      }' },\n  { stage: 4, text: '      currentNode = currentNode.next;' },\n  { stage: 3, text: '    }' },\n  { stage: 3, text: '' },\n  { stage: 2, text: '    return null;' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 4,\n  problemName: 'Implement **find** in a *LinkedList* class.',\n  problemText:\n    'Write a **find** method in a *LinkedList* class that accepts an arbitrary `value` parameter and returns the first node that matches that value, or `null` if no matching value was found.',\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const ll=new LinkedList();`,\n      evaluate: `Boolean(ll);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'find head value',\n      inherit: [1],\n      code: `ll.append(5);ll.append(4);ll.append(7);ll.append(8);`,\n      evaluate: `ll.find(5).value;`,\n      expected: 5,\n    },\n    {\n      id: 3,\n      name: 'find tail value',\n      inherit: [1, 2],\n      code: ``,\n      evaluate: `ll.find(8).value;`,\n      expected: 8,\n    },\n    {\n      id: 4,\n      name: 'find a middle value',\n      inherit: [1, 2],\n      code: ``,\n      evaluate: `ll.find(7).value;`,\n      expected: 7,\n    },\n    {\n      id: 5,\n      name: 'return null for non-existent value',\n      inherit: [1, 2],\n      code: ``,\n      evaluate: `ll.find(17);`,\n      expected: null,\n    },\n    {\n      id: 6,\n      name: 'return null when empty list',\n      inherit: [1],\n      code: ``,\n      evaluate: `ll.find(27);`,\n      expected: null,\n    },\n  ],\n  setupCode: `\n  LinkedList.prototype.append = function (value) {\n    const newNode = new LinkedListNode(value);\n    if (!this.head) {\n      this.head = newNode;\n      this.tail = newNode;\n      return this;\n    }\n    this.tail.next = newNode;\n    this.tail = newNode;\n    return this;\n  };`,\n  category: LINKED_LIST,\n  type: DATA_STRUCTURE,\n  difficulty: BEGINNER,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 150],\n    solutionLines: solution,\n  },\n};\n","import { LINKED_LIST, DATA_STRUCTURE, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class LinkedListNode {' },\n  { stage: 0, text: '  constructor(value, next = null) {' },\n  { stage: 0, text: '    this.value = value;' },\n  { stage: 0, text: '    this.next = next;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class LinkedList {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.head = null;' },\n  { stage: 0, text: '    this.tail = null;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  deleteTail() {' },\n  { stage: 2, text: '    const deletedTail = this.tail;' },\n  { stage: 3, text: '' },\n  { stage: 3, text: '    if (this.head === this.tail) {' },\n  { stage: 4, text: '      this.head = null;' },\n  { stage: 4, text: '      this.tail = null;' },\n  { stage: 4, text: '      return deletedTail;' },\n  { stage: 3, text: '    }' },\n  { stage: 3, text: '' },\n  { stage: 5, text: '    let currentNode = this.head;' },\n  { stage: 5, text: '    while (currentNode.next) {' },\n  { stage: 6, text: '      if (!currentNode.next.next) {' },\n  { stage: 7, text: '        currentNode.next = null;' },\n  { stage: 6, text: '      } else {' },\n  { stage: 7, text: '        currentNode = currentNode.next;' },\n  { stage: 6, text: '      }' },\n  { stage: 5, text: '    }' },\n  { stage: 6, text: '' },\n  { stage: 6, text: '    this.tail = currentNode;' },\n  { stage: 6, text: '' },\n  { stage: 2, text: '    return deletedTail;' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 5,\n  problemName: 'Implement **deleteTail** in a *LinkedList* class.',\n  problemText:\n    'Write a **deleteTail** method in a *LinkedList* class that will remove the last node (the tail) of a list (if it exists, else null) and return it.',\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const ll=new LinkedList();`,\n      evaluate: `Boolean(ll);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'delete tail and find return value',\n      inherit: [1],\n      code: `ll.append(5);ll.append(4);ll.append(7);ll.append(8);`,\n      evaluate: `ll.deleteTail().value;`,\n      expected: 8,\n    },\n    {\n      id: 3,\n      name: 'properly resets so following tail element can be deleted',\n      inherit: [1, 2],\n      code: ``,\n      evaluate: `ll.deleteTail();ll.deleteTail().value;`,\n      expected: 7,\n    },\n    {\n      id: 4,\n      name: 'deleting tail of an empty list returns null',\n      inherit: [1],\n      code: ``,\n      evaluate: `ll.deleteTail();`,\n      expected: null,\n    },\n  ],\n  setupCode: `\n  LinkedList.prototype.append = function (value) {\n    const newNode = new LinkedListNode(value);\n    if (!this.head) {\n      this.head = newNode;\n      this.tail = newNode;\n      return this;\n    }\n    this.tail.next = newNode;\n    this.tail = newNode;\n    return this;\n  };`,\n  category: LINKED_LIST,\n  type: DATA_STRUCTURE,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 240],\n    solutionLines: solution,\n  },\n};\n","import { LINKED_LIST, DATA_STRUCTURE, BEGINNER } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class LinkedListNode {' },\n  { stage: 0, text: '  constructor(value, next = null) {' },\n  { stage: 0, text: '    this.value = value;' },\n  { stage: 0, text: '    this.next = next;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class LinkedList {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.head = null;' },\n  { stage: 0, text: '    this.tail = null;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  deleteHead() {' },\n  { stage: 2, text: '    if (!this.head) {' },\n  { stage: 2, text: '      return null;' },\n  { stage: 2, text: '    }' },\n  { stage: 3, text: '' },\n  { stage: 3, text: '    const deletedHead = this.head;' },\n  { stage: 3, text: '' },\n  { stage: 4, text: '    if (this.head.next) {' },\n  { stage: 5, text: '      this.head = this.head.next;' },\n  { stage: 4, text: '    } else {' },\n  { stage: 6, text: '      this.head = null;' },\n  { stage: 6, text: '      this.tail = null;' },\n  { stage: 4, text: '    }' },\n  { stage: 3, text: '' },\n  { stage: 3, text: '    return deletedHead;' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 6,\n  problemName: 'Implement **deleteHead** in a *LinkedList* class.',\n  problemText:\n    'Write a **deleteHead** method in a *LinkedList* class that will remove the first node (the head) of a list (if it exists, else null) and return it.',\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const ll=new LinkedList();`,\n      evaluate: `Boolean(ll);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'delete head and find return value',\n      inherit: [1],\n      code: `ll.append(5);ll.append(4);ll.append(7);ll.append(8);`,\n      evaluate: `ll.deleteHead().value;`,\n      expected: 5,\n    },\n    {\n      id: 3,\n      name: 'delete head, properly set next head, delete and find return value',\n      inherit: [1, 2],\n      code: ``,\n      evaluate: `ll.deleteHead();ll.deleteHead().value;`,\n      expected: 4,\n    },\n    {\n      id: 4,\n      name: 'delete head from empty list returns null',\n      inherit: [1],\n      code: ``,\n      evaluate: `ll.deleteHead();`,\n      expected: null,\n    },\n  ],\n  setupCode: `\n  LinkedList.prototype.append = function (value) {\n    const newNode = new LinkedListNode(value);\n    if (!this.head) {\n      this.head = newNode;\n      this.tail = newNode;\n      return this;\n    }\n    this.tail.next = newNode;\n    this.tail = newNode;\n    return this;\n  };`,\n  category: LINKED_LIST,\n  type: DATA_STRUCTURE,\n  difficulty: BEGINNER,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 210],\n    solutionLines: solution,\n  },\n};\n","import { LINKED_LIST, DATA_STRUCTURE, BEGINNER } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class LinkedListNode {' },\n  { stage: 0, text: '  constructor(value, next = null) {' },\n  { stage: 0, text: '    this.value = value;' },\n  { stage: 0, text: '    this.next = next;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class LinkedList {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.head = null;' },\n  { stage: 0, text: '    this.tail = null;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: -1, text: '  // IMPLEMENTED: append(value: any) LinkedList' },\n  { stage: -1, text: '' },\n  { stage: 1, text: '  fromArray(values) {' },\n  { stage: 3, text: '    values.forEach(value => this.append(value));' },\n  { stage: 2, text: '    return this;' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 7,\n  problemName: 'Implement **fromArray** in a *LinkedList* class.',\n  problemText:\n    'Given a *LinkedList* class with an **append** method, create a **fromArray** method that will take in an array of `values` as a parameter and return a *LinkedList*.',\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const ll=new LinkedList();`,\n      evaluate: `Boolean(ll);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'converts array to linked list (and back)',\n      inherit: [1],\n      code: `ll.fromArray([1,2,3,4,5]);`,\n      evaluate: `ll.toArray()`,\n      expected: JSON.stringify([1, 2, 3, 4, 5]),\n    },\n    {\n      id: 3,\n      name: 'double check values by stepping through (head)',\n      inherit: [1, 2],\n      code: ``,\n      evaluate: `ll.head.value`,\n      expected: 1,\n    },\n    {\n      id: 4,\n      name: 'double check values by stepping through (tail)',\n      inherit: [1, 2],\n      code: ``,\n      evaluate: `ll.tail.value`,\n      expected: 5,\n    },\n    {\n      id: 5,\n      name: 'empty fromArray results in empty list',\n      inherit: [1],\n      code: `ll.fromArray([]);`,\n      evaluate: `ll.head == null;`,\n      expected: true,\n    },\n    {\n      id: 6,\n      name: 'empty fromArray results in empty list',\n      inherit: [1, 5],\n      code: ``,\n      evaluate: `ll.toArray();`,\n      expected: JSON.stringify([]),\n    },\n    {\n      id: 7,\n      name: 'double check values by stepping through (head next)',\n      inherit: [1, 2],\n      code: ``,\n      evaluate: `ll.head.next.value`,\n      expected: 2,\n    },\n  ],\n  setupCode: `\n  LinkedList.prototype.append = function (value) {\n    const newNode = new LinkedListNode(value);\n    if (!this.head) {\n      this.head = newNode;\n      this.tail = newNode;\n      return this;\n    }\n    this.tail.next = newNode;\n    this.tail = newNode;\n    return this;\n  };\n  LinkedList.prototype.toArray = function () {\n    const values = [];\n    let currentNode = this.head;\n    while (currentNode) {\n      values.push(currentNode.value);\n      currentNode = currentNode.next;\n    }\n    return values;\n  };\n  `,\n  category: LINKED_LIST,\n  type: DATA_STRUCTURE,\n  difficulty: BEGINNER,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 120],\n    solutionLines: solution,\n  },\n};\n","import { LINKED_LIST, DATA_STRUCTURE, BEGINNER } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class LinkedListNode {' },\n  { stage: 0, text: '  constructor(value, next = null) {' },\n  { stage: 0, text: '    this.value = value;' },\n  { stage: 0, text: '    this.next = next;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class LinkedList {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.head = null;' },\n  { stage: 0, text: '    this.tail = null;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  toArray() {' },\n  { stage: 2, text: '    const values = [];' },\n  { stage: 2, text: '' },\n  { stage: 3, text: '    let currentNode = this.head;' },\n  { stage: 3, text: '    while (currentNode) {' },\n  { stage: 4, text: '      values.push(currentNode.value);' },\n  { stage: 4, text: '      currentNode = currentNode.next;' },\n  { stage: 3, text: '    }' },\n  { stage: 3, text: '' },\n  { stage: 2, text: '    return values;' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 8,\n  problemName: 'Implement **toArray** in a *LinkedList* class.',\n  problemText:\n    'Provide a class method **toArray** that converts the value property of each *LinkedListNode* into a new array item, and returns that array.',\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const ll=new LinkedList();`,\n      evaluate: `Boolean(ll);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'converts empty linked list to empty array',\n      inherit: [1],\n      code: ``,\n      evaluate: `ll.toArray();`,\n      expected: JSON.stringify([]),\n    },\n    {\n      id: 3,\n      name: 'linked list of 4 items into array',\n      inherit: [1],\n      code: `ll.append(2).append(3).append(4).append(5);`,\n      evaluate: `ll.toArray();`,\n      expected: JSON.stringify([2, 3, 4, 5]),\n    },\n  ],\n  setupCode: `\n  LinkedList.prototype.append = function (value) {\n    const newNode = new LinkedListNode(value);\n    if (!this.head) {\n      this.head = newNode;\n      this.tail = newNode;\n      return this;\n    }\n    this.tail.next = newNode;\n    this.tail = newNode;\n    return this;\n  };`,\n  category: LINKED_LIST,\n  type: DATA_STRUCTURE,\n  difficulty: BEGINNER,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 150],\n    solutionLines: solution,\n  },\n};\n","import { LINKED_LIST, DATA_STRUCTURE, ADVANCED } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class LinkedListNode {' },\n  { stage: 0, text: '  constructor(value, next = null) {' },\n  { stage: 0, text: '    this.value = value;' },\n  { stage: 0, text: '    this.next = next;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class LinkedList {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.head = null;' },\n  { stage: 0, text: '    this.tail = null;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '  reverse() {' },\n  { stage: 1, text: '    let currNode = this.head;' },\n  { stage: 2, text: '    let prevNode = null;' },\n  { stage: 2, text: '    let nextNode = null;' },\n  { stage: 3, text: '' },\n  { stage: 4, text: '    while (currNode) {' },\n  { stage: 5, text: '      nextNode = currNode.next;' },\n  { stage: 5, text: '      currNode.next = prevNode;' },\n  { stage: 6, text: '      prevNode = currNode;' },\n  { stage: 6, text: '      currNode = nextNode;' },\n  { stage: 4, text: '    }' },\n  { stage: 4, text: '' },\n  { stage: 7, text: '    this.tail = this.head;' },\n  { stage: 7, text: '    this.head = prevNode;' },\n  { stage: 3, text: '' },\n  { stage: 2, text: '    return this;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 9,\n  problemName: 'Reverse a *Linked List*.',\n  problemText:\n    'Write a **reverse** method to reverse a Linked List in-place (not using a copy) which then returns itself.',\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const ll=new LinkedList();`,\n      evaluate: `Boolean(ll);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'reverse a list',\n      inherit: [1],\n      code: `ll.append(1).append(2).append(3).append(4);`,\n      evaluate: `ll.reverse().toArray();`,\n      expected: JSON.stringify([4, 3, 2, 1]),\n    },\n    {\n      id: 3,\n      name: 'reverse an empty list',\n      inherit: [1],\n      code: ``,\n      evaluate: `ll.reverse().toArray();`,\n      expected: JSON.stringify([]),\n    },\n  ],\n  setupCode: `\n  LinkedList.prototype.append = function (value) {\n    const newNode = new LinkedListNode(value);\n    if (!this.head) {\n      this.head = newNode;\n      this.tail = newNode;\n      return this;\n    }\n    this.tail.next = newNode;\n    this.tail = newNode;\n    return this;\n  };\n  LinkedList.prototype.toArray = function () {\n    const values = [];\n    let currentNode = this.head;\n    while (currentNode) {\n      values.push(currentNode.value);\n      currentNode = currentNode.next;\n    }\n    return values;\n  };\n  `,\n  category: LINKED_LIST,\n  type: DATA_STRUCTURE,\n  difficulty: ADVANCED,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 240],\n    solutionLines: solution,\n  },\n};\n","import { DOUBLY_LINKED_LIST, DATA_STRUCTURE, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class DoublyLinkedListNode {' },\n  { stage: 0, text: '  constructor(value, next = null, previous = null) {' },\n  { stage: 0, text: '    this.value = value;' },\n  { stage: 0, text: '    this.next = next;' },\n  { stage: 0, text: '    this.previous = previous;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class DoublyLinkedList {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.head = null;' },\n  { stage: 0, text: '    this.tail = null;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  prepend(value) {' },\n  { stage: 2, text: '    const newNode = new DoublyLinkedListNode(value, this.head);' },\n  { stage: 2, text: '' },\n  { stage: 3, text: '    if (this.head) {' },\n  { stage: 4, text: '      this.head.previous = newNode;' },\n  { stage: 3, text: '    }' },\n  { stage: 4, text: '    this.head = newNode;' },\n  { stage: 3, text: '' },\n  { stage: 5, text: '    if (!this.tail) {' },\n  { stage: 5, text: '      this.tail = newNode;' },\n  { stage: 5, text: '    }' },\n  { stage: 4, text: '' },\n  { stage: 2, text: '    return this;' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 10,\n  problemName: 'Implement **prepend** in a *DoublyLinkedList* class.',\n  problemText:\n    'Write a **prepend** method in a *DoublyLinkedList* class that accepts an arbitrary `value` parameter, creates a *DoublyLinkedListNode*, and inserts it at the front of the list.  The method should return the original list.',\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const dll=new DoublyLinkedList();`,\n      evaluate: `Boolean(dll);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'prepend element onto empty list',\n      inherit: [1],\n      code: `dll.prepend(5);`,\n      evaluate: `dll.head.value;`,\n      expected: 5,\n    },\n    {\n      id: 3,\n      name: 'prepend element onto empty list, tail correct',\n      inherit: [1, 2],\n      code: ``,\n      evaluate: `dll.tail.value;`,\n      expected: 5,\n    },\n    {\n      id: 4,\n      name: 'prepend 2nd element onto list, head correct',\n      inherit: [1],\n      code: `dll.prepend(7);`,\n      evaluate: `dll.head.value;`,\n      expected: 7,\n    },\n    {\n      id: 5,\n      name: 'prepend 2nd element onto list, tail correct',\n      inherit: [1, 2, 4],\n      code: ``,\n      evaluate: `dll.tail.value;`,\n      expected: 5,\n    },\n    {\n      id: 6,\n      name: 'prepend 2nd element onto list, head next correct',\n      inherit: [1, 2, 4],\n      code: ``,\n      evaluate: `dll.head.next.value;`,\n      expected: 5,\n    },\n  ],\n  setupCode: '',\n  category: DOUBLY_LINKED_LIST,\n  type: DATA_STRUCTURE,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 180],\n    solutionLines: solution,\n  },\n};\n","import { DOUBLY_LINKED_LIST, DATA_STRUCTURE, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class DoublyLinkedListNode {' },\n  { stage: 0, text: '  constructor(value, next = null, previous = null) {' },\n  { stage: 0, text: '    this.value = value;' },\n  { stage: 0, text: '    this.next = next;' },\n  { stage: 0, text: '    this.previous = previous;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class DoublyLinkedList {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.head = null;' },\n  { stage: 0, text: '    this.tail = null;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  append(value) {' },\n  { stage: 2, text: '    const newNode = new DoublyLinkedListNode(value);' },\n  { stage: 2, text: '' },\n  { stage: 3, text: '    if (!this.head) {' },\n  { stage: 4, text: '      this.head = newNode;' },\n  { stage: 4, text: '      this.tail = newNode;' },\n  { stage: 4, text: '      return this;' },\n  { stage: 3, text: '    }' },\n  { stage: 3, text: '' },\n  { stage: 5, text: '    this.tail.next = newNode;' },\n  { stage: 5, text: '    newNode.previous = this.tail;' },\n  { stage: 5, text: '    this.tail = newNode;' },\n  { stage: 2, text: '    return this;' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 11,\n  problemName: 'Implement **append** in a *DoublyLinkedList* class.',\n  problemText:\n    'Write an **append** method in a *DoublyLinkedList* class that accepts an arbitrary `value` parameter, creates a *DoublyLinkedListNode*, and adds it to the end of the list.  The method should return the original list.',\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const dll=new DoublyLinkedList();`,\n      evaluate: `Boolean(dll);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'append onto empty list, head set correctly',\n      inherit: [1],\n      code: `dll.append(3);`,\n      evaluate: `dll.head.value;`,\n      expected: 3,\n    },\n    {\n      id: 3,\n      name: 'append onto empty list, tail set correctly',\n      inherit: [1, 2],\n      code: ``,\n      evaluate: `dll.tail.value;`,\n      expected: 3,\n    },\n    {\n      id: 4,\n      name: 'append 2nd item onto list, check head',\n      inherit: [1, 2],\n      code: `dll.append(8);`,\n      evaluate: `dll.head.value;`,\n      expected: 3,\n    },\n    {\n      id: 5,\n      name: 'append 2nd item onto list, check tail',\n      inherit: [1, 2, 4],\n      code: ``,\n      evaluate: `dll.tail.value;`,\n      expected: 8,\n    },\n    {\n      id: 6,\n      name: 'append 2nd item onto list, check head next',\n      inherit: [1, 2, 4],\n      code: ``,\n      evaluate: `dll.head.next.value;`,\n      expected: 8,\n    },\n  ],\n  setupCode: '',\n  category: DOUBLY_LINKED_LIST,\n  type: DATA_STRUCTURE,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 180],\n    solutionLines: solution,\n  },\n};\n","import { DOUBLY_LINKED_LIST, DATA_STRUCTURE, ADVANCED } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class DoublyLinkedListNode {' },\n  { stage: 0, text: '  constructor(value, next = null, previous = null) {' },\n  { stage: 0, text: '    this.value = value;' },\n  { stage: 0, text: '    this.next = next;' },\n  { stage: 0, text: '    this.previous = previous;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class DoublyLinkedList {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.head = null;' },\n  { stage: 0, text: '    this.tail = null;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  delete(value) {' },\n  { stage: 2, text: '    if (!this.head) {' },\n  { stage: 2, text: '      return null;' },\n  { stage: 2, text: '    }' },\n  { stage: 2, text: '' },\n  { stage: 3, text: '    let deletedNode = null;' },\n  { stage: 3, text: '    let currentNode = this.head;' },\n  { stage: 3, text: '' },\n  { stage: 4, text: '    while (currentNode) {' },\n  { stage: 5, text: '      if (currentNode.value === value) {' },\n  { stage: 6, text: '        deletedNode = currentNode;' },\n  { stage: 6, text: '' },\n  { stage: 6, text: '        if (deletedNode === this.head) {' },\n  { stage: 7, text: '          this.head = deletedNode.next;' },\n  { stage: 7, text: '' },\n  { stage: 8, text: '          if (this.head) {' },\n  { stage: 8, text: '            this.head.previous = null;' },\n  { stage: 8, text: '          }' },\n  { stage: 8, text: '' },\n  { stage: 9, text: '          if (deletedNode === this.tail) {' },\n  { stage: 9, text: '            this.tail = null;' },\n  { stage: 9, text: '          }' },\n  { stage: 6, text: '        } else if (deletedNode === this.tail) {' },\n  { stage: 10, text: '          this.tail = deletedNode.previous;' },\n  { stage: 10, text: '          this.tail.next = null;' },\n  { stage: 6, text: '        } else {' },\n  { stage: 11, text: '          const previousNode = deletedNode.previous;' },\n  { stage: 11, text: '          const nextNode = deletedNode.next;' },\n  { stage: 11, text: '' },\n  { stage: 12, text: '          previousNode.next = nextNode;' },\n  { stage: 12, text: '          nextNode.previous = previousNode;' },\n  { stage: 6, text: '        }' },\n  { stage: 5, text: '      }' },\n  { stage: 5, text: '' },\n  { stage: 13, text: '      currentNode = currentNode.next;' },\n  { stage: 4, text: '    }' },\n  { stage: 7, text: '' },\n  { stage: 7, text: '    return deletedNode;' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 12,\n  problemName: 'Implement **delete** in a *DoublyLinkedList* class.',\n  problemText:\n    'Write a **delete** method in a *DoublyLinkedList* class that accepts an arbitrary `value` parameter and deletes all `DoublyLinkedListNode` nodes that have a matching value.  The method should return the last node deleted (or `null` if no match found).',\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const dll=new DoublyLinkedList();`,\n      evaluate: `Boolean(dll);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'return null on empty list',\n      inherit: [1],\n      code: ``,\n      evaluate: `dll.delete(5);`,\n      expected: null,\n    },\n    {\n      id: 3,\n      name: 'add and cleanly remove node from list (check head)',\n      inherit: [1],\n      code: `dll.append(5);dll.delete(5);`,\n      evaluate: `dll.head`,\n      expected: null,\n    },\n    {\n      id: 4,\n      name: 'add and cleanly remove node from list (check tail)',\n      inherit: [1, 3],\n      code: ``,\n      evaluate: `dll.tail`,\n      expected: null,\n    },\n    {\n      id: 5,\n      name: 'add 3 nodes and delete the first',\n      inherit: [1],\n      code: `dll.append(1).append(2).append(3);`,\n      evaluate: `dll.delete(1);dll.head.value;`,\n      expected: 2,\n    },\n    {\n      id: 6,\n      name: 'add 3 nodes and delete the first (check tail)',\n      inherit: [1, 5],\n      code: ``,\n      evaluate: `dll.delete(1);dll.tail.value;`,\n      expected: 3,\n    },\n    {\n      id: 7,\n      name: 'add 3 nodes and delete the second (check head connector)',\n      inherit: [1, 5],\n      code: ``,\n      evaluate: `dll.delete(2);dll.head.next.value;`,\n      expected: 3,\n    },\n    {\n      id: 8,\n      name: 'add 3 nodes and delete the last (check tail)',\n      inherit: [1, 5],\n      code: ``,\n      evaluate: `dll.delete(3);dll.tail.value;`,\n      expected: 2,\n    },\n    {\n      id: 9,\n      name: 'add 3 nodes and delete them all (check head)',\n      inherit: [1, 5],\n      code: ``,\n      evaluate: `dll.delete(3);dll.delete(2);dll.delete(1);dll.head;`,\n      expected: null,\n    },\n    {\n      id: 10,\n      name: 'add 3 nodes and delete them all (check tail)',\n      inherit: [1, 5],\n      code: ``,\n      evaluate: `dll.delete(3);dll.delete(2);dll.delete(1);dll.tail;`,\n      expected: null,\n    },\n  ],\n  setupCode: `\n  DoublyLinkedList.prototype.append = function(value) {\n    const newNode = new DoublyLinkedListNode(value);\n    if (!this.head) {\n      this.head = newNode;\n      this.tail = newNode;\n      return this;\n    }\n    this.tail.next = newNode;\n    newNode.previous = this.tail;\n    this.tail = newNode;\n    return this;\n  }\n  `,\n  category: DOUBLY_LINKED_LIST,\n  type: DATA_STRUCTURE,\n  difficulty: ADVANCED,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330, 360, 420],\n    solutionLines: solution,\n  },\n};\n","import { DOUBLY_LINKED_LIST, DATA_STRUCTURE, BEGINNER } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class DoublyLinkedListNode {' },\n  { stage: 0, text: '  constructor(value, next = null, previous = null) {' },\n  { stage: 0, text: '    this.value = value;' },\n  { stage: 0, text: '    this.next = next;' },\n  { stage: 0, text: '    this.previous = previous;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class DoublyLinkedList {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.head = null;' },\n  { stage: 0, text: '    this.tail = null;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  find(value) {' },\n  { stage: 2, text: '    if (!this.head) {' },\n  { stage: 2, text: '      return null;' },\n  { stage: 2, text: '    }' },\n  { stage: 3, text: '' },\n  { stage: 3, text: '    let currentNode = this.head;' },\n  { stage: 3, text: '' },\n  { stage: 4, text: '    while (currentNode) {' },\n  { stage: 5, text: '      if (currentNode.value === value) {' },\n  { stage: 5, text: '        return currentNode;' },\n  { stage: 5, text: '      }' },\n  { stage: 6, text: '' },\n  { stage: 6, text: '      currentNode = currentNode.next;' },\n  { stage: 4, text: '    }' },\n  { stage: 4, text: '' },\n  { stage: 4, text: '    return null;' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 13,\n  problemName: 'Implement **find** in a *DoublyLinkedList* class.',\n  problemText:\n    'Write a **find** method in a *DoublyLinkedList* class that accepts an arbitrary `value` parameter and returns the first `DoublyLinkedListNode` that has a matching value (or `null` if no match found).',\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const dll=new DoublyLinkedList();`,\n      evaluate: `Boolean(dll);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'find on an empty list',\n      inherit: [1],\n      code: ``,\n      evaluate: `dll.find(5);`,\n      expected: null,\n    },\n    {\n      id: 3,\n      name: 'add one item, find that item',\n      inherit: [1],\n      code: `dll.append(4);`,\n      evaluate: `dll.find(4).value;`,\n      expected: 4,\n    },\n    {\n      id: 4,\n      name: 'add one item, find an item that does not exist',\n      inherit: [1],\n      code: `dll.append(4);`,\n      evaluate: `dll.find(6);`,\n      expected: null,\n    },\n    {\n      id: 5,\n      name: 'add three items, find an item',\n      inherit: [1],\n      code: `dll.append(1).append(2).append(3);`,\n      evaluate: `dll.find(2).value;`,\n      expected: 2,\n    },\n    {\n      id: 6,\n      name: 'add three items -two dupicates, return the first',\n      inherit: [1],\n      code: `dll.append(1).append(2).append(2);`,\n      evaluate: `dll.find(2) === dll.head.next;`,\n      expected: true,\n    },\n  ],\n  setupCode: `\n  DoublyLinkedList.prototype.append = function(value) {\n    const newNode = new DoublyLinkedListNode(value);\n    if (!this.head) {\n      this.head = newNode;\n      this.tail = newNode;\n      return this;\n    }\n    this.tail.next = newNode;\n    newNode.previous = this.tail;\n    this.tail = newNode;\n    return this;\n  }\n  `,\n  category: DOUBLY_LINKED_LIST,\n  type: DATA_STRUCTURE,\n  difficulty: BEGINNER,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 210],\n    solutionLines: solution,\n  },\n};\n","import { DOUBLY_LINKED_LIST, DATA_STRUCTURE, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class DoublyLinkedListNode {' },\n  { stage: 0, text: '  constructor(value, next = null, previous = null) {' },\n  { stage: 0, text: '    this.value = value;' },\n  { stage: 0, text: '    this.next = next;' },\n  { stage: 0, text: '    this.previous = previous;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class DoublyLinkedList {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.head = null;' },\n  { stage: 0, text: '    this.tail = null;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  deleteTail() {' },\n  { stage: 2, text: '    if (!this.tail) {' },\n  { stage: 2, text: '      return null;' },\n  { stage: 2, text: '    }' },\n  { stage: 3, text: '' },\n  { stage: 3, text: '    if (this.head === this.tail) {' },\n  { stage: 4, text: '      const deletedTail = this.tail;' },\n  { stage: 4, text: '      this.head = null;' },\n  { stage: 4, text: '      this.tail = null;' },\n  { stage: 4, text: '      return deletedTail;' },\n  { stage: 3, text: '    }' },\n  { stage: 5, text: '' },\n  { stage: 6, text: '    const deletedTail = this.tail;' },\n  { stage: 6, text: '    this.tail = this.tail.previous;' },\n  { stage: 6, text: '    this.tail.next = null;' },\n  { stage: 5, text: '' },\n  { stage: 5, text: '    return deletedTail;' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 14,\n  problemName: 'Implement **deleteTail** in a *DoublyLinkedList* class.',\n  problemText:\n    'Write a **deleteTail** method in a *DoublyLinkedList* class that will remove and return the last `DoublyLinkedListNode` in the list, or `null` if the list is empty.',\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const dll=new DoublyLinkedList();`,\n      evaluate: `Boolean(dll);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'return null if list is empty',\n      inherit: [1],\n      code: ``,\n      evaluate: `dll.deleteTail();`,\n      expected: null,\n    },\n    {\n      id: 3,\n      name: 'return item from 1 item list.',\n      inherit: [1],\n      code: `dll.append(5);`,\n      evaluate: `dll.deleteTail().value;`,\n      expected: 5,\n    },\n    {\n      id: 4,\n      name: 'return item from 1 item list - head set correctly.',\n      inherit: [1, 3],\n      code: `dll.deleteTail();`,\n      evaluate: `dll.head;`,\n      expected: null,\n    },\n    {\n      id: 5,\n      name: 'return item from 1 item list - tail set correctly.',\n      inherit: [1, 3],\n      code: `dll.deleteTail();`,\n      evaluate: `dll.tail;`,\n      expected: null,\n    },\n    {\n      id: 6,\n      name: 'add 3 items, deleteTail twice.',\n      inherit: [1],\n      code: `dll.append(5).append(4).append(3);dll.deleteTail();dll.deleteTail();`,\n      evaluate: `dll.head.value`,\n      expected: 5,\n    },\n    {\n      id: 7,\n      name: 'add 3 items, deleteTail twice.',\n      inherit: [1, 6],\n      code: ``,\n      evaluate: `dll.tail.value`,\n      expected: 5,\n    },\n  ],\n  setupCode: `\n  DoublyLinkedList.prototype.append = function(value) {\n    const newNode = new DoublyLinkedListNode(value);\n    if (!this.head) {\n      this.head = newNode;\n      this.tail = newNode;\n      return this;\n    }\n    this.tail.next = newNode;\n    newNode.previous = this.tail;\n    this.tail = newNode;\n    return this;\n  }\n  `,\n  category: DOUBLY_LINKED_LIST,\n  type: DATA_STRUCTURE,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 210],\n    solutionLines: solution,\n  },\n};\n","import { DOUBLY_LINKED_LIST, DATA_STRUCTURE, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class DoublyLinkedListNode {' },\n  { stage: 0, text: '  constructor(value, next = null, previous = null) {' },\n  { stage: 0, text: '    this.value = value;' },\n  { stage: 0, text: '    this.next = next;' },\n  { stage: 0, text: '    this.previous = previous;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class DoublyLinkedList {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.head = null;' },\n  { stage: 0, text: '    this.tail = null;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  deleteHead() {' },\n  { stage: 2, text: '    if (!this.head) {' },\n  { stage: 2, text: '      return null;' },\n  { stage: 2, text: '    }' },\n  { stage: 3, text: '' },\n  { stage: 3, text: '    const deletedHead = this.head;' },\n  { stage: 3, text: '' },\n  { stage: 4, text: '    if (this.head.next) {' },\n  { stage: 5, text: '      this.head = this.head.next;' },\n  { stage: 5, text: '      this.head.previous = null;' },\n  { stage: 4, text: '    } else {' },\n  { stage: 6, text: '      this.head = null;' },\n  { stage: 6, text: '      this.tail = null;' },\n  { stage: 4, text: '    }' },\n  { stage: 4, text: '' },\n  { stage: 4, text: '    return deletedHead;' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 15,\n  problemName: 'Implement **deleteHead** in a *DoublyLinkedList* class.',\n  problemText:\n    'Write a **deleteHead** method in a *DoublyLinkedList* class that will remove and return the first `DoublyLinkedListNode` in the list (or `null` if the list is empty).',\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const dll=new DoublyLinkedList();`,\n      evaluate: `Boolean(dll);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'deleteHead from an empty list returns null',\n      inherit: [1],\n      code: ``,\n      evaluate: `dll.deleteHead();`,\n      expected: null,\n    },\n    {\n      id: 3,\n      name: 'add item and delete item',\n      inherit: [1],\n      code: `dll.append(8);`,\n      evaluate: `dll.deleteHead().value;`,\n      expected: 8,\n    },\n    {\n      id: 4,\n      name: 'add item and delete item - check head;',\n      inherit: [1],\n      code: `dll.append(8);dll.deleteHead();`,\n      evaluate: `dll.head;`,\n      expected: null,\n    },\n    {\n      id: 5,\n      name: 'add item and delete item',\n      inherit: [1, 4],\n      code: ``,\n      evaluate: `dll.tail;`,\n      expected: null,\n    },\n    {\n      id: 6,\n      name: 'add 3 items and delete one',\n      inherit: [1],\n      code: `dll.append(6).append(7).append(8);`,\n      evaluate: `dll.deleteHead().value;`,\n      expected: 6,\n    },\n    {\n      id: 7,\n      name: 'add 3 items and delete one - check head',\n      inherit: [1, 6],\n      code: `dll.deleteHead();`,\n      evaluate: `dll.head.value;`,\n      expected: 7,\n    },\n    {\n      id: 8,\n      name: 'add 3 items and delete one - check tail',\n      inherit: [1, 6, 7],\n      code: ``,\n      evaluate: `dll.tail.value;`,\n      expected: 8,\n    },\n  ],\n  setupCode: `\n  DoublyLinkedList.prototype.append = function(value) {\n    const newNode = new DoublyLinkedListNode(value);\n    if (!this.head) {\n      this.head = newNode;\n      this.tail = newNode;\n      return this;\n    }\n    this.tail.next = newNode;\n    newNode.previous = this.tail;\n    this.tail = newNode;\n    return this;\n  }\n  `,\n  category: DOUBLY_LINKED_LIST,\n  type: DATA_STRUCTURE,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 120],\n    solutionLines: solution,\n  },\n};\n","import { DOUBLY_LINKED_LIST, DATA_STRUCTURE, BEGINNER } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class DoublyLinkedListNode {' },\n  { stage: 0, text: '  constructor(value, next = null, previous = null) {' },\n  { stage: 0, text: '    this.value = value;' },\n  { stage: 0, text: '    this.next = next;' },\n  { stage: 0, text: '    this.previous = previous;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class DoublyLinkedList {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.head = null;' },\n  { stage: 0, text: '    this.tail = null;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: -1, text: '  // IMPLEMENTED: append(value: any) DoublyLinkedList' },\n  { stage: -1, text: '' },\n  { stage: 1, text: '  fromArray(values) {' },\n  { stage: 3, text: '    values.forEach(value => this.append(value));' },\n  { stage: 2, text: '    return this;' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 16,\n  problemName: 'Implement **fromArray** in a *DoublyLinkedList* class.',\n  problemText:\n    \"Given a *DoublyLinkedList* class with an **append** method, create a **fromArray** method that will take in an array of `values` as a parameter, populate corresponding `DoublyLinkedListNode`'s and return the list.\",\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const dll=new DoublyLinkedList();`,\n      evaluate: `Boolean(dll);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'empty array creates empty list - check head',\n      inherit: [1],\n      code: `dll.fromArray([]);`,\n      evaluate: `dll.head;`,\n      expected: null,\n    },\n    {\n      id: 3,\n      name: 'empty array creates empty list - check tail',\n      inherit: [1, 2],\n      code: ``,\n      evaluate: `dll.tail;`,\n      expected: null,\n    },\n    {\n      id: 4,\n      name: 'creates one-item list - check head',\n      inherit: [1],\n      code: `dll.fromArray([5]);`,\n      evaluate: `dll.head.value;`,\n      expected: 5,\n    },\n    {\n      id: 5,\n      name: 'creates one-item list - check tail',\n      inherit: [1, 4],\n      code: ``,\n      evaluate: `dll.tail.value;`,\n      expected: 5,\n    },\n    {\n      id: 6,\n      name: 'creates three-item list - check head',\n      inherit: [1],\n      code: `dll.fromArray([6,7,8]);`,\n      evaluate: `dll.head.value;`,\n      expected: 6,\n    },\n    {\n      id: 7,\n      name: 'creates three-item list - check tail',\n      inherit: [1, 6],\n      code: ``,\n      evaluate: `dll.tail.value;`,\n      expected: 8,\n    },\n    {\n      id: 8,\n      name: 'creates three-item list - check head next',\n      inherit: [1, 6],\n      code: ``,\n      evaluate: `dll.head.next.value;`,\n      expected: 7,\n    },\n  ],\n  setupCode: `\n  DoublyLinkedList.prototype.append = function (value) {\n    const newNode = new DoublyLinkedListNode(value);\n    if (!this.head) {\n      this.head = newNode;\n      this.tail = newNode;\n      return this;\n    }\n    this.tail.next = newNode;\n    newNode.previous = this.tail;\n    this.tail = newNode;\n    return this;\n  }\n  `,\n  category: DOUBLY_LINKED_LIST,\n  type: DATA_STRUCTURE,\n  difficulty: BEGINNER,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 120],\n    solutionLines: solution,\n  },\n};\n","import { DOUBLY_LINKED_LIST, DATA_STRUCTURE, BEGINNER } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class DoublyLinkedListNode {' },\n  { stage: 0, text: '  constructor(value, next = null, previous = null) {' },\n  { stage: 0, text: '    this.value = value;' },\n  { stage: 0, text: '    this.next = next;' },\n  { stage: 0, text: '    this.previous = previous;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class DoublyLinkedList {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.head = null;' },\n  { stage: 0, text: '    this.tail = null;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  toArray() {' },\n  { stage: 2, text: '    const nodes = [];' },\n  { stage: 2, text: '' },\n  { stage: 3, text: '    let currentNode = this.head;' },\n  { stage: 3, text: '    while (currentNode) {' },\n  { stage: 4, text: '      nodes.push(currentNode.value);' },\n  { stage: 4, text: '      currentNode = currentNode.next;' },\n  { stage: 3, text: '    }' },\n  { stage: 3, text: '' },\n  { stage: 2, text: '    return nodes;' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 17,\n  problemName: 'Implement **toArray** in a *DoublyLinkedList* class.',\n  problemText:\n    \"Provide a class method **toArray** that converts *DoublyLinkedListNode* `value`'s in a *DoublyLinkedList* into array elements in matching order.\",\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const dll=new DoublyLinkedList();`,\n      evaluate: `Boolean(dll);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'empty list makes empty array',\n      inherit: [1],\n      code: ``,\n      evaluate: `dll.toArray();`,\n      expected: JSON.stringify([]),\n    },\n    {\n      id: 3,\n      name: 'one item list',\n      inherit: [1],\n      code: `dll.append(4);`,\n      evaluate: `dll.toArray();`,\n      expected: JSON.stringify([4]),\n    },\n    {\n      id: 4,\n      name: 'three item list',\n      inherit: [1],\n      code: `dll.append(4).append(5).append(6);`,\n      evaluate: `dll.toArray();`,\n      expected: JSON.stringify([4, 5, 6]),\n    },\n  ],\n  setupCode: `\n  DoublyLinkedList.prototype.append = function (value) {\n    const newNode = new DoublyLinkedListNode(value);\n    if (!this.head) {\n      this.head = newNode;\n      this.tail = newNode;\n      return this;\n    }\n    this.tail.next = newNode;\n    newNode.previous = this.tail;\n    this.tail = newNode;\n    return this;\n  }\n  `,\n  category: DOUBLY_LINKED_LIST,\n  type: DATA_STRUCTURE,\n  difficulty: BEGINNER,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 150],\n    solutionLines: solution,\n  },\n};\n","import { DOUBLY_LINKED_LIST, DATA_STRUCTURE, ADVANCED } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class DoublyLinkedListNode {' },\n  { stage: 0, text: '  constructor(value, next = null, previous = null) {' },\n  { stage: 0, text: '    this.value = value;' },\n  { stage: 0, text: '    this.next = next;' },\n  { stage: 0, text: '    this.previous = previous;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class DoublyLinkedList {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.head = null;' },\n  { stage: 0, text: '    this.tail = null;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  reverse() {' },\n  { stage: 2, text: '    let currNode = this.head;' },\n  { stage: 2, text: '    let prevNode = null;' },\n  { stage: 2, text: '    let nextNode = null;' },\n  { stage: 3, text: '' },\n  { stage: 3, text: '    while (currNode) {' },\n  { stage: 4, text: '      nextNode = currNode.next;' },\n  { stage: 4, text: '      prevNode = currNode.previous;' },\n  { stage: 4, text: '' },\n  { stage: 5, text: '      currNode.next = prevNode;' },\n  { stage: 5, text: '      currNode.previous = nextNode;' },\n  { stage: 5, text: '' },\n  { stage: 6, text: '      prevNode = currNode;' },\n  { stage: 6, text: '      currNode = nextNode;' },\n  { stage: 3, text: '    }' },\n  { stage: 3, text: '' },\n  { stage: 7, text: '    this.tail = this.head;' },\n  { stage: 7, text: '    this.head = prevNode;' },\n  { stage: 7, text: '    return this;' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 18,\n  problemName: 'Reverse a *DoublyLinkedList* in-place.',\n  problemText:\n    'Provide a class method **reverse** that will reverse a *DoublyLinkedList* in place (not using a copy), and return the list.',\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const dll=new DoublyLinkedList();`,\n      evaluate: `Boolean(dll);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'reversing an empty list - still empty',\n      inherit: [1],\n      code: ``,\n      evaluate: `dll.reverse();`,\n      expected: `{\"head\":null,\"tail\":null}`,\n    },\n    {\n      id: 3,\n      name: 'reversing a one item list - check head',\n      inherit: [1],\n      code: `dll.append(5);`,\n      evaluate: `dll.reverse().head.value;`,\n      expected: 5,\n    },\n    {\n      id: 4,\n      name: 'reversing a one item list - check head',\n      inherit: [1, 3],\n      code: ``,\n      evaluate: `dll.reverse().tail.value;`,\n      expected: 5,\n    },\n    {\n      id: 5,\n      name: 'reversing a three item list - check head',\n      inherit: [1],\n      code: `dll.append(6).append(7).append(8);`,\n      evaluate: `dll.reverse().head.value;`,\n      expected: 8,\n    },\n    {\n      id: 6,\n      name: 'reversing a three item list - check head',\n      inherit: [1, 5],\n      code: ``,\n      evaluate: `dll.reverse().tail.value;`,\n      expected: 6,\n    },\n    {\n      id: 7,\n      name: 'reversing a three item list - check head next',\n      inherit: [1, 5],\n      code: ``,\n      evaluate: `dll.reverse().head.next.value;`,\n      expected: 7,\n    },\n  ],\n  setupCode: `\n  DoublyLinkedList.prototype.append = function(value) {\n    const newNode = new DoublyLinkedListNode(value);\n    if (!this.head) {\n      this.head = newNode;\n      this.tail = newNode;\n      return this;\n    }\n    this.tail.next = newNode;\n    newNode.previous = this.tail;\n    this.tail = newNode;\n    return this;\n  }\n  `,\n  category: DOUBLY_LINKED_LIST,\n  type: DATA_STRUCTURE,\n  difficulty: ADVANCED,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 240],\n    solutionLines: solution,\n  },\n};\n","import { FIBONACCI, ALGORITHM, BEGINNER } from '../constants.js';\n\nconst solution = [\n  { stage: 1, text: 'const fibonacciNth = n => {' },\n  { stage: 2, text: '  if (n === 0 || n === 1) return n;' },\n  { stage: 3, text: '  return fibonacciNth(n - 1) + fibonacciNth(n - 2);' },\n  { stage: 1, text: '};' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 19,\n  problemName: 'Implement a recursive fibonacci function.',\n  problemText:\n    'Implement a function **fibonacciNth** which takes an integer parameter `n` and returns the nth indexed fibonnaci number in the sequence.  For example, n=0 would return 0, n=1 would return 1, n=2 would return 1, and n=3 would return 2. ([0,1,1,2,3,5,8,13... etc]).  Please solve **recursively**.',\n  testCases: [\n    {\n      id: 1,\n      name: '0 case',\n      inherit: [],\n      code: ``,\n      evaluate: `fibonacciNth(0);`,\n      expected: 0,\n    },\n    {\n      id: 2,\n      name: '1 case',\n      inherit: [],\n      code: ``,\n      evaluate: `fibonacciNth(1);`,\n      expected: 1,\n    },\n    {\n      id: 3,\n      name: '2 case',\n      inherit: [],\n      code: ``,\n      evaluate: `fibonacciNth(2);`,\n      expected: 1,\n    },\n    {\n      id: 4,\n      name: '3 case',\n      inherit: [],\n      code: ``,\n      evaluate: `fibonacciNth(3);`,\n      expected: 2,\n    },\n    {\n      id: 5,\n      name: '4 case',\n      inherit: [],\n      code: ``,\n      evaluate: `fibonacciNth(4);`,\n      expected: 3,\n    },\n    {\n      id: 6,\n      name: '5 case',\n      inherit: [],\n      code: ``,\n      evaluate: `fibonacciNth(5);`,\n      expected: 5,\n    },\n    {\n      id: 7,\n      name: '6 case',\n      inherit: [],\n      code: ``,\n      evaluate: `fibonacciNth(6);`,\n      expected: 8,\n    },\n    {\n      id: 8,\n      name: '7 case',\n      inherit: [],\n      code: ``,\n      evaluate: `fibonacciNth(7);`,\n      expected: 13,\n    },\n    {\n      id: 9,\n      name: '8 case',\n      inherit: [],\n      code: ``,\n      evaluate: `fibonacciNth(8);`,\n      expected: 21,\n    },\n  ],\n  setupCode: '',\n  category: FIBONACCI,\n  type: ALGORITHM,\n  difficulty: BEGINNER,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 120],\n    solutionLines: solution,\n  },\n};\n","import { FIBONACCI, ALGORITHM, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 1, text: 'function fibonacciNth(n) {' },\n  { stage: 2, text: '  let currentValue = 1;' },\n  { stage: 2, text: '  let previousValue = 0;' },\n  { stage: 2, text: '' },\n  { stage: 3, text: '  if (n <= 1) {' },\n  { stage: 3, text: '    return n;' },\n  { stage: 3, text: '  }' },\n  { stage: 3, text: '' },\n  { stage: 4, text: '  let iteration = 2;' },\n  { stage: 4, text: '' },\n  { stage: 5, text: '  while (iteration <= n) {' },\n  { stage: 6, text: '    currentValue += previousValue;' },\n  { stage: 6, text: '    previousValue = currentValue - previousValue;' },\n  { stage: 6, text: '    iteration++;' },\n  { stage: 5, text: '  }' },\n  { stage: 5, text: '' },\n  { stage: 4, text: '  return currentValue;' },\n  { stage: 1, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 20,\n  problemName: 'Implement an iterative fibonacci function.',\n  problemText:\n    'Implement a function `fibonacciNth` which takes an integer parameter `n` and returns the nth indexed fibonnaci number in the sequence.  For example, n=0 would return 0, n=1 would return 1, n=2 would return 1, and n=3 would return 2. ([0,1,1,2,3,5,8,13... etc]).  Please solve **iteratively**.',\n  testCases: [\n    {\n      id: 1,\n      name: '0 case',\n      inherit: [],\n      code: ``,\n      evaluate: `fibonacciNth(0);`,\n      expected: 0,\n    },\n    {\n      id: 2,\n      name: '1 case',\n      inherit: [],\n      code: ``,\n      evaluate: `fibonacciNth(1);`,\n      expected: 1,\n    },\n    {\n      id: 3,\n      name: '2 case',\n      inherit: [],\n      code: ``,\n      evaluate: `fibonacciNth(2);`,\n      expected: 1,\n    },\n    {\n      id: 4,\n      name: '3 case',\n      inherit: [],\n      code: ``,\n      evaluate: `fibonacciNth(3);`,\n      expected: 2,\n    },\n    {\n      id: 5,\n      name: '4 case',\n      inherit: [],\n      code: ``,\n      evaluate: `fibonacciNth(4);`,\n      expected: 3,\n    },\n    {\n      id: 6,\n      name: '5 case',\n      inherit: [],\n      code: ``,\n      evaluate: `fibonacciNth(5);`,\n      expected: 5,\n    },\n    {\n      id: 7,\n      name: '6 case',\n      inherit: [],\n      code: ``,\n      evaluate: `fibonacciNth(6);`,\n      expected: 8,\n    },\n    {\n      id: 8,\n      name: '7 case',\n      inherit: [],\n      code: ``,\n      evaluate: `fibonacciNth(7);`,\n      expected: 13,\n    },\n    {\n      id: 9,\n      name: '8 case',\n      inherit: [],\n      code: ``,\n      evaluate: `fibonacciNth(8);`,\n      expected: 21,\n    },\n  ],\n  setupCode: '',\n  category: FIBONACCI,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 210],\n    solutionLines: solution,\n  },\n};\n","import { QUEUE, DATA_STRUCTURE, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: -1, text: '//  class LinkedListNode {' },\n  { stage: -1, text: '//    constructor(value, next = null) {' },\n  { stage: -1, text: '//      this.value = value;' },\n  { stage: -1, text: '//      this.next = next;' },\n  { stage: -1, text: '//    }' },\n  { stage: -1, text: '//  }' },\n  { stage: -1, text: '//' },\n  { stage: -1, text: '//  class LinkedList {' },\n  { stage: -1, text: '//    constructor() {' },\n  { stage: -1, text: '//      this.head = null;' },\n  { stage: -1, text: '//      this.tail = null;' },\n  { stage: -1, text: '//    }' },\n  { stage: -1, text: '//' },\n  { stage: -1, text: '//    append(value: any) LinkedList' },\n  { stage: -1, text: '//    deleteHead() LinkedListNode' },\n  { stage: -1, text: '//' },\n  { stage: -1, text: '//  }' },\n  { stage: -1, text: '//' },\n  { stage: -1, text: '// All code above is implicitly included in your environment' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class Queue {' },\n  { stage: 1, text: '  constructor() {' },\n  { stage: 2, text: '    this.linkedList = new LinkedList();' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 3, text: '  isEmpty() {' },\n  { stage: 5, text: '    return !this.linkedList.head;' },\n  { stage: 3, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 3, text: '  peek() {' },\n  { stage: 6, text: '    if (this.isEmpty()) {' },\n  { stage: 6, text: '      return null;' },\n  { stage: 6, text: '    }' },\n  { stage: 6, text: '    return this.linkedList.head.value;' },\n  { stage: 3, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 4, text: '  enqueue(value) {' },\n  { stage: 5, text: '    this.linkedList.append(value);' },\n  { stage: 4, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 4, text: '  dequeue() {' },\n  { stage: 7, text: '    if (this.isEmpty()) {' },\n  { stage: 7, text: '      return null;' },\n  { stage: 7, text: '    }' },\n  { stage: 7, text: '    return this.linkedList.deleteHead().value;' },\n  { stage: 4, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 21,\n  problemName: 'Implement a *Queue* using a *Linked List*',\n  problemText: `\nGiven a *Queue* class, implement the following methods: \n    \n - **isEmpty** (which returns a Boolean value indicating if there are any items in the queue)\n - **peek** (which returns - but does not remove - the value at the head of the queue)\n - **enqueue** (which adds a value to the end of the queue - does not return anything)\n - **dequeue** (which removes and returns the value at the head of the queue).  \n    \nBase the implementation on the given *LinkedList* base data structure.  Return \\`null\\` for **peek** and **dequeue** if the queue is empty.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const queue=new Queue();`,\n      evaluate: `Boolean(queue);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'peek on an empty queue returns null',\n      inherit: [1],\n      code: ``,\n      evaluate: `queue.peek();`,\n      expected: null,\n    },\n    {\n      id: 3,\n      name: 'dequeue on an empty queue returns null',\n      inherit: [1],\n      code: ``,\n      evaluate: `queue.dequeue();`,\n      expected: null,\n    },\n    {\n      id: 4,\n      name: 'peek returns enqueued item',\n      inherit: [1],\n      code: `queue.enqueue(5);`,\n      evaluate: `queue.peek();`,\n      expected: 5,\n    },\n    {\n      id: 5,\n      name: 'peek, queue, dequeue work together properly',\n      inherit: [1],\n      code: `queue.enqueue(5);queue.enqueue(7);queue.dequeue();`,\n      evaluate: `queue.peek();`,\n      expected: 7,\n    },\n    {\n      id: 6,\n      name: 'peek returns enqueued item (3)',\n      inherit: [1],\n      code: `queue.enqueue(5);queue.enqueue(6);queue.enqueue(7);`,\n      evaluate: `queue.peek();`,\n      expected: 5,\n    },\n    {\n      id: 7,\n      name: 'dequeue multiple enqueued items',\n      inherit: [1],\n      code: `queue.enqueue(5);queue.enqueue(6);queue.enqueue(7);queue.dequeue();queue.dequeue();`,\n      evaluate: `queue.peek();`,\n      expected: 7,\n    },\n    {\n      id: 8,\n      name: 'isEmpty returns true for empty queue',\n      inherit: [1],\n      code: ``,\n      evaluate: `queue.isEmpty();`,\n      expected: true,\n    },\n    {\n      id: 9,\n      name: 'isEmpty returns false for queue with an item',\n      inherit: [1],\n      code: `queue.enqueue(5);`,\n      evaluate: `queue.isEmpty();`,\n      expected: false,\n    },\n    {\n      id: 10,\n      name: 'dequeue returns value, not node',\n      inherit: [1],\n      code: `queue.enqueue(5);`,\n      evaluate: `queue.dequeue();`,\n      expected: 5,\n    },\n  ],\n  setupCode: `\n  \n  class LinkedListNode {\n    constructor(value, next = null) {\n      this.value = value;\n      this.next = next;\n    }\n  }\n  \n  class LinkedList {\n    constructor() {\n      this.head = null;\n      this.tail = null;\n    }\n    \n    append(value) {\n      const newNode = new LinkedListNode(value);\n      if (!this.head) {\n        this.head = newNode;\n        this.tail = newNode;\n        return this;\n      }\n      this.tail.next = newNode;\n      this.tail = newNode;\n      return this;\n    }\n    \n    deleteHead() {\n      if (!this.head) {\n        return null;\n      }\n      const deletedHead = this.head;\n      if (this.head.next) {\n        this.head = this.head.next;\n      } else {\n        this.head = null;\n        this.tail = null;\n      }\n      return deletedHead;\n    }\n  }\n  `,\n  category: QUEUE,\n  type: DATA_STRUCTURE,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 240],\n    solutionLines: solution,\n  },\n};\n","import { QUEUE, DATA_STRUCTURE, BEGINNER } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class Queue {' },\n  { stage: 1, text: '  constructor() {' },\n  { stage: 2, text: '    this.items = [];' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 3, text: '  isEmpty() {' },\n  { stage: 5, text: '    return !this.items.length;' },\n  { stage: 3, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 3, text: '  peek() {' },\n  { stage: 5, text: '    if (this.isEmpty()) {' },\n  { stage: 5, text: '      return null;' },\n  { stage: 5, text: '    }' },\n  { stage: 6, text: '    return this.items[0];' },\n  { stage: 3, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 4, text: '  enqueue(value) {' },\n  { stage: 6, text: '    this.items.push(value);' },\n  { stage: 4, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 4, text: '  dequeue() {' },\n  { stage: 7, text: '    if (this.isEmpty()) {' },\n  { stage: 7, text: '      return null;' },\n  { stage: 7, text: '    }' },\n  { stage: 7, text: '    return this.items.shift();' },\n  { stage: 4, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 22,\n  problemName: 'Implement a *Queue* from scratch using an *Array*',\n  problemText: `\nGiven a *Queue* class, implement the following methods: \n    \n - **isEmpty** which returns a Boolean value indicating if there are any items in the queue.\n - **peek** which returns - but does not remove - the \\`value\\` at the head of the queue.\n - **enqueue** which adds a \\`value\\` to the end of the queue - does not return anything.\n - **dequeue** which removes and returns the \\`value\\` at the head of the queue.  \n    \nBase the implementation on an *Array* base data structure.  Return \\`null\\` for **peek** and **dequeue** if the queue is empty.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const queue=new Queue();`,\n      evaluate: `Boolean(queue);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'peek on an empty queue returns null',\n      inherit: [1],\n      code: ``,\n      evaluate: `queue.peek();`,\n      expected: null,\n    },\n    {\n      id: 3,\n      name: 'dequeue on an empty queue returns null',\n      inherit: [1],\n      code: ``,\n      evaluate: `queue.dequeue();`,\n      expected: null,\n    },\n    {\n      id: 4,\n      name: 'peek returns enqueued item',\n      inherit: [1],\n      code: `queue.enqueue(5);`,\n      evaluate: `queue.peek();`,\n      expected: 5,\n    },\n    {\n      id: 5,\n      name: 'peek, queue, dequeue work together properly',\n      inherit: [1],\n      code: `queue.enqueue(5);queue.enqueue(7);queue.dequeue();`,\n      evaluate: `queue.peek();`,\n      expected: 7,\n    },\n    {\n      id: 6,\n      name: 'peek returns enqueued item (3)',\n      inherit: [1],\n      code: `queue.enqueue(5);queue.enqueue(6);queue.enqueue(7);`,\n      evaluate: `queue.peek();`,\n      expected: 5,\n    },\n    {\n      id: 7,\n      name: 'dequeue multiple enqueued items',\n      inherit: [1],\n      code: `queue.enqueue(5);queue.enqueue(6);queue.enqueue(7);queue.dequeue();queue.dequeue();`,\n      evaluate: `queue.peek();`,\n      expected: 7,\n    },\n    {\n      id: 8,\n      name: 'isEmpty returns true for empty queue',\n      inherit: [1],\n      code: ``,\n      evaluate: `queue.isEmpty();`,\n      expected: true,\n    },\n    {\n      id: 9,\n      name: 'isEmpty returns false for queue with an item',\n      inherit: [1],\n      code: `queue.enqueue(5);`,\n      evaluate: `queue.isEmpty();`,\n      expected: false,\n    },\n  ],\n  setupCode: '',\n  category: QUEUE,\n  type: DATA_STRUCTURE,\n  difficulty: BEGINNER,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 240],\n    solutionLines: solution,\n  },\n};\n","import { STACK, DATA_STRUCTURE, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: -1, text: '//  class LinkedList {' },\n  { stage: -1, text: '//    prepend(value: any) LinkedList' },\n  { stage: -1, text: '//    deleteHead() LinkedListNode' },\n  { stage: -1, text: '//  }' },\n  { stage: -1, text: '//  class LinkedListNode {' },\n  { stage: -1, text: '//    constructor(value, next = null) {' },\n  { stage: -1, text: '//      this.value = value;' },\n  { stage: -1, text: '//      this.next = next;' },\n  { stage: -1, text: '//    }' },\n  { stage: -1, text: '//  }' },\n  { stage: -1, text: '//' },\n  { stage: -1, text: '// All code above is implicitly included in your environment' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class Stack {' },\n  { stage: 2, text: '  constructor() {' },\n  { stage: 2, text: '    this.linkedList = new LinkedList();' },\n  { stage: 2, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 3, text: '  isEmpty() {' },\n  { stage: 5, text: '    return !this.linkedList.head;' },\n  { stage: 3, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 3, text: '  peek() {' },\n  { stage: 5, text: '    if (this.isEmpty()) {' },\n  { stage: 5, text: '      return null;' },\n  { stage: 5, text: '    }' },\n  { stage: 6, text: '    return this.linkedList.head.value;' },\n  { stage: 3, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 4, text: '  push(value) {' },\n  { stage: 6, text: '    this.linkedList.prepend(value);' },\n  { stage: 4, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 4, text: '  pop() {' },\n  { stage: 7, text: '    const removedHead = this.linkedList.deleteHead();' },\n  { stage: 7, text: '    return removedHead ? removedHead.value : null;' },\n  { stage: 4, text: '  }' },\n  { stage: 1, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 23,\n  problemName: 'Implement a *Stack* using a *Linked List*',\n  problemText: `Given a *Stack* class, implement the following methods: \n\n   - **isEmpty**: returns a boolean value indicating if there are any values in the stack.\n   - **peek**: returns - but does not remove - the value at the top of the stack.\n   - **push**: adds a value to the top of the stack - does not return anything.\n   - **pop**: removes and returns the value at the top of the stack.\n   \nBase the implementation on the given *LinkedList* base data structure.  Return \\`null\\` for **peek** and **pop** if the stack is empty.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const stack=new Stack();`,\n      evaluate: `Boolean(stack);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'peek on empty stack is null',\n      inherit: [1],\n      code: ``,\n      evaluate: `stack.peek();`,\n      expected: null,\n    },\n    {\n      id: 3,\n      name: 'pop on empty stack is null',\n      inherit: [1],\n      code: ``,\n      evaluate: `stack.pop();`,\n      expected: null,\n    },\n    {\n      id: 4,\n      name: 'isEmpty on empty stack is true',\n      inherit: [1],\n      code: ``,\n      evaluate: `stack.isEmpty();`,\n      expected: true,\n    },\n    {\n      id: 5,\n      name: 'isEmpty on stack with an item is false',\n      inherit: [1],\n      code: `stack.push(5);`,\n      evaluate: `stack.isEmpty();`,\n      expected: false,\n    },\n    {\n      id: 6,\n      name: 'peek on stack with an item returns that value',\n      inherit: [1, 5],\n      code: ``,\n      evaluate: `stack.peek();`,\n      expected: 5,\n    },\n    {\n      id: 7,\n      name: 'peek on stack with two items returns correct value',\n      inherit: [1, 5],\n      code: `stack.push(9);`,\n      evaluate: `stack.peek();`,\n      expected: 9,\n    },\n    {\n      id: 8,\n      name: 'peek does not remove items',\n      inherit: [1, 5, 7],\n      code: ``,\n      evaluate: `stack.peek();stack.peek();`,\n      expected: 9,\n    },\n    {\n      id: 9,\n      name: 'pop removes and returns correct item in stack (1)',\n      inherit: [1, 5, 7],\n      code: ``,\n      evaluate: `stack.pop();`,\n      expected: 9,\n    },\n    {\n      id: 10,\n      name: 'pop removes and returns correct item in stack (2)',\n      inherit: [1, 5, 7],\n      code: ``,\n      evaluate: `stack.pop();stack.pop();`,\n      expected: 5,\n    },\n  ],\n  setupCode: `\n  class LinkedListNode {\n    constructor(value, next = null) {\n      this.value = value;\n      this.next = next;\n    }\n  }\n  \n  class LinkedList {\n    constructor() {\n      this.head = null;\n      this.tail = null;\n    }\n    \n    prepend(value) {\n      const newNode = new LinkedListNode(value, this.head);\n      this.head = newNode;\n      if (!this.tail) {\n        this.tail = newNode;\n      }\n      return this;\n    }\n    \n    deleteHead() {\n      if (!this.head) {\n        return null;\n      }\n      const deletedHead = this.head;\n      if (this.head.next) {\n        this.head = this.head.next;\n      } else {\n        this.head = null;\n        this.tail = null;\n      }\n      return deletedHead;\n    }\n  }\n  `,\n  category: STACK,\n  type: DATA_STRUCTURE,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 240],\n    solutionLines: solution,\n  },\n};\n","import { STACK, DATA_STRUCTURE, BEGINNER } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class Stack {' },\n  { stage: 1, text: '  constructor() {' },\n  { stage: 1, text: '    this.items = [];' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 2, text: '  isEmpty() {' },\n  { stage: 4, text: '    return !this.items.length;' },\n  { stage: 2, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 2, text: '  peek() {' },\n  { stage: 4, text: '    if (this.isEmpty()) {' },\n  { stage: 4, text: '      return null;' },\n  { stage: 4, text: '    }' },\n  { stage: 5, text: '    return this.items[this.items.length - 1];' },\n  { stage: 2, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 3, text: '  push(value) {' },\n  { stage: 5, text: '    this.items.push(value);' },\n  { stage: 3, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 3, text: '  pop() {' },\n  { stage: 6, text: '    if (this.isEmpty()) {' },\n  { stage: 6, text: '      return null;' },\n  { stage: 6, text: '    }' },\n  { stage: 6, text: '    return this.items.pop();' },\n  { stage: 3, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 24,\n  problemName: 'Implement a *Stack* using an *Array*',\n  problemText:\n    'Given a *Stack* class, implement the following methods: **isEmpty** (which returns a boolean indicating if there are any values in the stack), **peek** (which returns - but does not remove - the value at the top of the stack), **push** (which adds a value to the top of the stack - does not return anything), and **pop** (which removes and returns the value at the top of the stack).  Base the implementation on an *Array* data structure.  Return `null` for **peek** and **pop** if the stack is empty.',\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const stack=new Stack();`,\n      evaluate: `Boolean(stack);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'peek on empty stack is null',\n      inherit: [1],\n      code: ``,\n      evaluate: `stack.peek();`,\n      expected: null,\n    },\n    {\n      id: 3,\n      name: 'pop on empty stack is null',\n      inherit: [1],\n      code: ``,\n      evaluate: `stack.pop();`,\n      expected: null,\n    },\n    {\n      id: 4,\n      name: 'isEmpty on empty stack is true',\n      inherit: [1],\n      code: ``,\n      evaluate: `stack.isEmpty();`,\n      expected: true,\n    },\n    {\n      id: 5,\n      name: 'isEmpty on stack with an item is false',\n      inherit: [1],\n      code: `stack.push(5);`,\n      evaluate: `stack.isEmpty();`,\n      expected: false,\n    },\n    {\n      id: 6,\n      name: 'peek on stack with an item returns that value',\n      inherit: [1, 5],\n      code: ``,\n      evaluate: `stack.peek();`,\n      expected: 5,\n    },\n    {\n      id: 7,\n      name: 'peek on stack with two items returns correct value',\n      inherit: [1, 5],\n      code: `stack.push(9);`,\n      evaluate: `stack.peek();`,\n      expected: 9,\n    },\n    {\n      id: 8,\n      name: 'peek does not remove items',\n      inherit: [1, 5, 7],\n      code: ``,\n      evaluate: `stack.peek();stack.peek();`,\n      expected: 9,\n    },\n    {\n      id: 9,\n      name: 'pop removes and returns correct item in stack (1)',\n      inherit: [1, 5, 7],\n      code: ``,\n      evaluate: `stack.pop();`,\n      expected: 9,\n    },\n    {\n      id: 10,\n      name: 'pop removes and returns correct item in stack (2)',\n      inherit: [1, 5, 7],\n      code: ``,\n      evaluate: `stack.pop();stack.pop();`,\n      expected: 5,\n    },\n  ],\n  setupCode: '',\n  category: STACK,\n  type: DATA_STRUCTURE,\n  difficulty: BEGINNER,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 210],\n    solutionLines: solution,\n  },\n};\n","import { HASH_TABLE, DATA_STRUCTURE, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: -1, text: '// class LinkedList {' },\n  { stage: -1, text: '//   append(key: string, value: any) LinkedList' },\n  { stage: -1, text: '//   findKey(key: string) LinkedListNode' },\n  { stage: -1, text: '// }' },\n  { stage: -1, text: '//' },\n  { stage: -1, text: '//  class LinkedListNode {' },\n  { stage: -1, text: '//    constructor(value, next = null) {' },\n  { stage: -1, text: '//      this.value = value;' },\n  { stage: -1, text: '//      this.next = next;' },\n  { stage: -1, text: '//    }' },\n  { stage: -1, text: '//  }' },\n  { stage: -1, text: '//' },\n  { stage: -1, text: '// All code above is implicitly included in your environment' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class HashTable {' },\n  { stage: 0, text: '  constructor(hashTableSize = 32) {' },\n  { stage: 0, text: '    this.buckets = Array(hashTableSize)' },\n  { stage: 0, text: '      .fill(null)' },\n  { stage: 0, text: '      .map(() => new LinkedList());' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: -1, text: '  // IMPLEMENTED:  hash(key: string) int' },\n  { stage: -1, text: '' },\n  { stage: 1, text: '  set(key, value) {' },\n  { stage: 2, text: '    const keyHash = this.hash(key);' },\n  { stage: 2, text: '    const bucketLinkedList = this.buckets[keyHash];' },\n  { stage: 3, text: '    const node = bucketLinkedList.findKey(key);' },\n  { stage: 3, text: '' },\n  { stage: 4, text: '    if (!node) {' },\n  { stage: 5, text: '      bucketLinkedList.append(key, value);' },\n  { stage: 4, text: '    } else {' },\n  { stage: 5, text: '      node.value = value;' },\n  { stage: 4, text: '    }' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 25,\n  problemName: 'Implement **set** in a *HashTable* class.',\n  problemText:\n    'Given a *HashTable* class and a *LinkedList* class, implement a **set(key, value)** method in the *HashTable* class that will add or modify a `value` in the hash table for a given `key`.',\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const ht=new HashTable();`,\n      evaluate: `Boolean(ht);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'adds a new value',\n      inherit: [1],\n      code: `ht.set('key1', 5);`,\n      evaluate: `ht.get('key1');`,\n      expected: 5,\n    },\n    {\n      id: 3,\n      name: 'updates an existing value',\n      inherit: [1, 2],\n      code: `ht.set('key1', 7);`,\n      evaluate: `ht.get('key1');`,\n      expected: 7,\n    },\n  ],\n  setupCode: `\n  class LinkedListNode {\n    constructor(key, value, next = null) {\n      this.key = key;\n      this.value = value;\n      this.next = next;\n    }\n  }\n  class LinkedList {\n    constructor() {\n      this.head = null;\n      this.tail = null;\n    }\n    append(key, value) {\n      const newNode = new LinkedListNode(key, value);\n      if (!this.head) {\n        this.head = newNode;\n        this.tail = newNode;\n        return this;\n      }\n      this.tail.next = newNode;\n      this.tail = newNode;\n      return this;\n    }\n    findKey(key) {\n      if (!this.head) {\n        return null;\n      }\n      let current = this.head;\n      while (current) {\n        if (current.key === key) {\n          return current;\n        }\n        current = current.next;\n      }\n      return null;\n    }\n  }\n  HashTable.prototype.hash = function(key) {\n    const hash = Array.from(key).reduce(\n      (hashAccumulator, keySymbol) => hashAccumulator + keySymbol.charCodeAt(0), 0);\n      return hash % this.buckets.length;\n  };\n  HashTable.prototype.get = function(key) {\n    const bucketLinkedList = this.buckets[this.hash(key)];\n    const node = bucketLinkedList.findKey(key);\n    return node ? node.value : undefined;\n  };\n  `,\n  category: HASH_TABLE,\n  type: DATA_STRUCTURE,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 180],\n    solutionLines: solution,\n  },\n};\n","import { HASH_TABLE, DATA_STRUCTURE, BEGINNER } from '../constants.js';\n\nconst solution = [\n  { stage: -1, text: '// class LinkedList {' },\n  { stage: -1, text: '//   findKey(key: string) LinkedListNode' },\n  { stage: -1, text: '// }' },\n  { stage: -1, text: '//' },\n  { stage: -1, text: '// class LinkedListNode {' },\n  { stage: -1, text: '//   constructor(value, next = null) {' },\n  { stage: -1, text: '//     this.value = value;' },\n  { stage: -1, text: '//     this.next = next;' },\n  { stage: -1, text: '//   }' },\n  { stage: -1, text: '// }' },\n  { stage: -1, text: '//' },\n  { stage: -1, text: '// All code above is implicitly included in your environment' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class HashTable {' },\n  { stage: 0, text: '  constructor(hashTableSize = 32) {' },\n  { stage: 0, text: '    this.buckets = Array(hashTableSize)' },\n  { stage: 0, text: '      .fill(null)' },\n  { stage: 0, text: '      .map(() => new LinkedList());' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: -1, text: '  // IMPLEMENTED:  hash(key: string) int' },\n  { stage: -1, text: '' },\n  { stage: 1, text: '  get(key) {' },\n  { stage: 2, text: '    const bucketLinkedList = this.buckets[this.hash(key)];' },\n  { stage: 3, text: '    const node = bucketLinkedList.findKey(key);' },\n  { stage: 3, text: '    return node ? node.value : undefined;' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 26,\n  problemName: 'Implement **get** in a *HashTable* class.',\n  problemText:\n    'Given a *HashTable* class and an associated *LinkedList* class, implement a **get** method in the *HashTable* class that will retrieve a `value` from the hash table for a given `key`, or `undefined` if the `key` does not exist.',\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const ht=new HashTable();`,\n      evaluate: `Boolean(ht);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'get a key that doesnt exist',\n      inherit: [1],\n      code: ``,\n      evaluate: `ht.get('key1');`,\n      expected: undefined,\n    },\n    {\n      id: 3,\n      name: 'get a key',\n      inherit: [1],\n      code: `ht.set('key1', 99);`,\n      evaluate: `ht.get('key1');`,\n      expected: 99,\n    },\n  ],\n  setupCode: `\n  class LinkedListNode {\n    constructor(key, value, next = null) {\n      this.key = key;\n      this.value = value;\n      this.next = next;\n    }\n  }\n  class LinkedList {\n    constructor() {\n      this.head = null;\n      this.tail = null;\n    }\n    append(key, value) {\n      const newNode = new LinkedListNode(key, value);\n      if (!this.head) {\n        this.head = newNode;\n        this.tail = newNode;\n        return this;\n      }\n      this.tail.next = newNode;\n      this.tail = newNode;\n      return this;\n    }\n    findKey(key) {\n      if (!this.head) {\n        return null;\n      }\n      let current = this.head;\n      while (current) {\n        if (current.key === key) {\n          return current;\n        }\n        current = current.next;\n      }\n      return null;\n    }\n  }\n  HashTable.prototype.hash = function(key) {\n    const hash = Array.from(key).reduce(\n      (hashAccumulator, keySymbol) => hashAccumulator + keySymbol.charCodeAt(0), 0);\n      return hash % this.buckets.length;\n  };\n  HashTable.prototype.set = function(key, value) {\n    const keyHash = this.hash(key);\n    const bucketLinkedList = this.buckets[keyHash];\n    const node = bucketLinkedList.findKey(key);\n    if (!node) {\n      bucketLinkedList.append(key, value);\n    } else {\n      node.value = value;\n    }\n  };\n  `,\n  category: HASH_TABLE,\n  type: DATA_STRUCTURE,\n  difficulty: BEGINNER,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 120],\n    solutionLines: solution,\n  },\n};\n","import { HASH_TABLE, DATA_STRUCTURE, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: -1, text: '// class LinkedList {' },\n  { stage: -1, text: '//   deleteKey(key: string) LinkedListNode' },\n  { stage: -1, text: '// }' },\n  { stage: -1, text: '//  class LinkedListNode {' },\n  { stage: -1, text: '//    constructor(value, next = null) {' },\n  { stage: -1, text: '//      this.value = value;' },\n  { stage: -1, text: '//      this.next = next;' },\n  { stage: -1, text: '//    }' },\n  { stage: -1, text: '//  }' },\n  { stage: -1, text: '//' },\n  { stage: -1, text: '// All code above is implicitly included in your environment' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class HashTable {' },\n  { stage: 0, text: '  constructor(hashTableSize = 32) {' },\n  { stage: 0, text: '    this.buckets = Array(hashTableSize)' },\n  { stage: 0, text: '      .fill(null)' },\n  { stage: 0, text: '      .map(() => new LinkedList());' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: -1, text: '  // IMPLEMENTED:  hash(key: string) int' },\n  { stage: -1, text: '' },\n  { stage: 1, text: '  delete(key) {' },\n  { stage: 2, text: '    const keyHash = this.hash(key);' },\n  { stage: 2, text: '    const bucketLinkedList = this.buckets[keyHash];' },\n  { stage: 3, text: '    const deletedNode = bucketLinkedList.deleteKey(key);' },\n  { stage: 4, text: '    if (deletedNode) {' },\n  { stage: 4, text: '      return deletedNode.value;' },\n  { stage: 4, text: '    }' },\n  { stage: 3, text: '    return null;' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 27,\n  problemName: 'Implement **delete** in a *HashTable* class.',\n  problemText: `Given a *HashTable* class and an associated *LinkedList* class, implement a **delete** method in the *HashTable* class that will delete the entry for a given \\`key\\`.\n  \n  The method must return the value of the deleted item, or \\`null\\` if an item matching the \\`key\\` was not found.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const ht=new HashTable();`,\n      evaluate: `Boolean(ht);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'deleting a key that does not exist returns null',\n      inherit: [1],\n      code: ``,\n      evaluate: `ht.delete('key1');`,\n      expected: null,\n    },\n    {\n      id: 3,\n      name: 'deleting a key that does exist',\n      inherit: [1],\n      code: `ht.set('key1', 77);`,\n      evaluate: `ht.delete('key1');`,\n      expected: 77,\n    },\n  ],\n  setupCode: `\n  class LinkedListNode {\n    constructor(key, value, next = null) {\n      this.key = key;\n      this.value = value;\n      this.next = next;\n    }\n  }\n  class LinkedList {\n    constructor() {\n      this.head = null;\n      this.tail = null;\n    }\n    append(key, value) {\n      const newNode = new LinkedListNode(key, value);\n      if (!this.head) {\n        this.head = newNode;\n        this.tail = newNode;\n        return this;\n      }\n      this.tail.next = newNode;\n      this.tail = newNode;\n      return this;\n    }\n    findKey(key) {\n      if (!this.head) {\n        return null;\n      }\n      let current = this.head;\n      while (current) {\n        if (current.key === key) {\n          return current;\n        }\n        current = current.next;\n      }\n      return null;\n    }\n    deleteKey(key) {\n      if (!this.head) {\n        return null;\n      }\n      if (key === this.head.key) {\n        const deletedHead = this.head;\n        if (this.head.next) {\n          this.head = this.head.next;\n        } else {\n          this.head = null;\n          this.tail = null;\n        }\n        return deletedHead;\n      } else if (key === this.tail.key) {\n        const deletedTail = this.tail;\n        let currentNode = this.head;\n        while (currentNode.next) {\n          if (!currentNode.next.next) {\n            currentNode.next = null;\n          } else {\n            currentNode = currentNode.next;\n          }\n        }\n        this.tail = currentNode;\n        return deletedTail;\n      } else {\n        let currentNode = this.head;\n        while (currentNode.next) {\n          if (currentNode.next.key === key) {\n            const deletedNode = currentNode.next;\n            currentNode.next = deletedNode.next;\n            return deletedNode;\n          }\n          currentNode = currentNode.next;\n        }\n        return null;\n      }\n    }\n  }\n  HashTable.prototype.hash = function(key) {\n    const hash = Array.from(key).reduce(\n      (hashAccumulator, keySymbol) => hashAccumulator + keySymbol.charCodeAt(0), 0);\n      return hash % this.buckets.length;\n  };\n  HashTable.prototype.set = function(key, value) {\n    const keyHash = this.hash(key);\n    const bucketLinkedList = this.buckets[keyHash];\n    const node = bucketLinkedList.findKey(key);\n    if (!node) {\n      bucketLinkedList.append(key, value);\n    } else {\n      node.value = value;\n    }\n  };\n  HashTable.prototype.get = function(key) {\n    const bucketLinkedList = this.buckets[this.hash(key)];\n    const node = bucketLinkedList.findKey(key);\n    return node ? node.value : undefined;\n  };\n  `,\n  category: HASH_TABLE,\n  type: DATA_STRUCTURE,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 150],\n    solutionLines: solution,\n  },\n};\n","import { HEAP, DATA_STRUCTURE, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class MinHeap {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.heapContainer = [];' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  getLeftChildIndex(parentIndex) {' },\n  { stage: 2, text: '    return 2 * parentIndex + 1;' },\n  { stage: 1, text: '  }' },\n  { stage: 2, text: '' },\n  { stage: 1, text: '  getRightChildIndex(parentIndex) {' },\n  { stage: 3, text: '    return 2 * parentIndex + 2;' },\n  { stage: 1, text: '  }' },\n  { stage: 3, text: '' },\n  { stage: 1, text: '  hasLeftChild(parentIndex) {' },\n  { stage: 4, text: '    return this.getLeftChildIndex(parentIndex) < this.heapContainer.length;' },\n  { stage: 1, text: '  }' },\n  { stage: 4, text: '' },\n  { stage: 1, text: '  hasRightChild(parentIndex) {' },\n  {\n    stage: 5,\n    text: '    return this.getRightChildIndex(parentIndex) < this.heapContainer.length;',\n  },\n  { stage: 1, text: '  }' },\n  { stage: 5, text: '' },\n  { stage: 1, text: '  leftChild(parentIndex) {' },\n  { stage: 6, text: '    return this.heapContainer[this.getLeftChildIndex(parentIndex)];' },\n  { stage: 1, text: '  }' },\n  { stage: 6, text: '' },\n  { stage: 1, text: '  rightChild(parentIndex) {' },\n  { stage: 7, text: '    return this.heapContainer[this.getRightChildIndex(parentIndex)];' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 28,\n  problemName: `Implement child index functions for a *MinHeap* class.`,\n  problemText: `Implement the following methods for the *MinHeap* data structure:  \n   - **getLeftChildIndex** (parentIndex: integer) => integer  \n   - **getRightChildIndex** (parentIndex: integer) => integer  \n   - **hasLeftChild** (parentIndex: integer) => boolean  \n   - **hasRightChild** (parentIndex: integer) => boolean  \n   - **leftChild** (parentIndex: integer) => heap value  \n   - **rightChild** (parentIndex: integer) => heap value\n`,\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const minheap=new MinHeap();`,\n      evaluate: `Boolean(minheap);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'getLeftChildIndex - test 0',\n      inherit: [1],\n      code: ``,\n      evaluate: `minheap.getLeftChildIndex(0);`,\n      expected: 1,\n    },\n    {\n      id: 2,\n      name: 'getLeftChildIndex - test 1',\n      inherit: [1],\n      code: ``,\n      evaluate: `minheap.getLeftChildIndex(5);`,\n      expected: 11,\n    },\n    {\n      id: 3,\n      name: 'getRightChildIndex - test 0',\n      inherit: [1],\n      code: ``,\n      evaluate: `minheap.getRightChildIndex(0);`,\n      expected: 2,\n    },\n    {\n      id: 4,\n      name: 'getRightChildIndex - test 1',\n      inherit: [1],\n      code: ``,\n      evaluate: `minheap.getRightChildIndex(12);`,\n      expected: 26,\n    },\n    {\n      id: 5,\n      name: 'hasLeftChild - true',\n      inherit: [1],\n      code: `minheap.heapContainer.length = 10;`,\n      evaluate: `minheap.hasLeftChild(4);`,\n      expected: true,\n    },\n    {\n      id: 6,\n      name: 'hasLeftChild - false',\n      inherit: [1],\n      code: `minheap.heapContainer.length = 9;`,\n      evaluate: `minheap.hasLeftChild(4);`,\n      expected: false,\n    },\n    {\n      id: 7,\n      name: 'hasRightChild - true',\n      inherit: [1],\n      code: `minheap.heapContainer.length = 11;`,\n      evaluate: `minheap.hasRightChild(4);`,\n      expected: true,\n    },\n    {\n      id: 8,\n      name: 'hasRightChild - false',\n      inherit: [1],\n      code: `minheap.heapContainer.length = 10;`,\n      evaluate: `minheap.hasRightChild(4);`,\n      expected: false,\n    },\n    {\n      id: 9,\n      name: 'leftChild',\n      inherit: [1],\n      code: `minheap.heapContainer = [1,4,5,8,10,12,16];`,\n      evaluate: `minheap.leftChild(0);`,\n      expected: 4,\n    },\n    {\n      id: 10,\n      name: 'leftChild',\n      inherit: [1, 9],\n      code: ``,\n      evaluate: `minheap.leftChild(2);`,\n      expected: 12,\n    },\n    {\n      id: 11,\n      name: 'rightChild',\n      inherit: [1, 9],\n      code: ``,\n      evaluate: `minheap.rightChild(0);`,\n      expected: 5,\n    },\n    {\n      id: 12,\n      name: 'rightChild',\n      inherit: [1, 9],\n      code: ``,\n      evaluate: `minheap.rightChild(2);`,\n      expected: 16,\n    },\n  ],\n  setupCode: ``,\n  category: HEAP,\n  type: DATA_STRUCTURE,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 240],\n    solutionLines: solution,\n  },\n};\n","import { HEAP, DATA_STRUCTURE, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class MinHeap {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.heapContainer = [];' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  getParentIndex(childIndex) {' },\n  { stage: 2, text: '    return Math.floor((childIndex - 1) / 2);' },\n  { stage: 1, text: '  }' },\n  { stage: 2, text: '' },\n  { stage: 1, text: '  hasParent(childIndex) {' },\n  { stage: 3, text: '    return this.getParentIndex(childIndex) >= 0;' },\n  { stage: 1, text: '  }' },\n  { stage: 3, text: '' },\n  { stage: 1, text: '  parent(childIndex) {' },\n  { stage: 4, text: '    return this.heapContainer[this.getParentIndex(childIndex)];' },\n  { stage: 1, text: '  }' },\n  { stage: 4, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 29,\n  problemName: `Implement parent index functions for a *MinHeap* class.`,\n  problemText: `Implement the following methods for the *MinHeap* data structure:  \n   - **getParentIndex** (childIndex: integer) => integer  \n   - **hasParent** (childIndex: integer) => boolean  \n   - **parent** (childIndex: integer) => heap value  \n`,\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const minheap=new MinHeap();`,\n      evaluate: `Boolean(minheap);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'getParentIndex - 1',\n      inherit: [1],\n      code: ``,\n      evaluate: `minheap.getParentIndex(1);`,\n      expected: 0,\n    },\n    {\n      id: 3,\n      name: 'getParentIndex - 2',\n      inherit: [1],\n      code: ``,\n      evaluate: `minheap.getParentIndex(2);`,\n      expected: 0,\n    },\n    {\n      id: 4,\n      name: 'getParentIndex - 3',\n      inherit: [1],\n      code: ``,\n      evaluate: `minheap.getParentIndex(5);`,\n      expected: 2,\n    },\n    {\n      id: 5,\n      name: 'getParentIndex - 4',\n      inherit: [1],\n      code: ``,\n      evaluate: `minheap.getParentIndex(6);`,\n      expected: 2,\n    },\n    {\n      id: 6,\n      name: 'getParentIndex - 5',\n      inherit: [1],\n      code: ``,\n      evaluate: `minheap.getParentIndex(7);`,\n      expected: 3,\n    },\n    {\n      id: 7,\n      name: 'hasParent - 1',\n      inherit: [1],\n      code: ``,\n      evaluate: `minheap.hasParent(0);`,\n      expected: false,\n    },\n    {\n      id: 8,\n      name: 'hasParent - 2',\n      inherit: [1],\n      code: ``,\n      evaluate: `minheap.hasParent(1);`,\n      expected: true,\n    },\n    {\n      id: 9,\n      name: 'parent - 1',\n      inherit: [1],\n      code: `minheap.heapContainer = [1,4,5,8,10,12,16];`,\n      evaluate: `minheap.parent(1);`,\n      expected: 1,\n    },\n    {\n      id: 10,\n      name: 'parent - 2',\n      inherit: [1, 9],\n      code: ``,\n      evaluate: `minheap.parent(2);`,\n      expected: 1,\n    },\n    {\n      id: 11,\n      name: 'parent - 3',\n      inherit: [1, 9],\n      code: ``,\n      evaluate: `minheap.parent(3);`,\n      expected: 4,\n    },\n    {\n      id: 12,\n      name: 'parent - 4',\n      inherit: [1, 9],\n      code: ``,\n      evaluate: `minheap.parent(4);`,\n      expected: 4,\n    },\n    {\n      id: 13,\n      name: 'parent - 5',\n      inherit: [1, 9],\n      code: ``,\n      evaluate: `minheap.parent(5);`,\n      expected: 5,\n    },\n    {\n      id: 14,\n      name: 'parent - 6',\n      inherit: [1, 9],\n      code: ``,\n      evaluate: `minheap.parent(6);`,\n      expected: 5,\n    },\n  ],\n  setupCode: ``,\n  category: HEAP,\n  type: DATA_STRUCTURE,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 150],\n    solutionLines: solution,\n  },\n};\n","import { HEAP, DATA_STRUCTURE, BEGINNER } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class MinHeap {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.heapContainer = [];' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  peek() {' },\n  { stage: 2, text: '    if (this.heapContainer.length === 0) {' },\n  { stage: 2, text: '      return null;' },\n  { stage: 2, text: '    }' },\n  { stage: 3, text: '    return this.heapContainer[0];' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 30,\n  problemName: `Implement the **peek** method for a *MinHeap* class.`,\n  problemText: `Implement a **peek** method that will return the value of the first (next-up) item in a *MinHeap*.  Return \\`null\\` instead if there are no items in the heap.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const minheap=new MinHeap();`,\n      evaluate: `Boolean(minheap);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'null if no values in heap',\n      inherit: [1],\n      code: `minheap.heapContainer = [];`,\n      evaluate: `minheap.peek();`,\n      expected: null,\n    },\n    {\n      id: 3,\n      name: 'first value - 1',\n      inherit: [1],\n      code: `minheap.heapContainer = [5];`,\n      evaluate: `minheap.peek();`,\n      expected: 5,\n    },\n    {\n      id: 4,\n      name: 'first value - 2',\n      inherit: [1],\n      code: `minheap.heapContainer = [3,7];`,\n      evaluate: `minheap.peek();`,\n      expected: 3,\n    },\n  ],\n  setupCode: ``,\n  category: HEAP,\n  type: DATA_STRUCTURE,\n  difficulty: BEGINNER,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 120],\n    solutionLines: solution,\n  },\n};\n","import { HEAP, DATA_STRUCTURE, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class MinHeap {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.heapContainer = [];' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  find(item) {' },\n  { stage: 2, text: '    const foundItemIndices = [];' },\n  {\n    stage: 3,\n    text: '    for (let itemIndex = 0; itemIndex < this.heapContainer.length; itemIndex += 1) {',\n  },\n  { stage: 4, text: '      if (item === this.heapContainer[itemIndex]) {' },\n  { stage: 4, text: '        foundItemIndices.push(itemIndex);' },\n  { stage: 4, text: '      }' },\n  { stage: 3, text: '    }' },\n  { stage: 2, text: '    return foundItemIndices;' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 31,\n  problemName: `Implement the **find** method for a *MinHeap* class.`,\n  problemText: `Implement a **find** method for a *MinHeap* that accepts a parameter \\`item\\` and returns an array of indices where matching items are found in the *MinHeap*.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const minheap=new MinHeap();`,\n      evaluate: `Boolean(minheap);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'empty heap',\n      inherit: [1],\n      code: ``,\n      evaluate: `minheap.find(5);`,\n      expected: JSON.stringify([]),\n    },\n    {\n      id: 3,\n      name: 'one item heap, no match',\n      inherit: [1],\n      code: `minheap.heapContainer = [4];`,\n      evaluate: `minheap.find(5);`,\n      expected: JSON.stringify([]),\n    },\n    {\n      id: 4,\n      name: 'one item heap, match',\n      inherit: [1],\n      code: `minheap.heapContainer = [4];`,\n      evaluate: `minheap.find(4);`,\n      expected: JSON.stringify([0]),\n    },\n    {\n      id: 5,\n      name: 'multi-item heap, no match',\n      inherit: [1],\n      code: `minheap.heapContainer = [4,6,8,10,12];`,\n      evaluate: `minheap.find(7);`,\n      expected: JSON.stringify([]),\n    },\n    {\n      id: 6,\n      name: 'multi-item heap, one match',\n      inherit: [1],\n      code: `minheap.heapContainer = [4,6,8,10,12];`,\n      evaluate: `minheap.find(8);`,\n      expected: JSON.stringify([2]),\n    },\n    {\n      id: 7,\n      name: 'multi-item heap, multiple matches',\n      inherit: [1],\n      code: `minheap.heapContainer = [4,6,8,8,8,10,12];`,\n      evaluate: `minheap.find(8);`,\n      expected: JSON.stringify([2, 3, 4]),\n    },\n  ],\n  setupCode: ``,\n  category: HEAP,\n  type: DATA_STRUCTURE,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 150],\n    solutionLines: solution,\n  },\n};\n","import { HEAP, DATA_STRUCTURE, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class MinHeap {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.heapContainer = [];' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: -1, text: '// IMPLEMENTED:  heapifyDown(startIndex: int = 0)' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  poll() {' },\n  { stage: 2, text: '    if (this.heapContainer.length === 0) {' },\n  { stage: 2, text: '      return null;' },\n  { stage: 2, text: '    }' },\n  { stage: 3, text: '' },\n  { stage: 3, text: '    if (this.heapContainer.length === 1) {' },\n  { stage: 3, text: '      return this.heapContainer.pop();' },\n  { stage: 3, text: '    }' },\n  { stage: 4, text: '' },\n  { stage: 4, text: '    const item = this.heapContainer[0];' },\n  { stage: 4, text: '' },\n  { stage: 5, text: '    this.heapContainer[0] = this.heapContainer.pop();' },\n  { stage: 5, text: '    this.heapifyDown();' },\n  { stage: 4, text: '    return item;' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 32,\n  problemName: `Implement **poll** for a *MinHeap* class.`,\n  problemText: `Implement a **poll** method for a *MinHeap* to remove and return the item at the top of the heap.  If the heap is empty, return \\`null\\`.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const minheap=new MinHeap();`,\n      evaluate: `Boolean(minheap);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'empty list',\n      inherit: [1],\n      code: ``,\n      evaluate: `minheap.poll();`,\n      expected: null,\n    },\n    {\n      id: 3,\n      name: 'list, return top item',\n      inherit: [1],\n      code: `minheap.heapContainer = [1,2,4,6,3,5,6,10,8,7];`,\n      evaluate: `minheap.poll();`,\n      expected: 1,\n    },\n    {\n      id: 4,\n      name: 'list, correct 2nd item',\n      inherit: [1, 3],\n      code: `minheap.poll();`,\n      evaluate: `minheap.poll();`,\n      expected: 2,\n    },\n    {\n      id: 5,\n      name: 'list, correct 3rd item',\n      inherit: [1, 3, 4],\n      code: `minheap.poll();`,\n      evaluate: `minheap.poll();`,\n      expected: 3,\n    },\n    {\n      id: 6,\n      name: 'list, correct 4th item',\n      inherit: [1, 3, 4, 5],\n      code: `minheap.poll();`,\n      evaluate: `minheap.poll();`,\n      expected: 4,\n    },\n    {\n      id: 7,\n      name: 'list, correct 5th item',\n      inherit: [1, 3, 4, 5, 6],\n      code: `minheap.poll();`,\n      evaluate: `minheap.poll();`,\n      expected: 5,\n    },\n  ],\n  setupCode: `\n  MinHeap.prototype.getLeftChildIndex = function(parentIndex) {\n    return 2 * parentIndex + 1;\n  };\n  MinHeap.prototype.getRightChildIndex = function(parentIndex) {\n    return 2 * parentIndex + 2;\n  };\n  MinHeap.prototype.hasLeftChild = function(parentIndex) {\n    return this.getLeftChildIndex(parentIndex) < this.heapContainer.length;\n  };\n  MinHeap.prototype.hasRightChild = function(parentIndex) {\n    return this.getRightChildIndex(parentIndex) < this.heapContainer.length;\n  };\n  MinHeap.prototype.leftChild = function(parentIndex) {\n    return this.heapContainer[this.getLeftChildIndex(parentIndex)];\n  };\n  MinHeap.prototype.rightChild = function(parentIndex) {\n    return this.heapContainer[this.getRightChildIndex(parentIndex)];\n  };\n  MinHeap.prototype.heapifyDown = function (customStartIndex = 0) {\n    let currentIndex = customStartIndex;\n    let nextIndex = null;\n    while (this.hasLeftChild(currentIndex)) {\n      if (\n        this.hasRightChild(currentIndex) &&\n        this.rightChild(currentIndex) <= this.leftChild(currentIndex)\n      ) {\n        nextIndex = this.getRightChildIndex(currentIndex);\n      } else {\n        nextIndex = this.getLeftChildIndex(currentIndex);\n      }\n      if (this.heapContainer[currentIndex] <= this.heapContainer[nextIndex]) {\n        break;\n      }\n      this.swap(currentIndex, nextIndex);\n      currentIndex = nextIndex;\n    }\n  };\n  MinHeap.prototype.swap = function (indexOne, indexTwo) {\n    const tmp = this.heapContainer[indexTwo];\n    this.heapContainer[indexTwo] = this.heapContainer[indexOne];\n    this.heapContainer[indexOne] = tmp;\n  };\n  `,\n  category: HEAP,\n  type: DATA_STRUCTURE,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 180],\n    solutionLines: solution,\n  },\n};\n","import { HEAP, DATA_STRUCTURE, BEGINNER } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class MinHeap {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.heapContainer = [];' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: -1, text: '// IMPLEMENTED:  heapifyUp()' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  add(item) {' },\n  { stage: 2, text: '    this.heapContainer.push(item);' },\n  { stage: 3, text: '    this.heapifyUp();' },\n  { stage: 2, text: '    return this;' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 33,\n  problemName: `Implement **add** for a *MinHeap* class.`,\n  problemText: `Implement an **add** method for a *MinHeap* to receive an \\`item\\` (integer) and add it to the heap.  The method should then return the heap.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const minheap=new MinHeap();`,\n      evaluate: `Boolean(minheap);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'add item to empty heap',\n      inherit: [1],\n      code: `minheap.add(5);`,\n      evaluate: `JSON.stringify(minheap.heapContainer);`,\n      expected: JSON.stringify([5]),\n    },\n    {\n      id: 3,\n      name: 'add 2nd item to heap',\n      inherit: [1, 2],\n      code: `minheap.add(6);`,\n      evaluate: `JSON.stringify(minheap.heapContainer);`,\n      expected: JSON.stringify([5, 6]),\n    },\n    {\n      id: 4,\n      name: 'add 3rd item to heap',\n      inherit: [1, 2, 3],\n      code: `minheap.add(3);`,\n      evaluate: `JSON.stringify(minheap.heapContainer);`,\n      expected: JSON.stringify([3, 6, 5]),\n    },\n    {\n      id: 5,\n      name: 'add 4th item to heap',\n      inherit: [1, 2, 3, 4],\n      code: `minheap.add(8);`,\n      evaluate: `JSON.stringify(minheap.heapContainer);`,\n      expected: JSON.stringify([3, 6, 5, 8]),\n    },\n    {\n      id: 6,\n      name: 'add 5th item to heap',\n      inherit: [1, 2, 3, 4, 5],\n      code: `minheap.add(1);`,\n      evaluate: `JSON.stringify(minheap.heapContainer);`,\n      expected: JSON.stringify([1, 3, 5, 8, 6]),\n    },\n    {\n      id: 7,\n      name: 'add 6th item to heap',\n      inherit: [1, 2, 3, 4, 5, 6],\n      code: `minheap.add(4);`,\n      evaluate: `JSON.stringify(minheap.heapContainer);`,\n      expected: JSON.stringify([1, 3, 4, 8, 6, 5]),\n    },\n    {\n      id: 8,\n      name: 'add 7th item to heap',\n      inherit: [1, 2, 3, 4, 5, 6, 7],\n      code: `minheap.add(2);`,\n      evaluate: `JSON.stringify(minheap.heapContainer);`,\n      expected: JSON.stringify([1, 3, 2, 8, 6, 5, 4]),\n    },\n    {\n      id: 9,\n      name: 'method should return itself',\n      inherit: [1, 2, 3, 4, 5, 6, 7],\n      code: ``,\n      evaluate: `minheap.add(2) === minheap`,\n      expected: true,\n    },\n  ],\n  setupCode: `\n  MinHeap.prototype.getParentIndex = function (childIndex) {\n    return Math.floor((childIndex - 1) / 2);\n  };\n  MinHeap.prototype.hasParent = function (childIndex) {\n    return this.getParentIndex(childIndex) >= 0;\n  };\n  MinHeap.prototype.parent = function (childIndex) {\n    return this.heapContainer[this.getParentIndex(childIndex)];\n  };\n  MinHeap.prototype.heapifyUp = function (customStartIndex) {\n    let currentIndex = customStartIndex || this.heapContainer.length - 1;\n    while (\n      this.hasParent(currentIndex) &&\n      this.parent(currentIndex) > this.heapContainer[currentIndex]\n    ) {\n      this.swap(currentIndex, this.getParentIndex(currentIndex));\n      currentIndex = this.getParentIndex(currentIndex);\n    }\n  };\n  MinHeap.prototype.swap = function (indexOne, indexTwo) {\n    const tmp = this.heapContainer[indexTwo];\n    this.heapContainer[indexTwo] = this.heapContainer[indexOne];\n    this.heapContainer[indexOne] = tmp;\n  };\n  `,\n  category: HEAP,\n  type: DATA_STRUCTURE,\n  difficulty: BEGINNER,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 120],\n    solutionLines: solution,\n  },\n};\n","import { HEAP, DATA_STRUCTURE, ADVANCED } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class MinHeap {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.heapContainer = [];' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: -1, text: '// IMPLEMENTED:  heapifyUp(index: int)' },\n  { stage: -1, text: '// IMPLEMENTED:  heapifyDown(index: int)' },\n  { stage: -1, text: '// IMPLEMENTED:  find(item: int) []index:int' },\n  { stage: -1, text: '// IMPLEMENTED:  parent(index: int) item:int' },\n  { stage: -1, text: '// IMPLEMENTED:  hasLeftChild(index: int) bool' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  remove(item) {' },\n  { stage: 2, text: '    const numberOfItemsToRemove = this.find(item).length;' },\n  { stage: 2, text: '' },\n  {\n    stage: 3,\n    text: '    for (let iteration = 0; iteration < numberOfItemsToRemove; iteration += 1) {',\n  },\n  { stage: 4, text: '      const indexToRemove = this.find(item).pop();' },\n  { stage: 4, text: '      if (indexToRemove === this.heapContainer.length - 1) {' },\n  { stage: 5, text: '        this.heapContainer.pop();' },\n  { stage: 4, text: '      } else {' },\n  { stage: 5, text: '        this.heapContainer[indexToRemove] = this.heapContainer.pop();' },\n  { stage: 5, text: '        const parentItem = this.parent(indexToRemove);' },\n  { stage: 6, text: '' },\n  { stage: 6, text: '        if (' },\n  { stage: 6, text: '          this.hasLeftChild(indexToRemove) &&' },\n  { stage: 6, text: '          (!parentItem || parentItem <= this.heapContainer[indexToRemove])' },\n  { stage: 6, text: '        ) {' },\n  { stage: 7, text: '          this.heapifyDown(indexToRemove);' },\n  { stage: 6, text: '        } else {' },\n  { stage: 8, text: '          this.heapifyUp(indexToRemove);' },\n  { stage: 6, text: '        }' },\n  { stage: 4, text: '      }' },\n  { stage: 3, text: '    }' },\n  { stage: 2, text: '    return this;' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 34,\n  problemName: `Implement **remove** for a *MinHeap* class.`,\n  problemText: `Implement a **remove** method for a *MinHeap* to receive an \\`item\\` (integer) and remove all instances of that item from the heap.  The method should then return the heap.\n  \n  (note: remove duplicate items from back to front)`,\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const minheap=new MinHeap();`,\n      evaluate: `Boolean(minheap);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'remove from empty heap, remains empty heap',\n      inherit: [1],\n      code: ``,\n      evaluate: `minheap.remove(5);JSON.stringify(minheap.heapContainer);`,\n      expected: JSON.stringify([]),\n    },\n    {\n      id: 3,\n      name: 'remove from empty heap, returns empty heap',\n      inherit: [1],\n      code: ``,\n      evaluate: `minheap.remove(5) === minheap;`,\n      expected: true,\n    },\n    {\n      id: 4,\n      name: 'remove one from one item heap, heap becomes empty',\n      inherit: [1],\n      code: `minheap.heapContainer = [5];minheap.remove(5);`,\n      evaluate: `JSON.stringify(minheap.heapContainer);`,\n      expected: JSON.stringify([]),\n    },\n    {\n      id: 5,\n      name: 'remove one from two item heap, one item remains',\n      inherit: [1],\n      code: `minheap.heapContainer = [5,6];minheap.remove(5);`,\n      evaluate: `JSON.stringify(minheap.heapContainer);`,\n      expected: JSON.stringify([6]),\n    },\n    {\n      id: 6,\n      name: 'remove value from two item heap where value is duplicated',\n      inherit: [1],\n      code: `minheap.heapContainer = [5,5];minheap.remove(5);`,\n      evaluate: `JSON.stringify(minheap.heapContainer);`,\n      expected: JSON.stringify([]),\n    },\n    {\n      id: 7,\n      name: 'complex example',\n      inherit: [1],\n      code: `minheap.heapContainer = [1,2,4,6,3,5,6,10,8,7];minheap.remove(5).remove(6);`,\n      evaluate: `JSON.stringify(minheap.heapContainer);`,\n      expected: JSON.stringify([1, 2, 4, 10, 3, 7, 8]),\n    },\n  ],\n  setupCode: `\n  MinHeap.prototype.getParentIndex = function (childIndex) {\n    return Math.floor((childIndex - 1) / 2);\n  };\n  MinHeap.prototype.hasParent = function (childIndex) {\n    return this.getParentIndex(childIndex) >= 0;\n  };\n  MinHeap.prototype.parent = function (childIndex) {\n    return this.heapContainer[this.getParentIndex(childIndex)];\n  };\n  MinHeap.prototype.getLeftChildIndex = function(parentIndex) {\n    return 2 * parentIndex + 1;\n  };\n  MinHeap.prototype.getRightChildIndex = function(parentIndex) {\n    return 2 * parentIndex + 2;\n  };\n  MinHeap.prototype.hasLeftChild = function(parentIndex) {\n    return this.getLeftChildIndex(parentIndex) < this.heapContainer.length;\n  };\n  MinHeap.prototype.hasRightChild = function(parentIndex) {\n    return this.getRightChildIndex(parentIndex) < this.heapContainer.length;\n  };\n  MinHeap.prototype.leftChild = function(parentIndex) {\n    return this.heapContainer[this.getLeftChildIndex(parentIndex)];\n  };\n  MinHeap.prototype.rightChild = function(parentIndex) {\n    return this.heapContainer[this.getRightChildIndex(parentIndex)];\n  };\n  MinHeap.prototype.find = function (item) {\n    const foundItemIndices = [];\n    for (let itemIndex = 0; itemIndex < this.heapContainer.length; itemIndex += 1) {\n      if (item === this.heapContainer[itemIndex]) {\n        foundItemIndices.push(itemIndex);\n      }\n    }\n    return foundItemIndices;\n  };\n  MinHeap.prototype.heapifyUp = function (customStartIndex) {\n    let currentIndex = customStartIndex || this.heapContainer.length - 1;\n    while (\n      this.hasParent(currentIndex) &&\n      this.parent(currentIndex) > this.heapContainer[currentIndex]\n    ) {\n      this.swap(currentIndex, this.getParentIndex(currentIndex));\n      currentIndex = this.getParentIndex(currentIndex);\n    }\n  };\n  MinHeap.prototype.heapifyDown = function (customStartIndex = 0) {\n    let currentIndex = customStartIndex;\n    let nextIndex = null;\n    while (this.hasLeftChild(currentIndex)) {\n      if (\n        this.hasRightChild(currentIndex) &&\n        this.rightChild(currentIndex) <= this.leftChild(currentIndex)\n      ) {\n        nextIndex = this.getRightChildIndex(currentIndex);\n      } else {\n        nextIndex = this.getLeftChildIndex(currentIndex);\n      }\n      if (this.heapContainer[currentIndex] <= this.heapContainer[nextIndex]) {\n        break;\n      }\n      this.swap(currentIndex, nextIndex);\n      currentIndex = nextIndex;\n    }\n  };\n  MinHeap.prototype.swap = function (indexOne, indexTwo) {\n    const tmp = this.heapContainer[indexTwo];\n    this.heapContainer[indexTwo] = this.heapContainer[indexOne];\n    this.heapContainer[indexOne] = tmp;\n  };\n  `,\n  category: HEAP,\n  type: DATA_STRUCTURE,\n  difficulty: ADVANCED,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 270],\n    solutionLines: solution,\n  },\n};\n","import { HEAP, DATA_STRUCTURE, ADVANCED } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class MinHeap {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.heapContainer = [];' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: -1, text: '// IMPLEMENTED:  swap(index1: int, index2: int)' },\n  { stage: -1, text: '// IMPLEMENTED:  getParentIndex(index: int) int' },\n  { stage: -1, text: '// IMPLEMENTED:  hasParent(index: int) bool' },\n  { stage: -1, text: '// IMPLEMENTED:  parent(index: int) int' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  heapifyUp(customStartIndex) {' },\n  { stage: 2, text: '    let currentIndex = customStartIndex || this.heapContainer.length - 1;' },\n  { stage: 2, text: '' },\n  { stage: 3, text: '    while (' },\n  { stage: 3, text: '      this.hasParent(currentIndex) &&' },\n  { stage: 3, text: '      (this.parent(currentIndex) > this.heapContainer[currentIndex])' },\n  { stage: 3, text: '    ) {' },\n  { stage: 4, text: '      this.swap(currentIndex, this.getParentIndex(currentIndex));' },\n  { stage: 5, text: '      currentIndex = this.getParentIndex(currentIndex);' },\n  { stage: 3, text: '    }' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 35,\n  problemName: `Implement **heapifyUp** for a *MinHeap* class.`,\n  problemText: `Implement a **heapifyUp** method for a *MinHeap* to take an array item at a specified \\`index\\` (the last index in the array by default) and move it up to the correct placement in the heap.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const minheap=new MinHeap();`,\n      evaluate: `Boolean(minheap);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'heapifyUp on one item heap, remains same',\n      inherit: [1],\n      code: `minheap.heapContainer = [5];minheap.heapifyUp();`,\n      evaluate: `JSON.stringify(minheap.heapContainer);`,\n      expected: JSON.stringify([5]),\n    },\n    {\n      id: 3,\n      name: 'heapifyUp on two item heap',\n      inherit: [1],\n      code: `minheap.heapContainer = [5,4];minheap.heapifyUp(1);`,\n      evaluate: `JSON.stringify(minheap.heapContainer);`,\n      expected: JSON.stringify([4, 5]),\n    },\n    {\n      id: 4,\n      name: 'heapifyUp on three item heap',\n      inherit: [1],\n      code: `minheap.heapContainer = [5,6,4];minheap.heapifyUp(2);`,\n      evaluate: `JSON.stringify(minheap.heapContainer);`,\n      expected: JSON.stringify([4, 6, 5]),\n    },\n    {\n      id: 5,\n      name: 'heapifyUp on four item heap',\n      inherit: [1],\n      code: `minheap.heapContainer = [4,6,5,3];minheap.heapifyUp(3);`,\n      evaluate: `JSON.stringify(minheap.heapContainer);`,\n      expected: JSON.stringify([3, 4, 5, 6]),\n    },\n    {\n      id: 6,\n      name: 'heapifyUp on complex heap',\n      inherit: [1],\n      code: `minheap.heapContainer = [2,3,5,7,4,6,7,11,9,8,1];minheap.heapifyUp(10);`,\n      evaluate: `JSON.stringify(minheap.heapContainer);`,\n      expected: JSON.stringify([1, 2, 5, 7, 3, 6, 7, 11, 9, 8, 4]),\n    },\n    {\n      id: 7,\n      name: 'by default, works on last item in heap',\n      inherit: [1],\n      code: `minheap.heapContainer = [2,3,5,7,4,6,7,11,9,8,1];minheap.heapifyUp();`,\n      evaluate: `JSON.stringify(minheap.heapContainer);`,\n      expected: JSON.stringify([1, 2, 5, 7, 3, 6, 7, 11, 9, 8, 4]),\n    },\n  ],\n  setupCode: `\n  MinHeap.prototype.getParentIndex = function (childIndex) {\n    return Math.floor((childIndex - 1) / 2);\n  };\n  MinHeap.prototype.hasParent = function (childIndex) {\n    return this.getParentIndex(childIndex) >= 0;\n  };\n  MinHeap.prototype.parent = function (childIndex) {\n    return this.heapContainer[this.getParentIndex(childIndex)];\n  };\n  MinHeap.prototype.swap = function (indexOne, indexTwo) {\n    const tmp = this.heapContainer[indexTwo];\n    this.heapContainer[indexTwo] = this.heapContainer[indexOne];\n    this.heapContainer[indexOne] = tmp;\n  };\n  `,\n  category: HEAP,\n  type: DATA_STRUCTURE,\n  difficulty: ADVANCED,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 180],\n    solutionLines: solution,\n  },\n};\n","import { HEAP, DATA_STRUCTURE, ADVANCED } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class MinHeap {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.heapContainer = [];' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: -1, text: '// IMPLEMENTED:  swap(index1: int, index2: int)' },\n  { stage: -1, text: '// IMPLEMENTED:  getLeftChildIndex(index: int) int' },\n  { stage: -1, text: '// IMPLEMENTED:  getRightChildIndex(index: int) int' },\n  { stage: -1, text: '// IMPLEMENTED:  hasLeftChild(index: int) bool' },\n  { stage: -1, text: '// IMPLEMENTED:  hasRightChild(index: int) bool' },\n  { stage: -1, text: '// IMPLEMENTED:  getLeftChildIndex(index: int) int' },\n  { stage: -1, text: '// IMPLEMENTED:  getrightChildIndex(index: int) int' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  heapifyDown(customStartIndex = 0) {' },\n  { stage: 2, text: '    let currentIndex = customStartIndex;' },\n  { stage: 2, text: '    let nextIndex = null;' },\n  { stage: 2, text: '' },\n  { stage: 3, text: '    while (this.hasLeftChild(currentIndex)) {' },\n  { stage: 4, text: '      if (' },\n  { stage: 4, text: '        this.hasRightChild(currentIndex) &&' },\n  { stage: 4, text: '        this.rightChild(currentIndex) <= this.leftChild(currentIndex)' },\n  { stage: 4, text: '      ) {' },\n  { stage: 5, text: '        nextIndex = this.getRightChildIndex(currentIndex);' },\n  { stage: 4, text: '      } else {' },\n  { stage: 5, text: '        nextIndex = this.getLeftChildIndex(currentIndex);' },\n  { stage: 4, text: '      }' },\n  { stage: 5, text: '' },\n  {\n    stage: 6,\n    text: '      if (this.heapContainer[currentIndex] <= this.heapContainer[nextIndex]) {',\n  },\n  { stage: 6, text: '        break;' },\n  { stage: 6, text: '      }' },\n  { stage: 6, text: '' },\n  { stage: 7, text: '      this.swap(currentIndex, nextIndex);' },\n  { stage: 7, text: '      currentIndex = nextIndex;' },\n  { stage: 3, text: '    }' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 36,\n  problemName: `Implement **heapifyDown** for a *MinHeap* class.`,\n  problemText: `Implement a **heapifyDown** method for a *MinHeap* to take an array item at a specified \\`index\\` (the first item in the array by default) and move it down to the correct placement in the heap.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const minheap=new MinHeap();`,\n      evaluate: `Boolean(minheap);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'one item in heap, heap is same',\n      inherit: [1],\n      code: `minheap.heapContainer = [1];  minheap.heapifyDown();`,\n      evaluate: `JSON.stringify(minheap.heapContainer);`,\n      expected: JSON.stringify([1]),\n    },\n    {\n      id: 3,\n      name: 'two items in heap, no change',\n      inherit: [1],\n      code: `minheap.heapContainer = [1,2];  minheap.heapifyDown();`,\n      evaluate: `JSON.stringify(minheap.heapContainer);`,\n      expected: JSON.stringify([1, 2]),\n    },\n    {\n      id: 4,\n      name: 'two items in heap, reorder',\n      inherit: [1],\n      code: `minheap.heapContainer = [2,1];  minheap.heapifyDown();`,\n      evaluate: `JSON.stringify(minheap.heapContainer);`,\n      expected: JSON.stringify([1, 2]),\n    },\n    {\n      id: 5,\n      name: 'five items in heap, reorder',\n      inherit: [1],\n      code: `minheap.heapContainer = [5,1,2,3,4];  minheap.heapifyDown();`,\n      evaluate: `JSON.stringify(minheap.heapContainer);`,\n      expected: JSON.stringify([1, 3, 2, 5, 4]),\n    },\n    {\n      id: 6,\n      name: 'five items in heap, specific index',\n      inherit: [1],\n      code: `minheap.heapContainer = [1,5,2,3,4];  minheap.heapifyDown(1);`,\n      evaluate: `JSON.stringify(minheap.heapContainer);`,\n      expected: JSON.stringify([1, 3, 2, 5, 4]),\n    },\n  ],\n  setupCode: `\n  MinHeap.prototype.getLeftChildIndex = function(parentIndex) {\n    return 2 * parentIndex + 1;\n  };\n  MinHeap.prototype.getRightChildIndex = function(parentIndex) {\n    return 2 * parentIndex + 2;\n  };\n  MinHeap.prototype.hasLeftChild = function(parentIndex) {\n    return this.getLeftChildIndex(parentIndex) < this.heapContainer.length;\n  };\n  MinHeap.prototype.hasRightChild = function(parentIndex) {\n    return this.getRightChildIndex(parentIndex) < this.heapContainer.length;\n  };\n  MinHeap.prototype.leftChild = function(parentIndex) {\n    return this.heapContainer[this.getLeftChildIndex(parentIndex)];\n  };\n  MinHeap.prototype.rightChild = function(parentIndex) {\n    return this.heapContainer[this.getRightChildIndex(parentIndex)];\n  };\n  MinHeap.prototype.swap = function (indexOne, indexTwo) {\n    const tmp = this.heapContainer[indexTwo];\n    this.heapContainer[indexTwo] = this.heapContainer[indexOne];\n    this.heapContainer[indexOne] = tmp;\n  };\n  `,\n  category: HEAP,\n  type: DATA_STRUCTURE,\n  difficulty: ADVANCED,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 240],\n    solutionLines: solution,\n  },\n};\n","import { BINARY_SEARCH_TREE, DATA_STRUCTURE, ADVANCED } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class BinarySearchTreeNode {' },\n  { stage: 0, text: '  constructor(value) {' },\n  { stage: 0, text: '    this.value = value;' },\n  { stage: 0, text: '    this.left = null;' },\n  { stage: 0, text: '    this.right = null;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class BinarySearchTree {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.root = null;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  insert(value) {' },\n  { stage: 2, text: '    const thisNode = new BinarySearchTreeNode(value);' },\n  { stage: 3, text: '    if (!this.root) {' },\n  { stage: 4, text: '      this.root = thisNode;' },\n  { stage: 3, text: '    } else {' },\n  { stage: 4, text: '      let currentRoot = this.root;' },\n  { stage: 4, text: '      while (true) {' },\n  { stage: 5, text: '        if (currentRoot.value > value) {' },\n  { stage: 6, text: '          if (currentRoot.left != null) {' },\n  { stage: 7, text: '            currentRoot = currentRoot.left;' },\n  { stage: 6, text: '          } else {' },\n  { stage: 7, text: '            currentRoot.left = thisNode;' },\n  { stage: 7, text: '            break;' },\n  { stage: 6, text: '          }' },\n  { stage: 5, text: '        } else if (currentRoot.value < value) {' },\n  { stage: 8, text: '          if (currentRoot.right != null) {' },\n  { stage: 9, text: '            currentRoot = currentRoot.right;' },\n  { stage: 8, text: '          } else {' },\n  { stage: 9, text: '            currentRoot.right = thisNode;' },\n  { stage: 9, text: '            break;' },\n  { stage: 8, text: '          }' },\n  { stage: 5, text: '        } else {' },\n  { stage: 9, text: '          break;' },\n  { stage: 5, text: '        }' },\n  { stage: 4, text: '      }' },\n  { stage: 3, text: '    }' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 37,\n  problemName: 'Implement **insert** in a *BinarySearchTree* class.',\n  problemText:\n    'Write an **insert** method in a *BinarySearchTree* class that accepts a `value` (integer) and inserts it at the proper place in the tree.',\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const tree=new BinarySearchTree();`,\n      evaluate: `Boolean(tree);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'Insert value into empty tree.',\n      inherit: [1],\n      code: `tree.insert(5);`,\n      evaluate: `tree.root.value;`,\n      expected: 5,\n    },\n    {\n      id: 3,\n      name: 'Insert 2nd value.',\n      inherit: [1, 2],\n      code: `tree.insert(7);`,\n      evaluate: `tree.root.right.value;`,\n      expected: 7,\n    },\n    {\n      id: 4,\n      name: 'Insert 3rd value.',\n      inherit: [1, 2, 3],\n      code: `tree.insert(6);`,\n      evaluate: `tree.root.right.left.value;`,\n      expected: 6,\n    },\n    {\n      id: 5,\n      name: 'Insert 4th value.',\n      inherit: [1, 2, 3, 4],\n      code: `tree.insert(1);`,\n      evaluate: `tree.root.left.value;`,\n      expected: 1,\n    },\n    {\n      id: 6,\n      name: 'Insert 5th value.',\n      inherit: [1, 2, 3, 4, 5],\n      code: `tree.insert(2);`,\n      evaluate: `tree.root.left.right.value;`,\n      expected: 2,\n    },\n  ],\n  setupCode: '',\n  category: BINARY_SEARCH_TREE,\n  type: DATA_STRUCTURE,\n  difficulty: ADVANCED,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 300],\n    solutionLines: solution,\n  },\n};\n","import { BINARY_SEARCH_TREE, DATA_STRUCTURE, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class BinarySearchTreeNode {' },\n  { stage: 0, text: '  constructor(value) {' },\n  { stage: 0, text: '    this.value = value;' },\n  { stage: 0, text: '    this.left = null;' },\n  { stage: 0, text: '    this.right = null;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class BinarySearchTree {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.root = null;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  search(value) {' },\n  { stage: 2, text: '    let currentRoot = this.root;' },\n  { stage: 2, text: '    let found = false;' },\n  { stage: 3, text: '    while (currentRoot) {' },\n  { stage: 4, text: '      if (currentRoot.value > value) {' },\n  { stage: 5, text: '        currentRoot = currentRoot.left;' },\n  { stage: 4, text: '      } else if (currentRoot.value < value) {' },\n  { stage: 5, text: '        currentRoot = currentRoot.right;' },\n  { stage: 4, text: '      } else {' },\n  { stage: 6, text: '        found = true;' },\n  { stage: 6, text: '        break;' },\n  { stage: 4, text: '      }' },\n  { stage: 3, text: '    }' },\n  { stage: 3, text: '    return found;' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 38,\n  problemName: 'Implement **search** in a *BinarySearchTree* class.',\n  problemText:\n    'Write a **search** method in a *BinarySearchTree* class that accepts a `value` (integer) and returns a boolean `true` or `false` indicating whether that integer is found within the tree.',\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const tree=new BinarySearchTree();`,\n      evaluate: `Boolean(tree);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'search an empty tree returns false',\n      inherit: [1],\n      code: ``,\n      evaluate: `tree.search(5);`,\n      expected: false,\n    },\n    {\n      id: 3,\n      name: 'search a tree finds value',\n      inherit: [1],\n      code: `tree.insert(5);`,\n      evaluate: `tree.search(5);`,\n      expected: true,\n    },\n    {\n      id: 4,\n      name: 'search a tree does not find value',\n      inherit: [1],\n      code: `tree.insert(5);`,\n      evaluate: `tree.search(2);`,\n      expected: false,\n    },\n    {\n      id: 5,\n      name: 'complex tree, found (1)',\n      inherit: [1],\n      code: `tree.insert(5);tree.insert(7);tree.insert(6);tree.insert(1);tree.insert(2);`,\n      evaluate: `tree.search(6);`,\n      expected: true,\n    },\n    {\n      id: 6,\n      name: 'complex tree, found (2)',\n      inherit: [1, 5],\n      code: ``,\n      evaluate: `tree.search(1);`,\n      expected: true,\n    },\n    {\n      id: 7,\n      name: 'complex tree, not found (1)',\n      inherit: [1, 5],\n      code: ``,\n      evaluate: `tree.search(8);`,\n      expected: false,\n    },\n    {\n      id: 8,\n      name: 'complex tree, not found (2)',\n      inherit: [1, 5],\n      code: ``,\n      evaluate: `tree.search(4);`,\n      expected: false,\n    },\n  ],\n  setupCode: `\n  BinarySearchTree.prototype.insert = function(value) {\n    const thisNode = new BinarySearchTreeNode(value);\n    if (!this.root) {\n      this.root = thisNode;\n    } else {\n      let currentRoot = this.root;\n      while (true) {\n        if (currentRoot.value > value) {\n          if (currentRoot.left != null) {\n            currentRoot = currentRoot.left;\n          } else {\n            currentRoot.left = thisNode;\n            break;\n          }\n        } else if (currentRoot.value < value) {\n          if (currentRoot.right != null) {\n            currentRoot = currentRoot.right;\n          } else {\n            currentRoot.right = thisNode;\n            break;\n          }\n        } else {\n          break;\n        }\n      }\n    }\n  };\n  `,\n  category: BINARY_SEARCH_TREE,\n  type: DATA_STRUCTURE,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 210],\n    solutionLines: solution,\n  },\n};\n","import { BINARY_SEARCH_TREE, DATA_STRUCTURE, ADVANCED } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class BinarySearchTreeNode {' },\n  { stage: 0, text: '  constructor(value) {' },\n  { stage: 0, text: '    this.value = value;' },\n  { stage: 0, text: '    this.left = null;' },\n  { stage: 0, text: '    this.right = null;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class BinarySearchTree {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.root = null;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  delete(value) {' },\n  { stage: 2, text: '    this.root = deleteRecursively(this.root, value);' },\n  { stage: 2, text: '' },\n  { stage: 2, text: '    function deleteRecursively(root, value) {' },\n  { stage: 3, text: '      if (!root) {' },\n  { stage: 4, text: '        return null;' },\n  { stage: 3, text: '      } else if (value < root.value) {' },\n  { stage: 4, text: '        root.left = deleteRecursively(root.left, value);' },\n  { stage: 3, text: '      } else if (value > root.value) {' },\n  { stage: 5, text: '        root.right = deleteRecursively(root.right, value);' },\n  { stage: 3, text: '      } else {' },\n  { stage: 6, text: '        if (!root.left && !root.right) {' },\n  { stage: 7, text: '          return null;' },\n  { stage: 6, text: '        } else if (!root.left) {' },\n  { stage: 7, text: '          root = root.right;' },\n  { stage: 7, text: '          return root;' },\n  { stage: 6, text: '        } else if (!root.right) {' },\n  { stage: 8, text: '          root = root.left;' },\n  { stage: 8, text: '          return root;' },\n  { stage: 6, text: '        } else {' },\n  { stage: 8, text: '          const temp = findMin(root.right);' },\n  { stage: 10, text: '          root.value = temp.value;' },\n  { stage: 10, text: '          root.right = deleteRecursively(root.right, temp.value);' },\n  { stage: 10, text: '          return root;' },\n  { stage: 6, text: '        }' },\n  { stage: 3, text: '      }' },\n  { stage: 5, text: '      return root;' },\n  { stage: 2, text: '    }' },\n  { stage: 9, text: '' },\n  { stage: 8, text: '    function findMin(root) {' },\n  { stage: 9, text: '      while (root.left) {' },\n  { stage: 9, text: '        root = root.left;' },\n  { stage: 9, text: '      }' },\n  { stage: 9, text: '      return root;' },\n  { stage: 8, text: '    }' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 39,\n  problemName: 'Implement **delete** in a *BinarySearchTree* class.',\n  problemText:\n    'Write a **delete** method in a *BinarySearchTree* class that accepts an integer `value` and deletes it from a tree, while maintaining a valid Binary Search Tree structure.',\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const tree=new BinarySearchTree();`,\n      evaluate: `Boolean(tree);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'delete on empty tree, no crash',\n      inherit: [1],\n      code: `tree.delete(5);`,\n      evaluate: `Boolean(tree);`,\n      expected: true,\n    },\n    {\n      id: 3,\n      name: 'insert an item into tree.  delete it. find it.',\n      inherit: [1],\n      code: `tree.insert(5);tree.delete(5);`,\n      evaluate: `tree.search(5);`,\n      expected: false,\n    },\n    {\n      id: 4,\n      name: 'insert two items into tree.  delete one. find the other.',\n      inherit: [1],\n      code: `tree.insert(5);tree.insert(6);tree.delete(5);`,\n      evaluate: `tree.search(6);`,\n      expected: true,\n    },\n    {\n      id: 5,\n      name: 'find the deleted of task #4.',\n      inherit: [1, 4],\n      code: ``,\n      evaluate: `tree.search(5);`,\n      expected: false,\n    },\n  ],\n  setupCode: `\n  BinarySearchTree.prototype.insert = function(value) {\n    const thisNode = new BinarySearchTreeNode(value);\n    if (!this.root) {\n      this.root = thisNode;\n    } else {\n      let currentRoot = this.root;\n      while (true) {\n        if (currentRoot.value > value) {\n          if (currentRoot.left != null) {\n            currentRoot = currentRoot.left;\n          } else {\n            currentRoot.left = thisNode;\n            break;\n          }\n        } else if (currentRoot.value < value) {\n          if (currentRoot.right != null) {\n            currentRoot = currentRoot.right;\n          } else {\n            currentRoot.right = thisNode;\n            break;\n          }\n        } else {\n          break;\n        }\n      }\n    }\n  };\n  BinarySearchTree.prototype.search = function(value) {\n    let currentRoot = this.root;\n    let found = false;\n    while (currentRoot) {\n      if (currentRoot.value > value) {\n        currentRoot = currentRoot.left;\n      } else if (currentRoot.value < value) {\n        currentRoot = currentRoot.right;\n      } else {\n        found = true;\n        break;\n      }\n    }\n    return found;\n  };\n  `,\n  category: BINARY_SEARCH_TREE,\n  type: DATA_STRUCTURE,\n  difficulty: ADVANCED,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 330],\n    solutionLines: solution,\n  },\n};\n","import { BINARY_SEARCH_TREE, DATA_STRUCTURE, ADVANCED } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class BinarySearchTreeNode {' },\n  { stage: 0, text: '  constructor(value) {' },\n  { stage: 0, text: '    this.value = value;' },\n  { stage: 0, text: '    this.left = null;' },\n  { stage: 0, text: '    this.right = null;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class BinarySearchTree {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.root = null;' },\n  { stage: 0, text: '    this.root = null;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: -1, text: '// IMPLEMENTED  callback(value)' },\n  { stage: -1, text: '' },\n  { stage: 0, text: '  traversePreOrderIterative(node = this.root, callback = this.callback) {' },\n  { stage: 1, text: '    const nodeStack = [];' },\n  { stage: 1, text: '    nodeStack.push(node);' },\n  { stage: 1, text: '' },\n  { stage: 2, text: '    while (nodeStack.length) {' },\n  { stage: 3, text: '      let next = nodeStack.pop();' },\n  { stage: 3, text: '      callback(next.value);' },\n  { stage: 4, text: '      if (next.right) {' },\n  { stage: 4, text: '        nodeStack.push(next.right);' },\n  { stage: 4, text: '      }' },\n  { stage: 5, text: '      if (next.left) {' },\n  { stage: 5, text: '        nodeStack.push(next.left);' },\n  { stage: 5, text: '      }' },\n  { stage: 2, text: '    }' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 40,\n  problemName: 'Implement **traversePreOrderIterative** in a *BinarySearchTree* class.',\n  problemText:\n    'Write a **traversePreOrderIterative** method in a *BinarySearchTree* Class that traverses a tree iteratively and runs the supplied `callback` function on each node value.',\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const tree=new BinarySearchTree();`,\n      evaluate: `Boolean(tree);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'proper pre-order ranking',\n      inherit: [1],\n      code: `tree.insert(5);tree.insert(3);tree.insert(11);tree.insert(0);tree.insert(7);tree.insert(2);tree.traversePreOrderIterative();`,\n      evaluate: `JSON.stringify(tree.tempNodeList);`,\n      expected: JSON.stringify([5, 3, 0, 2, 11, 7]),\n    },\n  ],\n  setupCode: `\n  BinarySearchTree.prototype.tempNodeList = [];\n  BinarySearchTree.prototype.callback = function (value) {\n    BinarySearchTree.prototype.tempNodeList.push(value);\n  };\n  BinarySearchTree.prototype.clearTempNodeList = function (value) {\n    BinarySearchTree.prototype.tempNodeList = [];\n  };\n  BinarySearchTree.prototype.insert = function(value) {\n    const thisNode = new BinarySearchTreeNode(value);\n    if (!this.root) {\n      this.root = thisNode;\n    } else {\n      let currentRoot = this.root;\n      while (true) {\n        if (currentRoot.value > value) {\n          if (currentRoot.left != null) {\n            currentRoot = currentRoot.left;\n          } else {\n            currentRoot.left = thisNode;\n            break;\n          }\n        } else if (currentRoot.value < value) {\n          if (currentRoot.right != null) {\n            currentRoot = currentRoot.right;\n          } else {\n            currentRoot.right = thisNode;\n            break;\n          }\n        } else {\n          break;\n        }\n      }\n    }\n  };\n  `,\n  category: BINARY_SEARCH_TREE,\n  type: DATA_STRUCTURE,\n  difficulty: ADVANCED,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 180],\n    solutionLines: solution,\n  },\n};\n","import { BINARY_SEARCH_TREE, DATA_STRUCTURE, BEGINNER } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class BinarySearchTreeNode {' },\n  { stage: 0, text: '  constructor(value) {' },\n  { stage: 0, text: '    this.value = value;' },\n  { stage: 0, text: '    this.left = null;' },\n  { stage: 0, text: '    this.right = null;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class BinarySearchTree {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.root = null;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: -1, text: '// IMPLEMENTED  callback(value)' },\n  { stage: -1, text: '' },\n  { stage: 0, text: '  traversePreOrderRecursive(node = this.root, callback = this.callback) {' },\n  { stage: 1, text: '    if (!node) {' },\n  { stage: 1, text: '      return;' },\n  { stage: 0, text: '    }' },\n  { stage: 2, text: '    callback(node.value);' },\n  { stage: 3, text: '    this.traversePreOrderRecursive(node.left);' },\n  { stage: 3, text: '    this.traversePreOrderRecursive(node.right);' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 41,\n  problemName: 'Implement **traversePreOrderRecursive** in a *BinarySearchTree* class.',\n  problemText:\n    'Write a **traversePreOrderRecursive** method in a *BinarySearchTree* class that traverses a tree recursively and runs the supplied `callback` function on each node value.',\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const tree=new BinarySearchTree();`,\n      evaluate: `Boolean(tree);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'proper pre-order ranking',\n      inherit: [1],\n      code: `tree.insert(5);tree.insert(3);tree.insert(11);tree.insert(0);tree.insert(7);tree.insert(2);tree.traversePreOrderRecursive();`,\n      evaluate: `JSON.stringify(tree.tempNodeList);`,\n      expected: JSON.stringify([5, 3, 0, 2, 11, 7]),\n    },\n  ],\n  setupCode: `\n  BinarySearchTree.prototype.tempNodeList = [];\n  BinarySearchTree.prototype.callback = function (value) {\n    BinarySearchTree.prototype.tempNodeList.push(value);\n  };\n  BinarySearchTree.prototype.clearTempNodeList = function (value) {\n    BinarySearchTree.prototype.tempNodeList = [];\n  };\n  BinarySearchTree.prototype.insert = function(value) {\n    const thisNode = new BinarySearchTreeNode(value);\n    if (!this.root) {\n      this.root = thisNode;\n    } else {\n      let currentRoot = this.root;\n      while (true) {\n        if (currentRoot.value > value) {\n          if (currentRoot.left != null) {\n            currentRoot = currentRoot.left;\n          } else {\n            currentRoot.left = thisNode;\n            break;\n          }\n        } else if (currentRoot.value < value) {\n          if (currentRoot.right != null) {\n            currentRoot = currentRoot.right;\n          } else {\n            currentRoot.right = thisNode;\n            break;\n          }\n        } else {\n          break;\n        }\n      }\n    }\n  };\n  `,\n  category: BINARY_SEARCH_TREE,\n  type: DATA_STRUCTURE,\n  difficulty: BEGINNER,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 120],\n    solutionLines: solution,\n  },\n};\n","import { BINARY_SEARCH_TREE, DATA_STRUCTURE, ADVANCED } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class BinarySearchTreeNode {' },\n  { stage: 0, text: '  constructor(value) {' },\n  { stage: 0, text: '    this.value = value;' },\n  { stage: 0, text: '    this.left = null;' },\n  { stage: 0, text: '    this.right = null;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class BinarySearchTree {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.root = null;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: -1, text: '// IMPLEMENTED  callback(value)' },\n  { stage: -1, text: '' },\n  { stage: 0, text: '  traverseInOrderIterative(node = this.root, callback = this.callback) {' },\n  { stage: 1, text: '    let stack = [];' },\n  { stage: 1, text: '    let done = false;' },\n  { stage: 1, text: '' },\n  { stage: 2, text: '    while (!done) {' },\n  { stage: 3, text: '      if (node != null) {' },\n  { stage: 4, text: '        stack.push(node);' },\n  { stage: 4, text: '        node = node.left;' },\n  { stage: 3, text: '      } else {' },\n  { stage: 5, text: '        if (stack.length) {' },\n  { stage: 6, text: '          node = stack.pop();' },\n  { stage: 6, text: '          callback(node.value);' },\n  { stage: 7, text: '          node = node.right;' },\n  { stage: 5, text: '        } else {' },\n  { stage: 7, text: '          done = true;' },\n  { stage: 5, text: '        }' },\n  { stage: 3, text: '      }' },\n  { stage: 2, text: '    }' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 42,\n  problemName: 'Implement **traverseInOrderIterative** in a *BinarySearchTree* class.',\n  problemText:\n    'Write a **traverseInOrderIterative** method in a *BinarySearchTree* class that traverses a tree iteratively and runs the supplied `callback` function on each node value.',\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const tree=new BinarySearchTree();`,\n      evaluate: `Boolean(tree);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'proper in-order ranking',\n      inherit: [1],\n      code: `tree.insert(5);tree.insert(3);tree.insert(11);tree.insert(0);tree.insert(7);tree.insert(2);tree.traverseInOrderIterative();`,\n      evaluate: `JSON.stringify(tree.tempNodeList);`,\n      expected: JSON.stringify([0, 2, 3, 5, 7, 11]),\n    },\n  ],\n  setupCode: `\n  BinarySearchTree.prototype.tempNodeList = [];\n  BinarySearchTree.prototype.callback = function (value) {\n    BinarySearchTree.prototype.tempNodeList.push(value);\n  };\n  BinarySearchTree.prototype.clearTempNodeList = function (value) {\n    BinarySearchTree.prototype.tempNodeList = [];\n  };\n  BinarySearchTree.prototype.insert = function(value) {\n    const thisNode = new BinarySearchTreeNode(value);\n    if (!this.root) {\n      this.root = thisNode;\n    } else {\n      let currentRoot = this.root;\n      while (true) {\n        if (currentRoot.value > value) {\n          if (currentRoot.left != null) {\n            currentRoot = currentRoot.left;\n          } else {\n            currentRoot.left = thisNode;\n            break;\n          }\n        } else if (currentRoot.value < value) {\n          if (currentRoot.right != null) {\n            currentRoot = currentRoot.right;\n          } else {\n            currentRoot.right = thisNode;\n            break;\n          }\n        } else {\n          break;\n        }\n      }\n    }\n  };\n  `,\n  category: BINARY_SEARCH_TREE,\n  type: DATA_STRUCTURE,\n  difficulty: ADVANCED,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 240],\n    solutionLines: solution,\n  },\n};\n","import { BINARY_SEARCH_TREE, DATA_STRUCTURE, BEGINNER } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class BinarySearchTreeNode {' },\n  { stage: 0, text: '  constructor(value) {' },\n  { stage: 0, text: '    this.value = value;' },\n  { stage: 0, text: '    this.left = null;' },\n  { stage: 0, text: '    this.right = null;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class BinarySearchTree {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.root = null;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: -1, text: '// IMPLEMENTED  callback(value)' },\n  { stage: -1, text: '' },\n  { stage: 0, text: '  traverseInOrderRecursive(node = this.root, callback = this.callback) {' },\n  { stage: 1, text: '    if (!node) {' },\n  { stage: 1, text: '      return;' },\n  { stage: 0, text: '    }' },\n  { stage: 2, text: '    this.traverseInOrderRecursive(node.left);' },\n  { stage: 2, text: '    callback(node.value);' },\n  { stage: 3, text: '    this.traverseInOrderRecursive(node.right);' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 43,\n  problemName: 'Implement **traverseInOrderRecursive** in a *BinarySearchTree* class.',\n  problemText:\n    'Write a **traverseInOrderRecursive** method in a *BinarySearchTree* class that traverses a tree recursively and runs the supplied `callback` function on each node value.',\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const tree=new BinarySearchTree();`,\n      evaluate: `Boolean(tree);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'proper in-order ranking',\n      inherit: [1],\n      code: `tree.insert(5);tree.insert(3);tree.insert(11);tree.insert(0);tree.insert(7);tree.insert(2);tree.traverseInOrderRecursive();`,\n      evaluate: `JSON.stringify(tree.tempNodeList);`,\n      expected: JSON.stringify([0, 2, 3, 5, 7, 11]),\n    },\n  ],\n  setupCode: `\n  BinarySearchTree.prototype.tempNodeList = [];\n  BinarySearchTree.prototype.callback = function (value) {\n    BinarySearchTree.prototype.tempNodeList.push(value);\n  };\n  BinarySearchTree.prototype.clearTempNodeList = function (value) {\n    BinarySearchTree.prototype.tempNodeList = [];\n  };\n  BinarySearchTree.prototype.insert = function(value) {\n    const thisNode = new BinarySearchTreeNode(value);\n    if (!this.root) {\n      this.root = thisNode;\n    } else {\n      let currentRoot = this.root;\n      while (true) {\n        if (currentRoot.value > value) {\n          if (currentRoot.left != null) {\n            currentRoot = currentRoot.left;\n          } else {\n            currentRoot.left = thisNode;\n            break;\n          }\n        } else if (currentRoot.value < value) {\n          if (currentRoot.right != null) {\n            currentRoot = currentRoot.right;\n          } else {\n            currentRoot.right = thisNode;\n            break;\n          }\n        } else {\n          break;\n        }\n      }\n    }\n  };\n  `,\n  category: BINARY_SEARCH_TREE,\n  type: DATA_STRUCTURE,\n  difficulty: BEGINNER,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 120],\n    solutionLines: solution,\n  },\n};\n","import { BINARY_SEARCH_TREE, DATA_STRUCTURE, ADVANCED } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class BinarySearchTreeNode {' },\n  { stage: 0, text: '  constructor(value) {' },\n  { stage: 0, text: '    this.value = value;' },\n  { stage: 0, text: '    this.left = null;' },\n  { stage: 0, text: '    this.right = null;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class BinarySearchTree {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.root = null;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: -1, text: '// IMPLEMENTED  callback(value)' },\n  { stage: -1, text: '' },\n  { stage: 0, text: '  traversePostOrderIterative(node = this.root, callback = this.callback) {' },\n  { stage: 1, text: '    const s1 = [];' },\n  { stage: 1, text: '    const s2 = [];' },\n  { stage: 1, text: '    s1.push(node);' },\n  { stage: 1, text: '' },\n  { stage: 2, text: '    while (s1.length) {' },\n  { stage: 3, text: '      const next = s1.pop();' },\n  { stage: 3, text: '      s2.push(next);' },\n  { stage: 3, text: '' },\n  { stage: 4, text: '      if (next.left) {' },\n  { stage: 4, text: '        s1.push(next.left);' },\n  { stage: 4, text: '      }' },\n  { stage: 5, text: '      if (next.right) {' },\n  { stage: 5, text: '        s1.push(next.right);' },\n  { stage: 5, text: '      }' },\n  { stage: 2, text: '    }' },\n  { stage: 6, text: '    while (s2.length) {' },\n  { stage: 7, text: '      const next = s2.pop();' },\n  { stage: 7, text: '      callback(next.value);' },\n  { stage: 6, text: '    }' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 44,\n  problemName: 'Implement **traversePostOrderIterative** in a *BinarySearchTree* class.',\n  problemText:\n    'Write a **traversePostOrderIterative** method in a *BinarySearchTree* class that traverses a tree iteratively and runs the supplied `callback` function on each node value.',\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const tree=new BinarySearchTree();`,\n      evaluate: `Boolean(tree);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'proper post-order ranking',\n      inherit: [1],\n      code: `tree.insert(5);tree.insert(3);tree.insert(11);tree.insert(0);tree.insert(7);tree.insert(2);tree.traversePostOrderIterative();`,\n      evaluate: `JSON.stringify(tree.tempNodeList);`,\n      expected: JSON.stringify([2, 0, 3, 7, 11, 5]),\n    },\n  ],\n  setupCode: `\n  BinarySearchTree.prototype.tempNodeList = [];\n  BinarySearchTree.prototype.callback = function (value) {\n    BinarySearchTree.prototype.tempNodeList.push(value);\n  };\n  BinarySearchTree.prototype.clearTempNodeList = function (value) {\n    BinarySearchTree.prototype.tempNodeList = [];\n  };\n  BinarySearchTree.prototype.insert = function(value) {\n    const thisNode = new BinarySearchTreeNode(value);\n    if (!this.root) {\n      this.root = thisNode;\n    } else {\n      let currentRoot = this.root;\n      while (true) {\n        if (currentRoot.value > value) {\n          if (currentRoot.left != null) {\n            currentRoot = currentRoot.left;\n          } else {\n            currentRoot.left = thisNode;\n            break;\n          }\n        } else if (currentRoot.value < value) {\n          if (currentRoot.right != null) {\n            currentRoot = currentRoot.right;\n          } else {\n            currentRoot.right = thisNode;\n            break;\n          }\n        } else {\n          break;\n        }\n      }\n    }\n  };\n  `,\n  category: BINARY_SEARCH_TREE,\n  type: DATA_STRUCTURE,\n  difficulty: ADVANCED,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 240],\n    solutionLines: solution,\n  },\n};\n","import { BINARY_SEARCH_TREE, DATA_STRUCTURE, BEGINNER } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class BinarySearchTreeNode {' },\n  { stage: 0, text: '  constructor(value) {' },\n  { stage: 0, text: '    this.value = value;' },\n  { stage: 0, text: '    this.left = null;' },\n  { stage: 0, text: '    this.right = null;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class BinarySearchTree {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.root = null;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: -1, text: '// IMPLEMENTED  callback(value)' },\n  { stage: -1, text: '' },\n  { stage: 0, text: '  traversePostOrderRecursive(node = this.root, callback = this.callback) {' },\n  { stage: 1, text: '    if (node.left) {' },\n  { stage: 1, text: '      this.traversePostOrderRecursive(node.left);' },\n  { stage: 1, text: '    }' },\n  { stage: 2, text: '    if (node.right) {' },\n  { stage: 2, text: '      this.traversePostOrderRecursive(node.right);' },\n  { stage: 2, text: '    }' },\n  { stage: 0, text: '' },\n  { stage: 3, text: '    callback(node.value);' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 45,\n  problemName: 'Implement **traversePostOrderRecursive** in a *BinarySearchTree* class.',\n  problemText:\n    'Write a **traversePostOrderRecursive** method in a *BinarySearchTree* class that traverses a tree recursively and runs the supplied `callback` function on each node value.',\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const tree=new BinarySearchTree();`,\n      evaluate: `Boolean(tree);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'proper post-order ranking',\n      inherit: [1],\n      code: `tree.insert(5);tree.insert(3);tree.insert(11);tree.insert(0);tree.insert(7);tree.insert(2);tree.traversePostOrderRecursive();`,\n      evaluate: `JSON.stringify(tree.tempNodeList);`,\n      expected: JSON.stringify([2, 0, 3, 7, 11, 5]),\n    },\n  ],\n  setupCode: `\n  BinarySearchTree.prototype.tempNodeList = [];\n  BinarySearchTree.prototype.callback = function (value) {\n    BinarySearchTree.prototype.tempNodeList.push(value);\n  };\n  BinarySearchTree.prototype.clearTempNodeList = function (value) {\n    BinarySearchTree.prototype.tempNodeList = [];\n  };\n  BinarySearchTree.prototype.insert = function(value) {\n    const thisNode = new BinarySearchTreeNode(value);\n    if (!this.root) {\n      this.root = thisNode;\n    } else {\n      let currentRoot = this.root;\n      while (true) {\n        if (currentRoot.value > value) {\n          if (currentRoot.left != null) {\n            currentRoot = currentRoot.left;\n          } else {\n            currentRoot.left = thisNode;\n            break;\n          }\n        } else if (currentRoot.value < value) {\n          if (currentRoot.right != null) {\n            currentRoot = currentRoot.right;\n          } else {\n            currentRoot.right = thisNode;\n            break;\n          }\n        } else {\n          break;\n        }\n      }\n    }\n  };\n  `,\n  category: BINARY_SEARCH_TREE,\n  type: DATA_STRUCTURE,\n  difficulty: BEGINNER,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 120],\n    solutionLines: solution,\n  },\n};\n","import { BINARY_SEARCH_TREE, DATA_STRUCTURE, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class BinarySearchTreeNode {' },\n  { stage: 0, text: '  constructor(value) {' },\n  { stage: 0, text: '    this.value = value;' },\n  { stage: 0, text: '    this.left = null;' },\n  { stage: 0, text: '    this.right = null;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class BinarySearchTree {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.root = null;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '  traverseLevelOrderBfs(node = this.root, callback = this.callback) {' },\n  { stage: 1, text: '    const queue = [];' },\n  { stage: 1, text: '    if (!node) {' },\n  { stage: 1, text: '      return;' },\n  { stage: 1, text: '    }' },\n  { stage: 2, text: '    queue.push(node);' },\n  { stage: 0, text: '' },\n  { stage: 2, text: '    while (queue.length) {' },\n  { stage: 3, text: '      const temp = queue.shift();' },\n  { stage: 3, text: '      callback(temp.value);' },\n  { stage: 4, text: '      if (temp.left) {' },\n  { stage: 4, text: '        queue.push(temp.left);' },\n  { stage: 4, text: '      }' },\n  { stage: 5, text: '      if (temp.right) {' },\n  { stage: 5, text: '        queue.push(temp.right);' },\n  { stage: 5, text: '      }' },\n  { stage: 2, text: '    }' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 46,\n  problemName: 'Implement a **traverseLevelOrderBfs** method in a *BinarySearchTree* class.',\n  problemText:\n    'Write a **traverseLevelOrderBfs** method in a *BinarySearchTree* class that traverses a tree iteratively and runs the supplied `callback` function on each node value.',\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const tree=new BinarySearchTree();`,\n      evaluate: `Boolean(tree);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'proper bfs',\n      inherit: [1],\n      code: `tree.insert(5);tree.insert(3);tree.insert(11);tree.insert(0);tree.insert(7);tree.insert(2);tree.traverseLevelOrderBfs();`,\n      evaluate: `JSON.stringify(tree.tempNodeList);`,\n      expected: JSON.stringify([5, 3, 11, 0, 7, 2]),\n    },\n  ],\n  setupCode: `\n  BinarySearchTree.prototype.tempNodeList = [];\n  BinarySearchTree.prototype.callback = function (value) {\n    BinarySearchTree.prototype.tempNodeList.push(value);\n  };\n  BinarySearchTree.prototype.clearTempNodeList = function (value) {\n    BinarySearchTree.prototype.tempNodeList = [];\n  };\n  BinarySearchTree.prototype.insert = function(value) {\n    const thisNode = new BinarySearchTreeNode(value);\n    if (!this.root) {\n      this.root = thisNode;\n    } else {\n      let currentRoot = this.root;\n      while (true) {\n        if (currentRoot.value > value) {\n          if (currentRoot.left != null) {\n            currentRoot = currentRoot.left;\n          } else {\n            currentRoot.left = thisNode;\n            break;\n          }\n        } else if (currentRoot.value < value) {\n          if (currentRoot.right != null) {\n            currentRoot = currentRoot.right;\n          } else {\n            currentRoot.right = thisNode;\n            break;\n          }\n        } else {\n          break;\n        }\n      }\n    }\n  };\n  `,\n  category: BINARY_SEARCH_TREE,\n  type: DATA_STRUCTURE,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150],\n    solutionLines: solution,\n  },\n};\n","import { GRAPH, DATA_STRUCTURE, BEGINNER } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class Vertex {' },\n  { stage: 0, text: '  constructor(key) {' },\n  { stage: 0, text: '    this.key = key;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class Edge {' },\n  { stage: 0, text: '  constructor(weight) {' },\n  { stage: 0, text: '    this.weight = weight;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class Graph {' },\n  { stage: 0, text: '  constructor(isDirected = true) {' },\n  { stage: 0, text: '    this.isDirected = isDirected === true;' },\n  { stage: 0, text: '    this.adjList = {};' },\n  { stage: 0, text: '    this.vertices = {};  // { \"vertexKey\": Vertex }' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  addVertex(vertexKey) {' },\n  { stage: 2, text: '    const vertex = new Vertex(vertexKey);' },\n  { stage: 2, text: '    this.vertices[vertexKey] = vertex;' },\n  { stage: 2, text: '' },\n  { stage: 3, text: '    if (!this.adjList[vertexKey]) {' },\n  { stage: 3, text: '      this.adjList[vertexKey] = {};' },\n  { stage: 3, text: '    }' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 47,\n  problemName: `Implement the **addVertex** method for a *Graph* class.`,\n  problemText: `Implement an **addVertex** method that accepts a string \\`vertexKey\\` key, with no return value.  \n  Implementation involves:\n   - Create a Vertex node, and add it to the \\`vertices\\` lookup.\n   - Create a blank object entry in the adjacencyList \\`adjList\\` if there is not an existing entry for that node.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const graph=new Graph();`,\n      evaluate: `Boolean(graph);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'add single vertex, check vertices inventory',\n      inherit: [1],\n      code: `graph.addVertex('A');`,\n      evaluate: `graph.vertices['A'].key;`,\n      expected: 'A',\n    },\n    {\n      id: 3,\n      name: 'adds single vertex, check adjacency list',\n      inherit: [1, 2],\n      code: ``,\n      evaluate: `JSON.stringify(graph.adjList['A']);`,\n      expected: JSON.stringify({}),\n    },\n    {\n      id: 4,\n      name: 'if already exists, do not clear place in adjacency list',\n      inherit: [1, 2],\n      code: `graph.addVertex('B');graph.addEdge('A','B');graph.addVertex('A');`,\n      evaluate: `JSON.stringify(graph.adjList['A']) !== JSON.stringify({});`,\n      expected: true,\n    },\n  ],\n  setupCode: `\n  Graph.prototype.addEdge = function(startVertexKey, endVertexKey, edgeWeight = 1) {\n    if (!this.vertices[startVertexKey]) {\n      this.addVertex(startVertexKey);\n    }\n    if (!this.vertices[endVertexKey]) {\n      this.addVertex(endVertexKey);\n    }\n    const edge = new Edge(edgeWeight);\n    this.adjList[startVertexKey][endVertexKey] = edge;\n    if (!this.isDirected) {\n      this.adjList[endVertexKey][startVertexKey] = edge;\n    }\n  };\n  `,\n  category: GRAPH,\n  type: DATA_STRUCTURE,\n  difficulty: BEGINNER,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 120],\n    solutionLines: solution,\n  },\n};\n","import { GRAPH, DATA_STRUCTURE, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class Vertex {' },\n  { stage: 0, text: '  constructor(key) {' },\n  { stage: 0, text: '    this.key = key;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class Edge {' },\n  { stage: 0, text: '  constructor(weight) {' },\n  { stage: 0, text: '    this.weight = weight;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class Graph {' },\n  { stage: 0, text: '  constructor(isDirected = true) {' },\n  { stage: 0, text: '    this.isDirected = isDirected === true;' },\n  { stage: 0, text: '    this.adjList = {};' },\n  { stage: 0, text: '    this.vertices = {};' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: -1, text: '  // IMPLEMENTED: addVertex(key: string) void' },\n  { stage: -1, text: '' },\n  { stage: 1, text: '  addEdge(startVertexKey, endVertexKey, edgeWeight = 1) {' },\n  { stage: 2, text: '    if (!this.vertices[startVertexKey]) {' },\n  { stage: 2, text: '      this.addVertex(startVertexKey);' },\n  { stage: 2, text: '    }' },\n  { stage: 2, text: '' },\n  { stage: 3, text: '    if (!this.vertices[endVertexKey]) {' },\n  { stage: 3, text: '      this.addVertex(endVertexKey);' },\n  { stage: 3, text: '    }' },\n  { stage: 3, text: '' },\n  { stage: 4, text: '    const edge = new Edge(edgeWeight);' },\n  { stage: 4, text: '' },\n  { stage: 4, text: '    this.adjList[startVertexKey][endVertexKey] = edge;' },\n  { stage: 4, text: '' },\n  { stage: 5, text: '    if (!this.isDirected) {' },\n  { stage: 5, text: '      this.adjList[endVertexKey][startVertexKey] = edge;' },\n  { stage: 5, text: '    }' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 48,\n  problemName: `Implement the **addEdge** method for a *Graph* class.`,\n  problemText: `Implement an **addEdge** method that accepts a \\`startingVertex\\` key (string) and an \\`endingVertex\\` key (string) and an optional \\`edgeWeight\\` (int, defaults to 1), with no return value.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const graph=new Graph();`,\n      evaluate: `Boolean(graph);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'creates vertices if they do not exist - start',\n      inherit: [1],\n      code: `graph.addEdge('A', 'B', 2);`,\n      evaluate: `Boolean(graph.vertices['A']);`,\n      expected: true,\n    },\n    {\n      id: 3,\n      name: 'creates vertices if they do not exist - end',\n      inherit: [1, 2],\n      code: ``,\n      evaluate: `Boolean(graph.vertices['B']);`,\n      expected: true,\n    },\n    {\n      id: 4,\n      name: 'sets the proper edge weight',\n      inherit: [1, 2],\n      code: ``,\n      evaluate: `graph.adjList['A']['B'].weight;`,\n      expected: 2,\n    },\n    {\n      id: 5,\n      name: 'defaults to 1 if edge weight is not given',\n      inherit: [1],\n      code: `graph.addEdge('A', 'B');`,\n      evaluate: `graph.adjList['A']['B'].weight;`,\n      expected: 1,\n    },\n    {\n      id: 6,\n      name: 'creates reverse path if not a directed network',\n      inherit: [],\n      code: `const graph=new Graph(false);graph.addEdge('A', 'B', 2);`,\n      evaluate: `graph.adjList['B']['A'].weight;`,\n      expected: 2,\n    },\n  ],\n  setupCode: `\n  Graph.prototype.addVertex = function (key) {\n    const vertex = new Vertex(key);\n    this.vertices[key] = vertex;\n    if (!this.adjList[key]) {\n      this.adjList[key] = {};\n    }\n  };\n  `,\n  category: GRAPH,\n  type: DATA_STRUCTURE,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 180],\n    solutionLines: solution,\n  },\n};\n","import { GRAPH, DATA_STRUCTURE, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class Vertex {' },\n  { stage: 0, text: '  constructor(key) {' },\n  { stage: 0, text: '    this.key = key;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class Edge {' },\n  { stage: 0, text: '  constructor(weight) {' },\n  { stage: 0, text: '    this.weight = weight;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class Graph {' },\n  { stage: 0, text: '  constructor(isDirected = true) {' },\n  { stage: 0, text: '    this.isDirected = isDirected === true;' },\n  { stage: 0, text: '    this.adjList = {};' },\n  { stage: 0, text: '    this.vertices = {};' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  deleteVertex(vertexKey) {' },\n  { stage: 2, text: '    delete this.vertices[vertexKey];' },\n  { stage: 2, text: '    delete this.adjList[vertexKey];' },\n  { stage: 3, text: '    for (let key of Object.keys(this.adjList)) {' },\n  { stage: 4, text: '      for (let vk of Object.keys(this.adjList[key])) {' },\n  { stage: 5, text: '        if (vk === vertexKey) {' },\n  { stage: 5, text: '          delete this.adjList[key][vk];' },\n  { stage: 5, text: '        }' },\n  { stage: 4, text: '      }' },\n  { stage: 3, text: '    }' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 49,\n  problemName: `Implement the **deleteVertex** method for a *Graph* class.`,\n  problemText: `Implement a **deleteVertex** method that accepts a \\`vertexKey\\` (string), with no return value.  You must delete all items in the adjacency list which use that vertex.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const graph=new Graph();`,\n      evaluate: `Boolean(graph);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'add, then delete vertex',\n      inherit: [1],\n      code: `graph.addVertex('A');graph.deleteVertex('A');`,\n      evaluate: `Boolean(graph.vertices['A']);`,\n      expected: false,\n    },\n    {\n      id: 3,\n      name: 'add edge, make sure vertex is deleted from AdjList',\n      inherit: [1],\n      code: `graph.addEdge('A','B');graph.deleteVertex('A');`,\n      evaluate: `graph.adjList['A'] === undefined;`,\n      expected: true,\n    },\n    {\n      id: 4,\n      name: 'removed from reverse side of AdjList',\n      inherit: [],\n      code: `const graph=new Graph(false);graph.addEdge('A','B');graph.deleteVertex('A');`,\n      evaluate: `JSON.stringify(graph.adjList['B']);`,\n      expected: JSON.stringify({}),\n    },\n  ],\n  setupCode: `\n  Graph.prototype.addVertex = function(key) {\n    const vertex = new Vertex(key);\n    this.vertices[key] = vertex;\n    if (!this.adjList[key]) {\n      this.adjList[key] = {};\n    }\n  };\n  Graph.prototype.addEdge = function(startVertexKey, endVertexKey, edgeWeight = 1) {\n    if (!this.vertices[startVertexKey]) {\n      this.addVertex(startVertexKey);\n    }\n    if (!this.vertices[endVertexKey]) {\n      this.addVertex(endVertexKey);\n    }\n    const edge = new Edge(edgeWeight);\n    this.adjList[startVertexKey][endVertexKey] = edge;\n    if (!this.isDirected) {\n      this.adjList[endVertexKey][startVertexKey] = edge;\n    }\n  };\n  `,\n  category: GRAPH,\n  type: DATA_STRUCTURE,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 180],\n    solutionLines: solution,\n  },\n};\n","import { GRAPH, DATA_STRUCTURE, BEGINNER } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class Vertex {' },\n  { stage: 0, text: '  constructor(key) {' },\n  { stage: 0, text: '    this.key = key;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class Edge {' },\n  { stage: 0, text: '  constructor(weight) {' },\n  { stage: 0, text: '    this.weight = weight;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class Graph {' },\n  { stage: 0, text: '  constructor(isDirected = true) {' },\n  { stage: 0, text: '    this.isDirected = isDirected === true;' },\n  { stage: 0, text: '    this.adjList = {};' },\n  { stage: 0, text: '    this.vertices = {};' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  deleteEdge(startVertexKey, endVertexKey) {' },\n  { stage: 2, text: '    if (this.adjList[startVertexKey]) {' },\n  { stage: 2, text: '      delete this.adjList[startVertexKey][endVertexKey];' },\n  { stage: 2, text: '    }' },\n  { stage: 2, text: '' },\n  { stage: 3, text: '    if (!this.isDirected && this.adjList[endVertexKey]) {' },\n  { stage: 3, text: '      delete this.adjList[endVertexKey][startVertexKey];' },\n  { stage: 3, text: '    }' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 50,\n  problemName: `Implement the **deleteEdge** method for a *Graph* class.`,\n  problemText: `Implement a **deleteEdge** method that accepts a \\`startingVertex\\` key (string) and an \\`endingVertex\\` key (string), with no return value.  Account for directed and undirected graphs.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const graph=new Graph();`,\n      evaluate: `Boolean(graph);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'add edge, then delete. Check edge.',\n      inherit: [1],\n      code: `graph.addEdge('A', 'B');graph.deleteEdge('A', 'B');`,\n      evaluate: `Boolean(graph.adjList['A'] && graph.adjList['A']['B']);`,\n      expected: false,\n    },\n    {\n      id: 3,\n      name: 'add edge, then delete. Check reverse edge on undirected graph.',\n      inherit: [],\n      code: `const graph=new Graph(false);graph.addEdge('A', 'B');graph.deleteEdge('A', 'B');`,\n      evaluate: `Boolean(graph.adjList['B'] && graph.adjList['B']['A']);`,\n      expected: false,\n    },\n    {\n      id: 4,\n      name: 'trying to delete edge that does not exist should not throw error.',\n      inherit: [],\n      code: `const graph=new Graph();`,\n      evaluate: `graph.deleteEdge('A', 'B');`,\n      expected: undefined,\n    },\n    {\n      id: 5,\n      name: 'trying to delete reverse edge that does not exist should not throw error.',\n      inherit: [],\n      code: `const graph=new Graph(false);`,\n      evaluate: `graph.deleteEdge('A', 'B');`,\n      expected: undefined,\n    },\n  ],\n  setupCode: `\n  Graph.prototype.addVertex = function(key) {\n    const vertex = new Vertex(key);\n    this.vertices[key] = vertex;\n    if (!this.adjList[key]) {\n      this.adjList[key] = {};\n    }\n  };\n  Graph.prototype.addEdge = function(startVertexKey, endVertexKey, edgeWeight = 1) {\n    if (!this.vertices[startVertexKey]) {\n      this.addVertex(startVertexKey);\n    }\n    if (!this.vertices[endVertexKey]) {\n      this.addVertex(endVertexKey);\n    }\n    const edge = new Edge(edgeWeight);\n    this.adjList[startVertexKey][endVertexKey] = edge;\n    if (!this.isDirected) {\n      this.adjList[endVertexKey][startVertexKey] = edge;\n    }\n  };\n  `,\n  category: GRAPH,\n  type: DATA_STRUCTURE,\n  difficulty: BEGINNER,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 120],\n    solutionLines: solution,\n  },\n};\n","import { GRAPH, DATA_STRUCTURE, ADVANCED } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class Vertex {' },\n  { stage: 0, text: '  constructor(key) {' },\n  { stage: 0, text: '    this.key = key;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class Edge {' },\n  { stage: 0, text: '  constructor(weight) {' },\n  { stage: 0, text: '    this.weight = weight;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class Graph {' },\n  { stage: 0, text: '  constructor(isDirected = true) {' },\n  { stage: 0, text: '    this.isDirected = isDirected === true;' },\n  { stage: 0, text: '    this.adjList = {};' },\n  { stage: 0, text: '    this.vertices = {};' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: -1, text: '  // IMPLEMENTED: callback(vertex: Vertex) void' },\n  { stage: -1, text: '' },\n  { stage: 0, text: '  dfs(startVertexKey, callback = this.callback) {' },\n  { stage: 1, text: '    const visited = {};' },\n  { stage: 0, text: '' },\n  { stage: 2, text: '    const traverseDfs = vertex => {' },\n  { stage: 3, text: '      visited[vertex] = true;' },\n  { stage: 3, text: '      callback(vertex);' },\n  { stage: 4, text: '      for (let adjacent of Object.keys(this.adjList[vertex] || [])) {' },\n  { stage: 5, text: '        if (!visited[adjacent]) {' },\n  { stage: 5, text: '          traverseDfs(adjacent);' },\n  { stage: 5, text: '        }' },\n  { stage: 4, text: '      }' },\n  { stage: 2, text: '    };' },\n  { stage: 6, text: '' },\n  { stage: 6, text: '    traverseDfs(startVertexKey);' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 51,\n  problemName: `Implement a recursive **dfs** (depth first search) method for a *Graph* class.`,\n  problemText: `Implement a **dfs** method that accepts a \\`startingVertex\\` key (string) and a \\`callback\\` function (supplied) to be run on each graph node.  **Use recursion!**`,\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const graph=new Graph();`,\n      evaluate: `Boolean(graph);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'dfs network 1',\n      inherit: [1],\n      code: `graph.addEdge('42', '41');graph.addEdge('42', '50');graph.addEdge('41', '10');graph.addEdge('41', '40');graph.addEdge('50', '45');graph.addEdge('50', '75');graph.dfs('42');`,\n      evaluate: `JSON.stringify(graph.tempSet);`,\n      expected: JSON.stringify(['42', '41', '10', '40', '50', '45', '75']),\n    },\n    {\n      id: 3,\n      name: 'dfs network 2',\n      inherit: [1],\n      code: `graph.addEdge('A', 'B');graph.addEdge('B', 'C');graph.addEdge('B', 'E');graph.addEdge('C', 'D');graph.addEdge('D', 'G');graph.addEdge('D', 'F');graph.addEdge('G', 'H');graph.addEdge('F', 'J');graph.dfs('A');`,\n      evaluate: `JSON.stringify(graph.tempSet);`,\n      expected: JSON.stringify(['A', 'B', 'C', 'D', 'G', 'H', 'F', 'J', 'E']),\n    },\n  ],\n  setupCode: `\n  Graph.prototype.tempSet = [];\n  Graph.prototype.callback = function(key) {\n    Graph.prototype.tempSet.push(key);\n  };\n  Graph.prototype.addVertex = function(key) {\n    const vertex = new Vertex(key);\n    this.vertices[key] = vertex;\n    if (!this.adjList[key]) {\n      this.adjList[key] = {};\n    }\n  };\n  Graph.prototype.addEdge = function(startVertexKey, endVertexKey, edgeWeight = 1) {\n    if (!this.vertices[startVertexKey]) {\n      this.addVertex(startVertexKey);\n    }\n    if (!this.vertices[endVertexKey]) {\n      this.addVertex(endVertexKey);\n    }\n\n    const edge = new Edge(edgeWeight);\n\n    this.adjList[startVertexKey][endVertexKey] = edge;\n\n    if (!this.isDirected) {\n      this.adjList[endVertexKey][startVertexKey] = edge;\n    }\n  };\n  `,\n  category: GRAPH,\n  type: DATA_STRUCTURE,\n  difficulty: ADVANCED,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 210],\n    solutionLines: solution,\n  },\n};\n","import { GRAPH, DATA_STRUCTURE, ADVANCED } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class Vertex {' },\n  { stage: 0, text: '  constructor(key) {' },\n  { stage: 0, text: '    this.key = key;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class Edge {' },\n  { stage: 0, text: '  constructor(weight) {' },\n  { stage: 0, text: '    this.weight = weight;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class Graph {' },\n  { stage: 0, text: '  constructor(isDirected = true) {' },\n  { stage: 0, text: '    this.isDirected = isDirected === true;' },\n  { stage: 0, text: '    this.adjList = {};' },\n  { stage: 0, text: '    this.vertices = {};' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: -1, text: '  // IMPLEMENTED: callback(vertex: Vertex) void' },\n  { stage: -1, text: '' },\n  { stage: 0, text: '  dfs(startVertexKey, callback = this.callback) {' },\n  { stage: 1, text: '    const stack = [];' },\n  { stage: 1, text: '    const visited = {};' },\n  { stage: 1, text: '    stack.push(startVertexKey);' },\n  { stage: 0, text: '' },\n  { stage: 2, text: '    while (stack.length) {' },\n  { stage: 3, text: '      const vertexKey = stack.pop();' },\n  { stage: 3, text: '      if (!visited[vertexKey]) {' },\n  { stage: 4, text: '        callback(vertexKey);' },\n  { stage: 4, text: '        visited[vertexKey] = true;' },\n  { stage: 5, text: '        for (let adjacent of Object.keys(this.adjList[vertexKey] || {})) {' },\n\n  { stage: 5, text: '          stack.push(adjacent);' },\n  { stage: 5, text: '        }' },\n  { stage: 3, text: '      }' },\n  { stage: 2, text: '    }' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 56,\n  problemName: `Implement an iterative **dfs** (depth first search) method for a *Graph* class.`,\n  problemText: `Implement a **dfs** method that accepts a \\`startingVertex\\` key (string) and a \\`callback\\` function (supplied) to be run on each graph node.  **Implement iteratively!**`,\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const graph=new Graph();`,\n      evaluate: `Boolean(graph);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'dfs network 1',\n      inherit: [1],\n      code: `graph.addEdge('42', '41');graph.addEdge('42', '50');graph.addEdge('41', '10');graph.addEdge('41', '40');graph.addEdge('50', '45');graph.addEdge('50', '75');graph.dfs('42');`,\n      evaluate: `JSON.stringify(graph.tempSet);`,\n      expected: JSON.stringify(['42', '50', '75', '45', '41', '40', '10']),\n    },\n    {\n      id: 3,\n      name: 'dfs network 2',\n      inherit: [1],\n      code: `graph.addEdge('A', 'B');graph.addEdge('B', 'C');graph.addEdge('B', 'E');graph.addEdge('C', 'D');graph.addEdge('D', 'G');graph.addEdge('D', 'F');graph.addEdge('G', 'H');graph.addEdge('F', 'J');graph.dfs('A');`,\n      evaluate: `JSON.stringify(graph.tempSet);`,\n      expected: JSON.stringify(['A', 'B', 'E', 'C', 'D', 'F', 'J', 'G', 'H']),\n    },\n  ],\n  setupCode: `\n  Graph.prototype.tempSet = [];\n  Graph.prototype.callback = function(key) {\n    Graph.prototype.tempSet.push(key);\n  };\n  Graph.prototype.addVertex = function(key) {\n    const vertex = new Vertex(key);\n    this.vertices[key] = vertex;\n    if (!this.adjList[key]) {\n      this.adjList[key] = {};\n    }\n  };\n  Graph.prototype.addEdge = function(startVertexKey, endVertexKey, edgeWeight = 1) {\n    if (!this.vertices[startVertexKey]) {\n      this.addVertex(startVertexKey);\n    }\n    if (!this.vertices[endVertexKey]) {\n      this.addVertex(endVertexKey);\n    }\n\n    const edge = new Edge(edgeWeight);\n\n    this.adjList[startVertexKey][endVertexKey] = edge;\n\n    if (!this.isDirected) {\n      this.adjList[endVertexKey][startVertexKey] = edge;\n    }\n  };\n  `,\n  category: GRAPH,\n  type: DATA_STRUCTURE,\n  difficulty: ADVANCED,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 180],\n    solutionLines: solution,\n  },\n};\n","//\n\nimport { data as _ll_prepend } from './linked-list/1-prepend.js';\nimport { data as _ll_append } from './linked-list/2-append.js';\nimport { data as _ll_delete } from './linked-list/3-delete.js';\nimport { data as _ll_find } from './linked-list/4-find.js';\nimport { data as _ll_deleteTail } from './linked-list/5-deleteTail.js';\nimport { data as _ll_deleteHead } from './linked-list/6-deleteHead.js';\nimport { data as _ll_fromArray } from './linked-list/7-fromArray.js';\nimport { data as _ll_toArray } from './linked-list/8-toArray.js';\nimport { data as _ll_reverse } from './linked-list/9-reverse.js';\nimport { data as _dll_prepend } from './doubly-linked-list/10-prepend.js';\nimport { data as _dll_append } from './doubly-linked-list/11-append.js';\nimport { data as _dll_delete } from './doubly-linked-list/12-delete.js';\nimport { data as _dll_find } from './doubly-linked-list/13-find.js';\nimport { data as _dll_deleteTail } from './doubly-linked-list/14-deleteTail.js';\nimport { data as _dll_deleteHead } from './doubly-linked-list/15-deleteHead.js';\nimport { data as _dll_fromArray } from './doubly-linked-list/16-fromArray.js';\nimport { data as _dll_toArray } from './doubly-linked-list/17-toArray.js';\nimport { data as _dll_reverse } from './doubly-linked-list/18-reverse.js';\nimport { data as _alg_fibonnaci_recursive } from './algorithms/19-fibonacci-recursive.js';\nimport { data as _alg_fibonnaci_iterative } from './algorithms/20-fibonacci-iterative.js';\nimport { data as _queue_implement_ll } from './queue/21-implement-from-ll.js';\nimport { data as _queue_implement_array } from './queue/22-implement-from-array.js';\nimport { data as _stack_implement_ll } from './stack/23-implement-from-ll.js';\nimport { data as _stack_implement_array } from './stack/24-implement-from-array.js';\nimport { data as _ht_implement_set } from './hash-table/25-implement-set.js';\nimport { data as _ht_implement_get } from './hash-table/26-implement-get.js';\nimport { data as _ht_implement_delete } from './hash-table/27-implement-delete.js';\nimport { data as _heap_child_functions } from './heap/28-child-functions.js';\nimport { data as _heap_parent_functions } from './heap/29-parent-functions.js';\nimport { data as _heap_peek } from './heap/30-peek.js';\nimport { data as _heap_find } from './heap/31-find.js';\nimport { data as _heap_poll } from './heap/32-poll.js';\nimport { data as _heap_add } from './heap/33-add.js';\nimport { data as _heap_remove } from './heap/34-remove.js';\nimport { data as _heap_heapifyUp } from './heap/35-heapifyUp.js';\nimport { data as _heap_heapifyDown } from './heap/36-heapifyDown.js';\nimport { data as _bst_insert } from './binary-search-tree/37-insert.js';\nimport { data as _bst_search } from './binary-search-tree/38-search.js';\nimport { data as _bst_delete } from './binary-search-tree/39-delete.js';\nimport { data as _bst_pre_order_iter } from './binary-search-tree/40-pre-order-iterative.js';\nimport { data as _bst_pre_order_rec } from './binary-search-tree/41-pre-order-recursive.js';\nimport { data as _bst_in_order_iter } from './binary-search-tree/42-in-order-iterative.js';\nimport { data as _bst_in_order_rec } from './binary-search-tree/43-in-order-recursive.js';\nimport { data as _bst_post_order_iter } from './binary-search-tree/44-post-order-iterative.js';\nimport { data as _bst_post_order_rec } from './binary-search-tree/45-post-order-recursive.js';\nimport { data as _bst_level_order_bfs } from './binary-search-tree/46-level-order-bfs.js';\nimport { data as _graph_add_vertex } from './graph/47-add-vertex.js';\nimport { data as _graph_add_edge } from './graph/48-add-edge.js';\nimport { data as _graph_delete_vertex } from './graph/49-delete-vertex.js';\nimport { data as _graph_delete_edge } from './graph/50-delete-edge.js';\nimport { data as _graph_dfs_recursive } from './graph/51-dfs-recursive.js';\nimport { data as _graph_dfs_iterative } from './graph/56-dfs-iterative.js';\nimport { data as _graph_bfs } from './graph/52-bfs.js';\nimport { data as _graph_detect_cycle } from './graph/57-detect-cycle.js';\nimport { data as _graph_check_path } from './graph/58-check-path-exists.js';\nimport { data as _graph_shortest_path_simple } from './graph/59-shortest-path-simple.js';\nimport { data as _trie_insert } from './trie/53-insert.js';\nimport { data as _trie_search } from './trie/54-search.js';\nimport { data as _trie_delete } from './trie/55-delete.js';\nimport { data as _binary_search_recursive } from './algorithms/60-binary-search-recursive.js';\nimport { data as _binary_search_iterative } from './algorithms/61-binary-search-iterative.js';\nimport { data as _sort_quicksort } from './sort/62-quicksort.js';\nimport { data as _sort_mergesort } from './sort/63-mergesort.js';\nimport { data as _two_sum } from './algorithms/64-two-sum.js';\nimport { data as _minimum_rectangle } from './algorithms/65-minimum-rectangle.js';\nimport { data as _lru_cache } from './cache/66-lru-cache.js';\nimport { data as _basic_calc_parentheses } from './stack/67-basic-calc-parentheses.js';\nimport { data as _recursion_word_search } from './algorithms/68-word-search.js';\nimport { data as _reorder_list } from './linked-list/69-reorder-list.js';\nimport { data as _anagrams_in_string } from './algorithms/70-anagrams-in-string.js';\nimport { data as _randomized_set } from './algorithms/71-randomized-set.js';\nimport { data as _minimum_path_sum } from './dp/72-minimum_path_sum.js';\nimport { data as _number_of_islands } from './algorithms/73-number-of-islands.js';\nimport { data as _decode_ways_recursive } from './dp/74-decode-ways-recursive.js';\nimport { data as _add_two_numbers } from './linked-list/75-add-two-numbers.js';\nimport { data as _merge_intervals } from './algorithms/76-merge-intervals.js';\nimport { data as _best_time_stock } from './algorithms/77-best-time-stock.js';\nimport { data as _product_except_self } from './algorithms/78-product-except-self.js';\nimport { data as _shortest_path_binary_matrix } from './graph/79-shortest-path-binary-matrix.js';\nimport { data as _palindrome_linked_list } from './linked-list/80-palindrome-linked-list.js';\nimport { data as _verify_alien_dictionary } from './algorithms/81-verify-alien-dictionary.js';\nimport { data as _length_longest_substring } from './algorithms/82-length-longest-substring.js';\nimport { data as _meeting_rooms_2 } from './algorithms/83-meeting-rooms-2.js';\nimport { data as _design_metro_system } from './design/84-design-metro-system.js';\nimport { data as _maximal_square } from './dp/85-maximal-square.js';\n\nimport { data as _find_avg_subarrays } from './sliding-window/86-find-avg-of-subarrays.js';\nimport { data as _find_max_subarrays } from './sliding-window/87-find-max-of-subarrays.js';\nimport { data as _smallest_subarray } from './sliding-window/88-smallest-subarray-given-sum.js';\nimport { data as _longest_substr_k_distinct } from './sliding-window/89-longest-substr-k-distinct.js';\nimport { data as _fruits_into_basket } from './sliding-window/90-fruits-into-basket.js';\nimport { data as _no_repeat_substr } from './sliding-window/91-no-repeat-substring.js';\nimport { data as _longest_substr_same_letter } from './sliding-window/92-longest-substr-same-letter.js';\nimport { data as _longest_binary_subarray } from './sliding-window/93-longest-binary-subarray-after-repl.js';\nimport { data as _permutation_in_a_str } from './sliding-window/94-permutation-in-a-string.js';\nimport { data as _string_anagrams } from './sliding-window/95-string-anagrams.js';\nimport { data as _smallest_window_count_substr } from './sliding-window/96-smallest-window-count-substr.js';\nimport { data as _words_concat } from './sliding-window/97-words-concatenation.js';\nimport { data as _bitwise_xor } from './educative/98-bitwise-xor.js';\nimport { data as _cyclic_sort } from './educative/99-cyclic-sort.js';\nimport { data as _find_missing_number } from './educative/100-find-missing-number.js';\nimport { data as _find_all_missing_numbers } from './educative/101-find-all-missing-numbers.js';\nimport { data as _find_duplicate_number } from './educative/102-find-duplicate-number.js';\nimport { data as _find_all_duplicate_numbers } from './educative/103-find-all-duplicate-numbers.js';\nimport { data as _knapsack } from './educative/104-knapsack.js';\nimport { data as _linked_list_cycle } from './educative/105-linked-list-cycle.js';\nimport { data as _middle_linked_list } from './educative/106-middle-of-linked-list.js';\nimport { data as _merge_k_sorted_lists } from './educative/107-merge-k-sorted-lists.js';\nimport { data as _insert_intervals } from './educative/108-insert-intervals.js';\nimport { data as _order_agnostic_binary_search } from './educative/109-order-agnostic-binary-search.js';\nimport { data as _bitonic_array_max } from './educative/110-bitonic-array-maximum.js';\nimport { data as _reverse_sub_list } from './educative/111-reverse-sub-list.js';\nimport { data as _subsets } from './educative/112-subsets.js';\nimport { data as _subsets_with_duplicates } from './educative/113-subsets-with-duplicates.js';\nimport { data as _top_k_numbers } from './educative/114-top-k-numbers.js';\nimport { data as _kth_smallest_number } from './educative/115-kth-smallest-number.js';\nimport { data as _k_closest_pts } from './educative/116-k-closest-pts.js';\nimport { data as _connect_ropes } from './educative/117-connect-ropes.js';\nimport { data as _topological_sort } from './educative/118-topological-sort.js';\nimport { data as _binary_tree_level_order } from './educative/119-binary-tree-level-order-traversal.js';\nimport { data as _reverse_level_order } from './educative/120-reverse-level-order-traversal.js';\nimport { data as _level_averages } from './educative/121-level-averages.js';\nimport { data as _min_depth_binary_tree } from './educative/122-minimum-depth-binary-tree.js';\nimport { data as _level_order_successor } from './educative/123-level-order-successor.js';\nimport { data as _binary_tree_path_sum } from './educative/124-binary-tree-path-sum.js';\nimport { data as _find_median_stream } from './educative/125-find-median-stream.js';\nimport { data as _pair_with_target_sum } from './educative/126-pair-with-target-sum.js';\nimport { data as _remove_duplicates } from './educative/127-remove-duplicates.js';\nimport { data as _squaring_sorted_array } from './educative/128-squaring-sorted-array.js';\n\nconst aggregate = {\n  1: _ll_prepend,\n  2: _ll_append,\n  3: _ll_delete,\n  4: _ll_find,\n  5: _ll_deleteTail,\n  6: _ll_deleteHead,\n  7: _ll_fromArray,\n  8: _ll_toArray,\n  9: _ll_reverse,\n  10: _dll_prepend,\n  11: _dll_append,\n  12: _dll_delete,\n  13: _dll_find,\n  14: _dll_deleteTail,\n  15: _dll_deleteHead,\n  16: _dll_fromArray,\n  17: _dll_toArray,\n  18: _dll_reverse,\n  19: _alg_fibonnaci_recursive,\n  20: _alg_fibonnaci_iterative,\n  21: _queue_implement_ll,\n  22: _queue_implement_array,\n  23: _stack_implement_ll,\n  24: _stack_implement_array,\n  25: _ht_implement_set,\n  26: _ht_implement_get,\n  27: _ht_implement_delete,\n  28: _heap_child_functions,\n  29: _heap_parent_functions,\n  30: _heap_peek,\n  31: _heap_find,\n  32: _heap_poll,\n  33: _heap_add,\n  34: _heap_remove,\n  35: _heap_heapifyUp,\n  36: _heap_heapifyDown,\n  37: _bst_insert,\n  38: _bst_search,\n  39: _bst_delete,\n  40: _bst_pre_order_iter,\n  41: _bst_pre_order_rec,\n  42: _bst_in_order_iter,\n  43: _bst_in_order_rec,\n  44: _bst_post_order_iter,\n  45: _bst_post_order_rec,\n  46: _bst_level_order_bfs,\n  47: _graph_add_vertex,\n  48: _graph_add_edge,\n  49: _graph_delete_vertex,\n  50: _graph_delete_edge,\n  51: _graph_dfs_recursive,\n  52: _graph_bfs,\n  53: _trie_insert,\n  54: _trie_search,\n  55: _trie_delete,\n  56: _graph_dfs_iterative,\n  57: _graph_detect_cycle,\n  58: _graph_check_path,\n  59: _graph_shortest_path_simple,\n  60: _binary_search_recursive,\n  61: _binary_search_iterative,\n  62: _sort_quicksort,\n  63: _sort_mergesort,\n  64: _two_sum,\n  65: _minimum_rectangle,\n  66: _lru_cache,\n  67: _basic_calc_parentheses,\n  68: _recursion_word_search,\n  69: _reorder_list,\n  70: _anagrams_in_string,\n  71: _randomized_set,\n  72: _minimum_path_sum,\n  73: _number_of_islands,\n  74: _decode_ways_recursive,\n  75: _add_two_numbers,\n  76: _merge_intervals,\n  77: _best_time_stock,\n  78: _product_except_self,\n  79: _shortest_path_binary_matrix,\n  80: _palindrome_linked_list,\n  81: _verify_alien_dictionary,\n  82: _length_longest_substring,\n  83: _meeting_rooms_2,\n  84: _design_metro_system,\n  85: _maximal_square,\n  86: _find_avg_subarrays,\n  87: _find_max_subarrays,\n  88: _smallest_subarray,\n  89: _longest_substr_k_distinct,\n  90: _fruits_into_basket,\n  91: _no_repeat_substr,\n  92: _longest_substr_same_letter,\n  93: _longest_binary_subarray,\n  94: _permutation_in_a_str,\n  95: _string_anagrams,\n  96: _smallest_window_count_substr,\n  97: _words_concat,\n  98: _bitwise_xor,\n  99: _cyclic_sort,\n  100: _find_missing_number,\n  101: _find_all_missing_numbers,\n  102: _find_duplicate_number,\n  103: _find_all_duplicate_numbers,\n  104: _knapsack,\n  105: _linked_list_cycle,\n  106: _middle_linked_list,\n  107: _merge_k_sorted_lists,\n  108: _insert_intervals,\n  109: _order_agnostic_binary_search,\n  110: _bitonic_array_max,\n  111: _reverse_sub_list,\n  112: _subsets,\n  113: _subsets_with_duplicates,\n  114: _top_k_numbers,\n  115: _kth_smallest_number,\n  116: _k_closest_pts,\n  117: _connect_ropes,\n  118: _topological_sort,\n  119: _binary_tree_level_order,\n  120: _reverse_level_order,\n  121: _level_averages,\n  122: _min_depth_binary_tree,\n  123: _level_order_successor,\n  124: _binary_tree_path_sum,\n  125: _find_median_stream,\n  126: _pair_with_target_sum,\n  127: _remove_duplicates,\n  128: _squaring_sorted_array,\n};\n\nlet maxEffort = 0;\n\n// add a computed 'effort' property; estimated code lines to write\nObject.keys(aggregate).forEach(key => {\n  const item = aggregate[key];\n  const solutionLines = item.solution.solutionLines;\n\n  let effortCount = 0;\n  solutionLines.forEach(line => {\n    if (line.stage > 0) {\n      effortCount++;\n    }\n  });\n\n  if (effortCount > maxEffort) {\n    maxEffort = effortCount;\n  }\n\n  aggregate[key].effort = effortCount;\n});\n\n// todo shuttle this off to constants.js\nexport const MIN_EFFORT = 0;\nexport const MAX_EFFORT = maxEffort;\n\nexport const inventory = aggregate;\n\nexport const categories = Array.from(\n  new Set(Object.keys(aggregate).map(key => aggregate[key].category)),\n).sort();\n","import { GRAPH, DATA_STRUCTURE, ADVANCED } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class Vertex {' },\n  { stage: 0, text: '  constructor(key) {' },\n  { stage: 0, text: '    this.key = key;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class Edge {' },\n  { stage: 0, text: '  constructor(weight) {' },\n  { stage: 0, text: '    this.weight = weight;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class Graph {' },\n  { stage: 0, text: '  constructor(isDirected = true) {' },\n  { stage: 0, text: '    this.isDirected = isDirected === true;' },\n  { stage: 0, text: '    this.adjList = {};' },\n  { stage: 0, text: '    this.vertices = {};' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: -1, text: '  // IMPLEMENTED: callback(vertex: Vertex) void' },\n  { stage: -1, text: '' },\n  { stage: 0, text: '  bfs(startVertexKey, callback = this.callback) {' },\n  { stage: 1, text: '    const queue = [];' },\n  { stage: 1, text: '    const visited = {};' },\n  { stage: 1, text: '    queue.push(startVertexKey);' },\n  { stage: 1, text: '' },\n  { stage: 2, text: '    while (queue.length) {' },\n  { stage: 3, text: '      const vertexKey = queue.shift();' },\n  { stage: 3, text: '      if (!visited[vertexKey]) {' },\n  { stage: 4, text: '        callback(vertexKey);' },\n  { stage: 4, text: '        visited[vertexKey] = true;' },\n  { stage: 5, text: '        for (let adjacent of Object.keys(this.adjList[vertexKey] || {})) {' },\n  { stage: 5, text: '          queue.push(adjacent);' },\n  { stage: 5, text: '        }' },\n  { stage: 3, text: '      }' },\n  { stage: 2, text: '    }' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 52,\n  problemName: `Implement a **bfs** (breadth first search) method for a *Graph* class.`,\n  problemText: `Implement a **bfs** method that accepts a \\`startingVertex\\` key (string) and a \\`callback\\` function (supplied) to be run on each graph node.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const graph=new Graph();`,\n      evaluate: `Boolean(graph);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'bfs network 1',\n      inherit: [1],\n      code: `graph.addEdge('42', '41');graph.addEdge('42', '50');graph.addEdge('41', '10');graph.addEdge('41', '40');graph.addEdge('50', '45');graph.addEdge('50', '75');graph.bfs('42');`,\n      evaluate: `JSON.stringify(graph.tempSet);`,\n      expected: JSON.stringify(['42', '41', '50', '10', '40', '45', '75']),\n    },\n    {\n      id: 3,\n      name: 'bfs network 2',\n      inherit: [1],\n      code: `graph.addEdge('A', 'B');graph.addEdge('B', 'C');graph.addEdge('B', 'E');graph.addEdge('C', 'D');graph.addEdge('D', 'G');graph.addEdge('D', 'F');graph.addEdge('G', 'H');graph.addEdge('F', 'J');graph.bfs('A');`,\n      evaluate: `JSON.stringify(graph.tempSet);`,\n      expected: JSON.stringify(['A', 'B', 'C', 'E', 'D', 'G', 'F', 'H', 'J']),\n    },\n  ],\n  setupCode: `\n  Graph.prototype.tempSet = [];\n  Graph.prototype.callback = function(key) {\n    Graph.prototype.tempSet.push(key);\n  };\n  Graph.prototype.addVertex = function(key) {\n    const vertex = new Vertex(key);\n    this.vertices[key] = vertex;\n    if (!this.adjList[key]) {\n      this.adjList[key] = {};\n    }\n  };\n  Graph.prototype.addEdge = function(startVertexKey, endVertexKey, edgeWeight = 1) {\n    if (!this.vertices[startVertexKey]) {\n      this.addVertex(startVertexKey);\n    }\n    if (!this.vertices[endVertexKey]) {\n      this.addVertex(endVertexKey);\n    }\n\n    const edge = new Edge(edgeWeight);\n\n    this.adjList[startVertexKey][endVertexKey] = edge;\n\n    if (!this.isDirected) {\n      this.adjList[endVertexKey][startVertexKey] = edge;\n    }\n  };\n  `,\n  category: GRAPH,\n  type: DATA_STRUCTURE,\n  difficulty: ADVANCED,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 180],\n    solutionLines: solution,\n  },\n};\n","import { TRIE, DATA_STRUCTURE, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class TrieNode {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.children = {};' },\n  { stage: 0, text: '    this.endOfWord = false;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class Trie {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.root = new TrieNode();' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  insert(word) {' },\n  { stage: 2, text: '    let current = this.root;' },\n  { stage: 2, text: '    for (let i = 0; i < word.length; i++) {' },\n  { stage: 3, text: '      const ch = word.charAt(i);' },\n  { stage: 3, text: '      let node = current.children[ch];' },\n  { stage: 4, text: '      if (node == null) {' },\n  { stage: 5, text: '        node = new TrieNode();' },\n  { stage: 5, text: '        current.children[ch] = node;' },\n  { stage: 4, text: '      }' },\n  { stage: 6, text: '      current = node;' },\n  { stage: 2, text: '    }' },\n  { stage: 6, text: '    current.endOfWord = true;' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 53,\n  problemName: `Implement the **insert** method for a *Trie* class.`,\n  problemText: `Implement an **insert** method that takes a \\`word\\` (string) as a parameter, with no return value.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const trie=new Trie();`,\n      evaluate: `Boolean(trie);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'insert word, search true',\n      inherit: [1],\n      code: `trie.insert('daniel');`,\n      evaluate: `trie.search('daniel');`,\n      expected: true,\n    },\n    {\n      id: 3,\n      name: 'insert word, search half of that word.  return false',\n      inherit: [1, 2],\n      code: ``,\n      evaluate: `trie.search('dan');`,\n      expected: false,\n    },\n  ],\n  setupCode: `\n  Trie.prototype.search = function(word) {\n    let current = this.root;\n    for (let i = 0; i < word.length; i++) {\n      const ch = word.charAt(i);\n      const node = current.children[ch];\n      if (node == null) {\n        return false;\n      }\n      current = node;\n    }\n    return current.endOfWord;\n  };\n  `,\n  category: TRIE,\n  type: DATA_STRUCTURE,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 210],\n    solutionLines: solution,\n  },\n};\n","import { TRIE, DATA_STRUCTURE, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class TrieNode {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.children = {};' },\n  { stage: 0, text: '    this.endOfWord = false;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class Trie {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.root = new TrieNode();' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  search(word) {' },\n  { stage: 2, text: '    let current = this.root;' },\n  { stage: 2, text: '    for (let i = 0; i < word.length; i++) {' },\n  { stage: 3, text: '      const ch = word.charAt(i);' },\n  { stage: 3, text: '      const node = current.children[ch];' },\n  { stage: 4, text: '      if (node == null) {' },\n  { stage: 4, text: '        return false;' },\n  { stage: 4, text: '      }' },\n  { stage: 5, text: '      current = node;' },\n  { stage: 2, text: '    }' },\n  { stage: 5, text: '    return current.endOfWord;' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 54,\n  problemName: `Implement the **search** method for a *Trie* class.`,\n  problemText: `Implement a **search** method that takes in a \\`word\\` (string) and returns a boolean \\`true\\` or \\`false\\` depending on if it can be found in the Trie.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const trie=new Trie();`,\n      evaluate: `Boolean(trie);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'nothing in trie should return false on search',\n      inherit: [1],\n      code: ``,\n      evaluate: `trie.search('');`,\n      expected: false,\n    },\n    {\n      id: 3,\n      name: 'insert word, search true',\n      inherit: [1],\n      code: `trie.insert('daniel');`,\n      evaluate: `trie.search('daniel');`,\n      expected: true,\n    },\n    {\n      id: 4,\n      name: 'insert word, search half of that word.  return false',\n      inherit: [1, 3],\n      code: ``,\n      evaluate: `trie.search('dan');`,\n      expected: false,\n    },\n  ],\n  setupCode: `\n  Trie.prototype.insert = function(word) {\n    let current = this.root;\n    for (let i = 0; i < word.length; i++) {\n      const ch = word.charAt(i);\n      let node = current.children[ch];\n      if (node == null) {\n        node = new TrieNode();\n        current.children[ch] = node;\n      }\n      current = node;\n    }\n    current.endOfWord = true;\n  };\n  `,\n  category: TRIE,\n  type: DATA_STRUCTURE,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 180],\n    solutionLines: solution,\n  },\n};\n","import { TRIE, DATA_STRUCTURE, ADVANCED } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class TrieNode {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.children = {};' },\n  { stage: 0, text: '    this.endOfWord = false;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class Trie {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.root = new TrieNode();' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  delete(word) {' },\n  { stage: 2, text: '    deleteRecursively(this.root, word, 0);' },\n  { stage: 2, text: '' },\n  { stage: 2, text: '    function deleteRecursively(current, word, index) {' },\n  { stage: 3, text: '      if (index === word.length) {' },\n  { stage: 4, text: '        if (!current.endOfWord) {' },\n  { stage: 4, text: '          return false;' },\n  { stage: 4, text: '        }' },\n  { stage: 5, text: '        current.endOfWord = false;' },\n  { stage: 5, text: '        return Object.keys(current.children).length === 0;' },\n  { stage: 3, text: '      }' },\n  { stage: 6, text: '      const ch = word.charAt(index);' },\n  { stage: 6, text: '      const node = current.children[ch];' },\n  { stage: 7, text: '      if (node == null) {' },\n  { stage: 7, text: '        return false;' },\n  { stage: 7, text: '      }' },\n  { stage: 8, text: '      const shouldDelete = deleteRecursively(node, word, index + 1);' },\n  { stage: 8, text: '      if (shouldDelete) {' },\n  { stage: 9, text: '        delete current.children[ch];' },\n  { stage: 9, text: '        return Object.keys(current.children).length === 0;' },\n  { stage: 8, text: '      }' },\n  { stage: 9, text: '      return false;' },\n  { stage: 2, text: '    }' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 55,\n  problemName: `Implement the **delete** method for a *Trie* class.`,\n  problemText: `Implement a **delete** method that takes in a \\`word\\` (string) and removes it from the Trie.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const trie=new Trie();`,\n      evaluate: `Boolean(trie);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'insert, delete.  search is false.',\n      inherit: [1],\n      code: `trie.insert('daniel');trie.insert('david');trie.delete('daniel');`,\n      evaluate: `trie.search('daniel');`,\n      expected: false,\n    },\n    {\n      id: 3,\n      name: 'insert, delete.  search for non-deleted is true.',\n      inherit: [1, 2],\n      code: ``,\n      evaluate: `trie.search('david');`,\n      expected: true,\n    },\n    {\n      id: 4,\n      name: 'delete remaining word.  search should be false.',\n      inherit: [1, 2],\n      code: `trie.delete('david');`,\n      evaluate: `trie.search('david');`,\n      expected: false,\n    },\n  ],\n  setupCode: `\n  Trie.prototype.insert = function(word) {\n    let current = this.root;\n    for (let i = 0; i < word.length; i++) {\n      const ch = word.charAt(i);\n      let node = current.children[ch];\n      if (node == null) {\n        node = new TrieNode();\n        current.children[ch] = node;\n      }\n      current = node;\n    }\n    current.endOfWord = true;\n  };\n  Trie.prototype.search = function(word) {\n    let current = this.root;\n    for (let i = 0; i < word.length; i++) {\n      const ch = word.charAt(i);\n      const node = current.children[ch];\n      if (node == null) {\n        return false;\n      }\n      current = node;\n    }\n    return current.endOfWord;\n  };\n  `,\n  category: TRIE,\n  type: DATA_STRUCTURE,\n  difficulty: ADVANCED,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 300],\n    solutionLines: solution,\n  },\n};\n","import { GRAPH, DATA_STRUCTURE, ADVANCED } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class Vertex {' },\n  { stage: 0, text: '  constructor(key) {' },\n  { stage: 0, text: '    this.key = key;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class Edge {' },\n  { stage: 0, text: '  constructor(weight) {' },\n  { stage: 0, text: '    this.weight = weight;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class Graph {' },\n  { stage: 0, text: '  constructor(isDirected = true) {' },\n  { stage: 0, text: '    this.isDirected = isDirected === true;' },\n  { stage: 0, text: '    this.adjList = {};' },\n  { stage: 0, text: '    this.vertices = {};' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '  detectCycle() {' },\n  { stage: 1, text: '    let visited = {};' },\n  { stage: 1, text: '    let recNodes = {};' },\n  { stage: 0, text: '' },\n  { stage: 3, text: '    for (let key of Object.keys(this.adjList)) {' },\n  { stage: 4, text: '      if (this.detectCycleRec(key, visited, recNodes)) {' },\n  { stage: 5, text: '        return true;' },\n  { stage: 4, text: '      }' },\n  { stage: 3, text: '    }' },\n  { stage: 5, text: '    return false;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 2, text: '  detectCycleRec(key, visited, recNodes) {' },\n  { stage: 3, text: '    if (!visited[key]) {' },\n  { stage: 4, text: '      visited[key] = true;' },\n  { stage: 4, text: '      recNodes[key] = true;' },\n  { stage: 0, text: '' },\n  { stage: 7, text: '      for (let adjacentKey of Object.keys(this.adjList[key])) {' },\n  {\n    stage: 8,\n    text:\n      '        if (!visited[adjacentKey] && this.detectCycleRec(adjacentKey, visited, recNodes)) {',\n  },\n  { stage: 9, text: '          return true;' },\n  { stage: 8, text: '        } else if (recNodes[adjacentKey]) {' },\n  { stage: 9, text: '          return true;' },\n  { stage: 8, text: '        }' },\n  { stage: 7, text: '      }' },\n  { stage: 3, text: '    }' },\n  { stage: 0, text: '' },\n  { stage: 6, text: '    recNodes[key] = false;' },\n  { stage: 6, text: '    return false;' },\n  { stage: 2, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 57,\n  problemName: `Implement a **detectCycle** method for a *Graph* class.`,\n  problemText: `Implement a **detectCycle** method that returns either \\`true\\` or \\`false\\` depending upon whether or not the graph contains a cycle.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const graph=new Graph();`,\n      evaluate: `Boolean(graph);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'detectCycle 1 - false',\n      inherit: [1],\n      code: `graph.addEdge('42', '41');graph.addEdge('42', '50');graph.addEdge('41', '10');graph.addEdge('41', '40');graph.addEdge('50', '45');graph.addEdge('50', '75');`,\n      evaluate: `graph.detectCycle();`,\n      expected: false,\n    },\n    {\n      id: 3,\n      name: 'detectCycle 2 - false',\n      inherit: [1],\n      code: `graph.addEdge('A', 'B');graph.addEdge('B', 'C');graph.addEdge('B', 'E');graph.addEdge('C', 'D');graph.addEdge('D', 'G');graph.addEdge('D', 'F');graph.addEdge('G', 'H');graph.addEdge('F', 'J');`,\n      evaluate: `graph.detectCycle();`,\n      expected: false,\n    },\n    {\n      id: 4,\n      name: 'detectCycle 3 - true',\n      inherit: [1],\n      code: `graph.addEdge('A', 'B');graph.addEdge('B', 'C');graph.addEdge('C', 'A');`,\n      evaluate: `graph.detectCycle();`,\n      expected: true,\n    },\n  ],\n  setupCode: `\n  Graph.prototype.tempSet = [];\n  Graph.prototype.callback = function(key) {\n    Graph.prototype.tempSet.push(key);\n  };\n  Graph.prototype.addVertex = function(key) {\n    const vertex = new Vertex(key);\n    this.vertices[key] = vertex;\n    if (!this.adjList[key]) {\n      this.adjList[key] = {};\n    }\n  };\n  Graph.prototype.addEdge = function(startVertexKey, endVertexKey, edgeWeight = 1) {\n    if (!this.vertices[startVertexKey]) {\n      this.addVertex(startVertexKey);\n    }\n    if (!this.vertices[endVertexKey]) {\n      this.addVertex(endVertexKey);\n    }\n\n    const edge = new Edge(edgeWeight);\n\n    this.adjList[startVertexKey][endVertexKey] = edge;\n\n    if (!this.isDirected) {\n      this.adjList[endVertexKey][startVertexKey] = edge;\n    }\n  };\n  `,\n  category: GRAPH,\n  type: DATA_STRUCTURE,\n  difficulty: ADVANCED,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 300],\n    solutionLines: solution,\n  },\n};\n","import { GRAPH, DATA_STRUCTURE, ADVANCED } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class Vertex {' },\n  { stage: 0, text: '  constructor(key) {' },\n  { stage: 0, text: '    this.key = key;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class Edge {' },\n  { stage: 0, text: '  constructor(weight) {' },\n  { stage: 0, text: '    this.weight = weight;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class Graph {' },\n  { stage: 0, text: '  constructor(isDirected = true) {' },\n  { stage: 0, text: '    this.isDirected = isDirected === true;' },\n  { stage: 0, text: '    this.adjList = {};' },\n  { stage: 0, text: '    this.vertices = {};' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '  checkPath(source, destination) {' },\n  { stage: 1, text: '    if (source === destination) {' },\n  { stage: 1, text: '      return true;' },\n  { stage: 1, text: '    }' },\n  { stage: 0, text: '' },\n  { stage: 2, text: '    const visited = {};' },\n  { stage: 2, text: '    const stack = [];' },\n  { stage: 3, text: '    stack.push(source);' },\n  { stage: 3, text: '    visited[source] = true;' },\n  { stage: 0, text: '' },\n  { stage: 4, text: '    while (stack.length) {' },\n  { stage: 5, text: '      let currentKey = stack.pop();' },\n  { stage: 0, text: '' },\n  { stage: 5, text: '      for (let adjacentKey of Object.keys(this.adjList[currentKey])) {' },\n  { stage: 6, text: '        if (!visited[adjacentKey]) {' },\n  { stage: 7, text: '          if (adjacentKey === destination) {' },\n  { stage: 7, text: '            return true;' },\n  { stage: 7, text: '          }' },\n  { stage: 8, text: '          stack.push(adjacentKey);' },\n  { stage: 8, text: '          visited[adjacentKey] = true;' },\n  { stage: 6, text: '        }' },\n  { stage: 5, text: '      }' },\n  { stage: 4, text: '    }' },\n  { stage: 0, text: '' },\n  { stage: 9, text: '    return false;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 58,\n  problemName: `Implement a **checkPath** method for a *Graph* class.`,\n  problemText: `Implement a **checkPath** method that takes a \\`source\\` key and a \\`destination\\` key and returns either \\`true\\` or \\`false\\` depending upon whether or not the graph contains a path from one to the other.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const graph=new Graph();`,\n      evaluate: `Boolean(graph);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'path to itself always true',\n      inherit: [1],\n      code: `graph.addEdge('42', '41');graph.addEdge('42', '50');graph.addEdge('41', '10');graph.addEdge('41', '40');graph.addEdge('50', '45');graph.addEdge('50', '75');`,\n      evaluate: `graph.checkPath('42', '42');`,\n      expected: true,\n    },\n    {\n      id: 3,\n      name: 'path q1 - true',\n      inherit: [1, 2],\n      code: ``,\n      evaluate: `graph.checkPath('42', '10');`,\n      expected: true,\n    },\n    {\n      id: 4,\n      name: 'path q2 - true',\n      inherit: [1, 2],\n      code: ``,\n      evaluate: `graph.checkPath('42', '40');`,\n      expected: true,\n    },\n    {\n      id: 5,\n      name: 'path q3 - true',\n      inherit: [1, 2],\n      code: ``,\n      evaluate: `graph.checkPath('42', '75');`,\n      expected: true,\n    },\n    {\n      id: 6,\n      name: 'path q4 - false',\n      inherit: [1, 2],\n      code: ``,\n      evaluate: `graph.checkPath('42', '88');`,\n      expected: false,\n    },\n    {\n      id: 7,\n      name: 'path q5 - false',\n      inherit: [1, 2],\n      code: ``,\n      evaluate: `graph.checkPath('50', '41');`,\n      expected: false,\n    },\n  ],\n  setupCode: `\n  Graph.prototype.tempSet = [];\n  Graph.prototype.callback = function(key) {\n    Graph.prototype.tempSet.push(key);\n  };\n  Graph.prototype.addVertex = function(key) {\n    const vertex = new Vertex(key);\n    this.vertices[key] = vertex;\n    if (!this.adjList[key]) {\n      this.adjList[key] = {};\n    }\n  };\n  Graph.prototype.addEdge = function(startVertexKey, endVertexKey, edgeWeight = 1) {\n    if (!this.vertices[startVertexKey]) {\n      this.addVertex(startVertexKey);\n    }\n    if (!this.vertices[endVertexKey]) {\n      this.addVertex(endVertexKey);\n    }\n\n    const edge = new Edge(edgeWeight);\n\n    this.adjList[startVertexKey][endVertexKey] = edge;\n\n    if (!this.isDirected) {\n      this.adjList[endVertexKey][startVertexKey] = edge;\n    }\n  };\n  `,\n  category: GRAPH,\n  type: DATA_STRUCTURE,\n  difficulty: ADVANCED,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 300],\n    solutionLines: solution,\n  },\n};\n","import { GRAPH, DATA_STRUCTURE, ADVANCED } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: 'class Vertex {' },\n  { stage: 0, text: '  constructor(key) {' },\n  { stage: 0, text: '    this.key = key;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class Edge {' },\n  { stage: 0, text: '  constructor(weight) {' },\n  { stage: 0, text: '    this.weight = weight;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class Graph {' },\n  { stage: 0, text: '  constructor(isDirected = true) {' },\n  { stage: 0, text: '    this.isDirected = isDirected === true;' },\n  { stage: 0, text: '    this.adjList = {};' },\n  { stage: 0, text: '    this.vertices = {};' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '  shortestPath(source, destination) {' },\n  { stage: 1, text: '    if (source == destination) {' },\n  { stage: 1, text: '      return 0;' },\n  { stage: 1, text: '    }' },\n  { stage: 0, text: '' },\n  { stage: 2, text: '    let visited = {};' },\n  { stage: 2, text: '    let distance = {};' },\n  { stage: 2, text: '    distance[source] = 0;' },\n  { stage: 0, text: '' },\n  { stage: 3, text: '    let queue = [];' },\n  { stage: 3, text: '    queue.push(source);' },\n  { stage: 0, text: '' },\n  { stage: 4, text: '    while (queue.length) {' },\n  { stage: 5, text: '      const currentKey = queue.shift();' },\n  { stage: 0, text: '' },\n  { stage: 5, text: '      for (let adjacentKey of Object.keys(this.adjList[currentKey])) {' },\n  { stage: 6, text: '        if (!visited[adjacentKey]) {' },\n  { stage: 8, text: '          queue.push(adjacentKey);' },\n  { stage: 8, text: '          visited[currentKey] = true;' },\n  { stage: 8, text: '          distance[adjacentKey] = distance[currentKey] + 1;' },\n  { stage: 6, text: '        }' },\n  { stage: 7, text: '        if (adjacentKey == destination) {' },\n  { stage: 7, text: '          return distance[destination];' },\n  { stage: 7, text: '        }' },\n  { stage: 5, text: '      }' },\n  { stage: 4, text: '    }' },\n  { stage: 0, text: '' },\n  { stage: 7, text: '    return -1;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 59,\n  problemName: `Implement a **shortestPath** method for a *Graph* class.`,\n  problemText: `Implement a **shortestPath** method that takes a \\`source\\` key and a \\`destination\\` key and returns the shortest possible distance (integer) from one to the other.  Assume all edge lengths are 1.  Return \\`-1\\` if no path exists.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const graph=new Graph();`,\n      evaluate: `Boolean(graph);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'path to itself is 0',\n      inherit: [1],\n      code: `graph.addEdge('42', '41');graph.addEdge('42', '50');graph.addEdge('41', '10');graph.addEdge('41', '40');graph.addEdge('50', '45');graph.addEdge('50', '75');graph.addEdge('75', '100');`,\n      evaluate: `graph.shortestPath('42', '42');`,\n      expected: 0,\n    },\n    {\n      id: 3,\n      name: 'path query 1',\n      inherit: [1, 2],\n      code: ``,\n      evaluate: `graph.shortestPath('42', '10');`,\n      expected: 2,\n    },\n    {\n      id: 4,\n      name: 'path query 2',\n      inherit: [1, 2],\n      code: ``,\n      evaluate: `graph.shortestPath('42', '40');`,\n      expected: 2,\n    },\n    {\n      id: 5,\n      name: 'path query 3',\n      inherit: [1, 2],\n      code: ``,\n      evaluate: `graph.shortestPath('42', '100');`,\n      expected: 3,\n    },\n    {\n      id: 6,\n      name: 'no path returns -1',\n      inherit: [1, 2],\n      code: ``,\n      evaluate: `graph.shortestPath('42', '1000');`,\n      expected: -1,\n    },\n  ],\n  setupCode: `\n  Graph.prototype.tempSet = [];\n  Graph.prototype.callback = function(key) {\n    Graph.prototype.tempSet.push(key);\n  };\n  Graph.prototype.addVertex = function(key) {\n    const vertex = new Vertex(key);\n    this.vertices[key] = vertex;\n    if (!this.adjList[key]) {\n      this.adjList[key] = {};\n    }\n  };\n  Graph.prototype.addEdge = function(startVertexKey, endVertexKey, edgeWeight = 1) {\n    if (!this.vertices[startVertexKey]) {\n      this.addVertex(startVertexKey);\n    }\n    if (!this.vertices[endVertexKey]) {\n      this.addVertex(endVertexKey);\n    }\n\n    const edge = new Edge(edgeWeight);\n\n    this.adjList[startVertexKey][endVertexKey] = edge;\n\n    if (!this.isDirected) {\n      this.adjList[endVertexKey][startVertexKey] = edge;\n    }\n  };\n  `,\n  category: GRAPH,\n  type: DATA_STRUCTURE,\n  difficulty: ADVANCED,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 270],\n    solutionLines: solution,\n  },\n};\n","import { BINARY_SEARCH, ALGORITHM, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function binarySearchRecursive(array, n, startIndex, endIndex) {' },\n  { stage: 1, text: '  if (!startIndex) {' },\n  { stage: 1, text: '    startIndex = 0;' },\n  { stage: 1, text: '  }' },\n  { stage: 2, text: '  if (!endIndex) {' },\n  { stage: 2, text: '    endIndex = array.length - 1;' },\n  { stage: 2, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 3, text: '  let middleIndex = Math.floor((startIndex + endIndex) / 2);' },\n  { stage: 4, text: '  if (endIndex <= startIndex && array[middleIndex] !== n) {' },\n  { stage: 5, text: '    return -1;' },\n  { stage: 4, text: '  } else if (array[middleIndex] === n) {' },\n  { stage: 5, text: '    return middleIndex;' },\n  { stage: 4, text: '  } else if (array[middleIndex] < n) {' },\n  { stage: 6, text: '    return binarySearchRecursive(array, n, middleIndex + 1, endIndex);' },\n  { stage: 4, text: '  } else {' },\n  { stage: 7, text: '    return binarySearchRecursive(array, n, startIndex, middleIndex - 1);' },\n  { stage: 4, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 60,\n  problemName: 'Implement a recursive binary search function.',\n  problemText: `Implement a function **binarySearchRecursive** which takes an array of sorted, unique integers \\`array\\`, and a single integer \\`n\\` and returns the index where that integer is found in the array, or \\`-1\\` if not found.\n  Please solve **recursively**.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'case 1',\n      inherit: [],\n      code: `const arr = [1, 2, 3, 5, 7, 8, 9, 11, 13, 15, 17, 18, 21, 24, 27, 31, 34, 38, 42, 46, 50];`,\n      evaluate: `binarySearchRecursive(arr, 8);`,\n      expected: 5,\n    },\n    {\n      id: 2,\n      name: 'case 2',\n      inherit: [1],\n      code: ``,\n      evaluate: `binarySearchRecursive(arr, 13);`,\n      expected: 8,\n    },\n    {\n      id: 3,\n      name: 'case 3',\n      inherit: [1],\n      code: ``,\n      evaluate: `binarySearchRecursive(arr, 18);`,\n      expected: 11,\n    },\n    {\n      id: 4,\n      name: 'case 4',\n      inherit: [1],\n      code: ``,\n      evaluate: `binarySearchRecursive(arr, 42);`,\n      expected: 18,\n    },\n    {\n      id: 5,\n      name: 'case 5',\n      inherit: [1],\n      code: ``,\n      evaluate: `binarySearchRecursive(arr, 6);`,\n      expected: -1,\n    },\n  ],\n  setupCode: '',\n  category: BINARY_SEARCH,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 240],\n    solutionLines: solution,\n  },\n};\n","import { BINARY_SEARCH, ALGORITHM, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function binarySearchIterative(sortedArray, n) {' },\n  { stage: 1, text: '  let startIndex = 0;' },\n  { stage: 1, text: '  let endIndex = sortedArray.length - 1;' },\n  { stage: 0, text: '' },\n  { stage: 2, text: '  while (startIndex <= endIndex) {' },\n  { stage: 3, text: '    let middleIndex = Math.floor((startIndex + endIndex) / 2);' },\n  { stage: 0, text: '' },\n  { stage: 5, text: '    if (sortedArray[middleIndex] === n) {' },\n  { stage: 6, text: '      return middleIndex;' },\n  { stage: 5, text: '    } else if (sortedArray[middleIndex] < n) {' },\n  { stage: 7, text: '      startIndex = middleIndex + 1;' },\n  { stage: 5, text: '    } else {' },\n  { stage: 7, text: '      endIndex = middleIndex - 1;' },\n  { stage: 5, text: '    }' },\n  { stage: 2, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 4, text: '  return -1;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 61,\n  problemName: 'Implement an iterative binary search function.',\n  problemText: `Implement a function **binarySearchIterative** which takes an array of sorted, unique integers \\`array\\`, and a single integer \\`n\\` and returns the index where that integer is found in the array, or \\`-1\\` if not found.\n  Please solve **iteratively**.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'case 1',\n      inherit: [],\n      code: `const arr = [1, 2, 3, 5, 7, 8, 9, 11, 13, 15, 17, 18, 21, 24, 27, 31, 34, 38, 42, 46, 50];`,\n      evaluate: `binarySearchIterative(arr, 8);`,\n      expected: 5,\n    },\n    {\n      id: 2,\n      name: 'case 2',\n      inherit: [1],\n      code: ``,\n      evaluate: `binarySearchIterative(arr, 13);`,\n      expected: 8,\n    },\n    {\n      id: 3,\n      name: 'case 3',\n      inherit: [1],\n      code: ``,\n      evaluate: `binarySearchIterative(arr, 18);`,\n      expected: 11,\n    },\n    {\n      id: 4,\n      name: 'case 4',\n      inherit: [1],\n      code: ``,\n      evaluate: `binarySearchIterative(arr, 42);`,\n      expected: 18,\n    },\n    {\n      id: 5,\n      name: 'case 5',\n      inherit: [1],\n      code: ``,\n      evaluate: `binarySearchIterative(arr, 6);`,\n      expected: -1,\n    },\n  ],\n  setupCode: '',\n  category: BINARY_SEARCH,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 240],\n    solutionLines: solution,\n  },\n};\n","import { SORTING, ALGORITHM, ADVANCED } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function quickSort(items) {' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  return quickSortHelper(items, 0, items.length - 1);' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 2, text: 'function quickSortHelper(items, left, right) {' },\n  { stage: 3, text: '  if (items.length > 1) {' },\n  { stage: 4, text: '    const index = partition(items, left, right);' },\n  { stage: 0, text: '' },\n  { stage: 5, text: '    if (left < index - 1) {' },\n  { stage: 6, text: '      quickSortHelper(items, left, index - 1);' },\n  { stage: 5, text: '    }' },\n  { stage: 0, text: '' },\n  { stage: 5, text: '    if (index < right) {' },\n  { stage: 6, text: '      quickSortHelper(items, index, right);' },\n  { stage: 5, text: '    }' },\n  { stage: 3, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 4, text: '  return items;' },\n  { stage: 2, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 7, text: 'function partition(array, left, right) {' },\n  { stage: 8, text: '  const pivot = array[Math.floor((right + left) / 2)];' },\n  { stage: 9, text: '  while (left <= right) {' },\n  { stage: 10, text: '    while (pivot > array[left]) {' },\n  { stage: 11, text: '      left++;' },\n  { stage: 10, text: '    }' },\n  { stage: 10, text: '    while (pivot < array[right]) {' },\n  { stage: 11, text: '      right--;' },\n  { stage: 10, text: '    }' },\n  { stage: 0, text: '' },\n  { stage: 12, text: '    if (left <= right) {' },\n  { stage: 13, text: '      const temp = array[left];' },\n  { stage: 13, text: '      array[left] = array[right];' },\n  { stage: 13, text: '      array[right] = temp;' },\n  { stage: 14, text: '      left++;' },\n  { stage: 14, text: '      right--;' },\n  { stage: 12, text: '    }' },\n  { stage: 9, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 15, text: '  return left;' },\n  { stage: 7, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 62,\n  problemName: 'Implement the quicksort algorithm.',\n  problemText: `Implement a function **quickSort** which takes an array of unsorted integers, sorts them in place using the Quicksort algorithm and returns the array.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'case 1',\n      inherit: [],\n      code: `const arr = [];`,\n      evaluate: `quickSort(arr);`,\n      expected: JSON.stringify([]),\n    },\n    {\n      id: 2,\n      name: 'case 2',\n      inherit: [],\n      code: `const arr = [5, 8, 1, 9, 3, 8, 2, 0, 2, 34, 2, 456, 342, 26, 75, 23];`,\n      evaluate: `quickSort(arr);`,\n      expected: JSON.stringify([0, 1, 2, 2, 2, 3, 5, 8, 8, 9, 23, 26, 34, 75, 342, 456]),\n    },\n    {\n      id: 3,\n      name: 'case 3',\n      inherit: [],\n      code: `const arr = [75, 98, 19, 99, 34, 48, 42, 40, 12, 134, 21, 1456, 3421, 1126, 1175, 2311];`,\n      evaluate: `quickSort(arr);`,\n      expected: JSON.stringify([\n        12,\n        19,\n        21,\n        34,\n        40,\n        42,\n        48,\n        75,\n        98,\n        99,\n        134,\n        1126,\n        1175,\n        1456,\n        2311,\n        3421,\n      ]),\n    },\n  ],\n  setupCode: '',\n  category: SORTING,\n  type: ALGORITHM,\n  difficulty: ADVANCED,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330, 360, 390, 420, 480],\n    solutionLines: solution,\n  },\n};\n","import { SORTING, ALGORITHM, ADVANCED } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function mergeSort(array) {' },\n  { stage: 1, text: '  if (array.length <= 1) {' },\n  { stage: 1, text: '    return array;' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 2, text: '  const midpoint = Math.floor(array.length / 2);' },\n  { stage: 2, text: '  const leftArray = array.slice(0, midpoint);' },\n  { stage: 2, text: '  const rightArray = array.slice(midpoint);' },\n  { stage: 0, text: '' },\n  { stage: 3, text: '  return merge(mergeSort(leftArray), mergeSort(rightArray));' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 4, text: 'function merge(leftArr, rightArr) {' },\n  { stage: 5, text: '  const results = [];' },\n  { stage: 5, text: '  let leftIndex = 0;' },\n  { stage: 5, text: '  let rightIndex = 0;' },\n  { stage: 0, text: '' },\n  { stage: 6, text: '  while (leftIndex < leftArr.length && rightIndex < rightArr.length) {' },\n  { stage: 7, text: '    if (leftArr[leftIndex] < rightArr[rightIndex]) {' },\n  { stage: 8, text: '      results.push(leftArr[leftIndex]);' },\n  { stage: 8, text: '      leftIndex = leftIndex + 1;' },\n  { stage: 7, text: '    } else {' },\n  { stage: 9, text: '      results.push(rightArr[rightIndex]);' },\n  { stage: 9, text: '      rightIndex = rightIndex + 1;' },\n  { stage: 7, text: '    }' },\n  { stage: 6, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 10, text: '  const leftRemains = leftArr.slice(leftIndex);' },\n  { stage: 10, text: '  const rightRemains = rightArr.slice(rightIndex);' },\n  { stage: 0, text: '' },\n  { stage: 11, text: '  return results.concat(leftRemains).concat(rightRemains);' },\n  { stage: 4, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 63,\n  problemName: 'Implement the mergesort algorithm.',\n  problemText: `Implement a function **mergeSort** which takes an array of unsorted integers, sorts them in place using the Mergesort algorithm and returns the array.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'case 1',\n      inherit: [],\n      code: `const arr = [];`,\n      evaluate: `mergeSort(arr);`,\n      expected: JSON.stringify([]),\n    },\n    {\n      id: 2,\n      name: 'case 2',\n      inherit: [],\n      code: `const arr = [5, 8, 1, 9, 3, 8, 2, 0, 2, 34, 2, 456, 342, 26, 75, 23];`,\n      evaluate: `mergeSort(arr);`,\n      expected: JSON.stringify([0, 1, 2, 2, 2, 3, 5, 8, 8, 9, 23, 26, 34, 75, 342, 456]),\n    },\n    {\n      id: 3,\n      name: 'case 3',\n      inherit: [],\n      code: `const arr = [75, 98, 19, 99, 34, 48, 42, 40, 12, 134, 21, 1456, 3421, 1126, 1175, 2311];`,\n      evaluate: `mergeSort(arr);`,\n      expected: JSON.stringify([\n        12,\n        19,\n        21,\n        34,\n        40,\n        42,\n        48,\n        75,\n        98,\n        99,\n        134,\n        1126,\n        1175,\n        1456,\n        2311,\n        3421,\n      ]),\n    },\n  ],\n  setupCode: '',\n  category: SORTING,\n  type: ALGORITHM,\n  difficulty: ADVANCED,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 360],\n    solutionLines: solution,\n  },\n};\n","import { GENERAL, ALGORITHM, BEGINNER } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function twoSum(array, target) {' },\n  { stage: 1, text: '  let hash = {};' },\n  { stage: 0, text: '' },\n  { stage: 2, text: '  for (let [index, num] of array.entries()) {' },\n  { stage: 3, text: '    const difference = target - num;' },\n  { stage: 4, text: '    if (hash[difference] !== undefined) {' },\n  { stage: 5, text: '      return [hash[difference], index];' },\n  { stage: 4, text: '    }' },\n  { stage: 5, text: '    hash[num] = index;' },\n  { stage: 2, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  return null;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 64,\n  problemName: 'Solve Two Sum (Unsorted Array).',\n  problemText: `Given an unsorted array of integers \\`array\\`, and an integer \\`target\\`, return the indices of two numbers in the \\`array\\` that sum to \\`target\\`.\n  Assume one solution.  Return indices in a two element array.  Solution can be returned in any order.\n  Return \\`null\\` if no solution could be found.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'case 1',\n      inherit: [],\n      code: ``,\n      evaluate: `twoSum([3, 6, 17, 12], 9);`,\n      expected: JSON.stringify([0, 1]),\n    },\n    {\n      id: 2,\n      name: 'case 2',\n      inherit: [],\n      code: ``,\n      evaluate: `twoSum([3, 4, 5], 9);`,\n      expected: JSON.stringify([1, 2]),\n    },\n    {\n      id: 3,\n      name: 'case 3',\n      inherit: [],\n      code: ``,\n      evaluate: `twoSum([2, 2], 4)`,\n      expected: JSON.stringify([0, 1]),\n    },\n    {\n      id: 4,\n      name: 'not found',\n      inherit: [],\n      code: ``,\n      evaluate: `twoSum([1, 3], 7) === null;`,\n      expected: true,\n    },\n  ],\n  setupCode: '',\n  category: GENERAL,\n  type: ALGORITHM,\n  difficulty: BEGINNER,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 180],\n    solutionLines: solution,\n  },\n};\n","import { GENERAL, ALGORITHM, ADVANCED } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function minimumRectangle(points) {' },\n  { stage: 1, text: '  const map = {};' },\n  { stage: 0, text: '' },\n  { stage: 2, text: '  for (const [x, y] of points) {' },\n  { stage: 3, text: '    if (!map[x]) {' },\n  { stage: 3, text: '      map[x] = [];' },\n  { stage: 3, text: '    }' },\n  { stage: 4, text: '    map[x].push(y);' },\n  { stage: 2, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 5, text: '  let min = Infinity;' },\n  { stage: 0, text: '' },\n  { stage: 6, text: '  for (const [x1, y1] of points) {' },\n  { stage: 7, text: '    for (const [x2, y2] of points) {' },\n  { stage: 8, text: '      if (x1 === x2 || y1 === y2) {' },\n  { stage: 8, text: '        continue;' },\n  { stage: 8, text: '      }' },\n  { stage: 0, text: '' },\n  { stage: 9, text: '      if (map[x1].includes(y2) && map[x2].includes(y1)) {' },\n  { stage: 10, text: '        min = Math.min(min, Math.abs(x1 - x2) * Math.abs(y1 - y2));' },\n  { stage: 9, text: '      }' },\n  { stage: 7, text: '    }' },\n  { stage: 6, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 11, text: '  return min === Infinity ? 0 : min;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 65,\n  problemName: 'Solve Minimum Rectangle.',\n  problemText: `Find the area of the smallest rectangle formed by a given array of \\`points\\`.  To qualify as a rectangle, it must have sides parallel to the X and Y axis.\n  Return \\`0\\` if no solution could be found.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'no solution found',\n      inherit: [],\n      code: ``,\n      evaluate: `minimumRectangle([[3, 6]]);`,\n      expected: 0,\n    },\n    {\n      id: 2,\n      name: 'case 1',\n      inherit: [],\n      code: ``,\n      evaluate: `minimumRectangle([[2,2],[2,4],[4,2],[4,4],[3,3]]);`,\n      expected: 4,\n    },\n    {\n      id: 3,\n      name: 'case 2',\n      inherit: [],\n      code: ``,\n      evaluate: `minimumRectangle([[2,2],[2,4],[4,2],[4,4],[5,2],[5,4]]);`,\n      expected: 2,\n    },\n  ],\n  setupCode: '',\n  category: GENERAL,\n  type: ALGORITHM,\n  difficulty: ADVANCED,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 360],\n    solutionLines: solution,\n  },\n};\n","import { CACHE, ALGORITHM, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class Node {' },\n  { stage: 0, text: '  constructor(key, data) {' },\n  { stage: 0, text: '    this.data = data;' },\n  { stage: 0, text: '    this.key = key;' },\n  { stage: 0, text: '    this.prev = null;' },\n  { stage: 0, text: '    this.next = null;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class DoublyLinkedList {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: \"    this.head = new Node('head', 0);\" },\n  { stage: 0, text: \"    this.tail = new Node('tail', 0);\" },\n  { stage: 0, text: '    this.head.next = this.tail;' },\n  { stage: 0, text: '    this.tail.prev = this.head;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 3, text: '  detach(node) {' },\n  { stage: 4, text: '    const prev = node.prev;' },\n  { stage: 4, text: '    const next = node.next;' },\n  { stage: 4, text: '    prev.next = next;' },\n  { stage: 4, text: '    next.prev = prev;' },\n  { stage: 3, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 6, text: '  addToFront(node) {' },\n  { stage: 7, text: '    const head = this.head;' },\n  { stage: 7, text: '    const hnext = head.next;' },\n  { stage: 8, text: '    head.next = node;' },\n  { stage: 8, text: '    node.next = hnext;' },\n  { stage: 8, text: '    node.prev = head;' },\n  { stage: 8, text: '    hnext.prev = node;' },\n  { stage: 6, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 12, text: '  removeLast() {' },\n  { stage: 13, text: '    const del = this.tail.prev;' },\n  { stage: 13, text: '    const prev = del.prev;' },\n  { stage: 13, text: '    prev.next = this.tail;' },\n  { stage: 13, text: '    this.tail.prev = prev;' },\n  { stage: 12, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class LRUCache {' },\n  { stage: 0, text: '  constructor(capacity) {' },\n  { stage: 0, text: '    if (!capacity) {' },\n  { stage: 0, text: \"      throw new Error('Declare LRUCache with an integer capacity > 0.');\" },\n  { stage: 0, text: '    }' },\n  { stage: 0, text: '    this.capacity = capacity;' },\n  { stage: 0, text: '    this.count = 0;' },\n  { stage: 0, text: '    this.hash = {};' },\n  { stage: 0, text: '    this.ll = new DoublyLinkedList();' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '  get(key) {' },\n  { stage: 1, text: '    const node = this.hash[key];' },\n  { stage: 1, text: '    if (node === undefined) {' },\n  { stage: 1, text: '      return -1;' },\n  { stage: 1, text: '    }' },\n  { stage: 2, text: '    this.ll.detach(node);' },\n  { stage: 5, text: '    this.ll.addToFront(node);' },\n  { stage: 5, text: '    return node.data;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '  put(key, value) {' },\n  { stage: 9, text: '    let node = this.hash[key];' },\n  { stage: 9, text: '    if (!node) {' },\n  { stage: 10, text: '      this.count++;' },\n  { stage: 10, text: '      if (this.count > this.capacity) {' },\n  { stage: 11, text: '        this.ll.removeLast();' },\n  { stage: 11, text: '        this.count--;' },\n  { stage: 10, text: '      }' },\n  { stage: 14, text: '      node = new Node(key, value);' },\n  { stage: 14, text: '      this.hash[key] = node;' },\n  { stage: 9, text: '    } else {' },\n  { stage: 15, text: '      node.data = value;' },\n  { stage: 15, text: '      this.ll.detach(node);' },\n  { stage: 9, text: '    }' },\n  { stage: 16, text: '    this.ll.addToFront(node);' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 66,\n  problemName: 'Implement an *LRUCache* class.',\n  problemText: `Implement **get** and **put** methods for an *LRUCache* class which uses an internal *DoublyLinkList* class to store the data.  \n   - The **get** method will return a value for a given \\`key\\`, or will return \\`-1\\` if that \\`key\\` is not found in the cache.\n   - The **put** method will either modify or add a node to the top of the cache, and evict a node from the bottom of the cache if the cache exceeds capacity.\n  `,\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const cache = new LRUCache(3);`,\n      evaluate: `Boolean(cache);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'evicts propertly',\n      inherit: [1],\n      code: `cache.put('a', 1);cache.put('b', 2);cache.put('c', 3);cache.put('d', 4);`,\n      evaluate: `cache.list();`,\n      expected: JSON.stringify([\n        { key: 'd', data: 4 },\n        { key: 'c', data: 3 },\n        { key: 'b', data: 2 },\n      ]),\n    },\n    {\n      id: 3,\n      name: 'get returns correct item',\n      inherit: [1, 2],\n      code: ``,\n      evaluate: `cache.get('c');`,\n      expected: 3,\n    },\n    {\n      id: 4,\n      name: 'get moves item to top of list',\n      inherit: [1, 2],\n      code: `cache.get('c');`,\n      evaluate: `cache.list()`,\n      expected: JSON.stringify([\n        { key: 'c', data: 3 },\n        { key: 'd', data: 4 },\n        { key: 'b', data: 2 },\n      ]),\n    },\n    {\n      id: 5,\n      name: 'get returns -1 when not in cache',\n      inherit: [1],\n      code: `cache.put('a', 1);`,\n      evaluate: `cache.get('c');`,\n      expected: -1,\n    },\n  ],\n  setupCode: `\n  LRUCache.prototype.list = function () {\n    let arr = [];\n    let node = this.ll.head.next;\n    while (node && node.next) {\n      arr.push({ key: node.key, data: node.data });\n      node = node.next;\n    }\n    return arr;\n  };\n  `,\n  category: CACHE,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330, 360, 390, 420, 450, 510],\n    solutionLines: solution,\n  },\n};\n","import { STACK, ALGORITHM, EXPERT } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function calculate(s) {' },\n  { stage: 1, text: \"  s = s.replaceAll(' ', '');\" },\n  { stage: 1, text: '  const stack = [];' },\n  { stage: 2, text: \"  let sign = '+';\" },\n  { stage: 2, text: '  let i = 0;' },\n  { stage: 3, text: '  while (i < s.length) {' },\n  { stage: 4, text: '    let c = s[i];' },\n  { stage: 4, text: \"    if (c === '(') {\" },\n  { stage: 5, text: '      let l = 1;' },\n  { stage: 5, text: '      let j = i + 1;' },\n  { stage: 5, text: '      while (j < s.length && l > 0) {' },\n  { stage: 6, text: \"        if (s[j] === '(') {\" },\n  { stage: 7, text: '          l++;' },\n  { stage: 6, text: \"        } else if (s.charAt(j) == ')') {\" },\n  { stage: 7, text: '          l--;' },\n  { stage: 6, text: '        }' },\n  { stage: 7, text: '        j++;' },\n  { stage: 5, text: '      }' },\n  { stage: 8, text: '      let blockValue = calculate(s.substring(i + 1, j - 1));' },\n  { stage: 8, text: '      i = j;' },\n  { stage: 9, text: \"      if (sign === '+') {\" },\n  { stage: 10, text: '        stack.push(blockValue);' },\n  { stage: 9, text: \"      } else if (sign === '-') {\" },\n  { stage: 10, text: '        stack.push(-blockValue);' },\n  { stage: 9, text: \"      } else if (sign === '*') {\" },\n  { stage: 10, text: '        stack.push(stack.pop() * blockValue);' },\n  { stage: 9, text: \"      } else if (sign === '/') {\" },\n  { stage: 11, text: '        let temp = stack.pop() / blockValue;' },\n  { stage: 11, text: '        if (temp < 0) {' },\n  { stage: 11, text: '          stack.push(Math.ceil(temp));' },\n  { stage: 11, text: '        } else {' },\n  { stage: 11, text: '          stack.push(Math.floor(temp));' },\n  { stage: 11, text: '        }' },\n  { stage: 9, text: '      }' },\n  { stage: 4, text: '    } else if (isCharNumber(c)) {' },\n  { stage: 12, text: '      let j = i;' },\n  { stage: 12, text: '      let value = 0;' },\n  { stage: 13, text: '      while (j < s.length && isCharNumber(s[j])) {' },\n  { stage: 14, text: \"        value = 10 * value + (s[j] - '0');\" },\n  { stage: 14, text: '        j++;' },\n  { stage: 13, text: '      }' },\n  { stage: 15, text: '      i = j;' },\n  { stage: 16, text: \"      if (sign === '+') {\" },\n  { stage: 17, text: '        stack.push(value);' },\n  { stage: 16, text: \"      } else if (sign === '-') {\" },\n  { stage: 17, text: '        stack.push(-value);' },\n  { stage: 16, text: \"      } else if (sign === '*') {\" },\n  { stage: 17, text: '        stack.push(stack.pop() * value);' },\n  { stage: 16, text: \"      } else if (sign === '/') {\" },\n  { stage: 18, text: '        let temp = stack.pop() / value;' },\n  { stage: 18, text: '        if (temp < 0) {' },\n  { stage: 19, text: '          stack.push(Math.ceil(temp));' },\n  { stage: 18, text: '        } else {' },\n  { stage: 19, text: '          stack.push(Math.floor(temp));' },\n  { stage: 18, text: '        }' },\n  { stage: 16, text: '      }' },\n  { stage: 4, text: '    } else {' },\n  { stage: 20, text: '      sign = c;' },\n  { stage: 20, text: '      i++;' },\n  { stage: 4, text: '    }' },\n  { stage: 3, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 21, text: '  let res = 0;' },\n  { stage: 21, text: '  while (stack.length) {' },\n  { stage: 22, text: '    res += stack.pop();' },\n  { stage: 21, text: '  }' },\n  { stage: 22, text: '  return res;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 5, text: 'function isCharNumber(c) {' },\n  { stage: 5, text: \"  return c >= '0' && c <= '9';\" },\n  { stage: 5, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 67,\n  problemName: 'Implement a Calculator to evaluate an expression string. (Lvl 3)',\n  problemText: `Implement a **calculate** function that takes a string \\`s\\`, and evaluates it with respect to parentheses grouping and order of operations.\n  Integer division should truncate to 0.  (ex: 5/2 = 2).  Assume the expression string is always a valid expression.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'single integer',\n      inherit: [],\n      code: ``,\n      evaluate: `calculate('5');`,\n      expected: 5,\n    },\n    {\n      id: 2,\n      name: 'simple expression',\n      inherit: [],\n      code: ``,\n      evaluate: `calculate('2+2');`,\n      expected: 4,\n    },\n    {\n      id: 3,\n      name: 'simple expression whitespace',\n      inherit: [],\n      code: ``,\n      evaluate: `calculate('2 + 2');`,\n      expected: 4,\n    },\n    {\n      id: 4,\n      name: 'proper order of operations',\n      inherit: [],\n      code: ``,\n      evaluate: `calculate('12-4/2');`,\n      expected: 10,\n    },\n    {\n      id: 5,\n      name: 'truncate integer division',\n      inherit: [],\n      code: ``,\n      evaluate: `calculate('10-5/2');`,\n      expected: 8,\n    },\n    {\n      id: 6,\n      name: 'simple parentheses',\n      inherit: [],\n      code: ``,\n      evaluate: `calculate('(5-2)*(8+4)');`,\n      expected: 36,\n    },\n    {\n      id: 7,\n      name: 'advanced 1',\n      inherit: [],\n      code: ``,\n      evaluate: `calculate('3*(10+5*2)/4+(6/2+12)');`,\n      expected: 30,\n    },\n  ],\n  setupCode: ``,\n  category: STACK,\n  type: ALGORITHM,\n  difficulty: EXPERT,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [\n      0,\n      30,\n      60,\n      90,\n      120,\n      150,\n      180,\n      210,\n      240,\n      270,\n      300,\n      330,\n      360,\n      390,\n      420,\n      450,\n      480,\n      510,\n      540,\n      570,\n      600,\n      630,\n      690,\n    ],\n    solutionLines: solution,\n  },\n};\n","import { RECURSION, ALGORITHM, EXPERT } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function wordSearch(board, word) {' },\n  { stage: 1, text: '  for (let [rowIndex, row] of board.entries()) {' },\n  { stage: 1, text: '    for (let [columnIndex, letter] of row.entries()) {' },\n  { stage: 2, text: '      if (navigate(board, word, rowIndex, columnIndex, 0) === true) {' },\n  { stage: 2, text: '        return true;' },\n  { stage: 2, text: '      }' },\n  { stage: 1, text: '    }' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 3, text: '  return false;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 4, text: 'function navigate(board, word, rowIndex, columnIndex, wordCharIndex) {' },\n  { stage: 5, text: '  let nextCharToFind = word[wordCharIndex];' },\n  { stage: 5, text: '  if (!nextCharToFind) {' },\n  { stage: 5, text: '    return true;' },\n  { stage: 5, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 6, text: '  if (' },\n  { stage: 6, text: '    rowIndex < 0 ||' },\n  { stage: 6, text: '    rowIndex == board.length ||' },\n  { stage: 6, text: '    columnIndex < 0 ||' },\n  { stage: 6, text: '    columnIndex == board[0].length ||' },\n  { stage: 6, text: '    board[rowIndex][columnIndex] != nextCharToFind' },\n  { stage: 6, text: '  ) {' },\n  { stage: 7, text: '    return false;' },\n  { stage: 6, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 8, text: '  let ret = false;' },\n  { stage: 8, text: \"  board[rowIndex][columnIndex] = '#';\" },\n  { stage: 0, text: '' },\n  { stage: 9, text: '  let loop = [' },\n  { stage: 9, text: '    [-1, 0],' },\n  { stage: 9, text: '    [0, -1],' },\n  { stage: 9, text: '    [0, 1],' },\n  { stage: 9, text: '    [1, 0],' },\n  { stage: 9, text: '  ];' },\n  { stage: 10, text: '  for (let item of loop) {' },\n  {\n    stage: 11,\n    text:\n      '    ret = navigate(board, word, rowIndex + item[0], columnIndex + item[1], wordCharIndex + 1);',\n  },\n  { stage: 12, text: '    if (ret) {' },\n  { stage: 12, text: '      break;' },\n  { stage: 12, text: '    }' },\n  { stage: 10, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 13, text: '  board[rowIndex][columnIndex] = word[wordCharIndex];' },\n  { stage: 13, text: '  return ret;' },\n  { stage: 4, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 68,\n  problemName: 'Solve Word Search.',\n  problemText: `Given a \\`board\\` (two dimensional array), and a \\`word\\` (string), create a function **wordSearch** which returns a boolean indicating whether the word can be found on the board.  \n  The word can be constructed from a series of letters which are either horizontally or vertically adjacent.  The same board letter can not be used multiple times.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'case 1',\n      inherit: [],\n      code: `\n      const board = [\n        ['B', 'C', 'D', 'F'],\n        ['T', 'G', 'D', 'T'],\n        ['B', 'E', 'F', 'F'],\n      ];\n      const word = 'BCDDFE';`,\n      evaluate: `wordSearch(board, word);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'case 2',\n      inherit: [],\n      code: `\n      const board = [\n        ['B', 'C', 'D', 'F'],\n        ['T', 'G', 'D', 'T'],\n        ['B', 'E', 'F', 'F'],\n      ];\n      const word = 'TFF';`,\n      evaluate: `wordSearch(board, word);`,\n      expected: true,\n    },\n    {\n      id: 3,\n      name: 'case 3',\n      inherit: [],\n      code: `\n      const board = [\n        ['B', 'C', 'D', 'F'],\n        ['T', 'G', 'D', 'T'],\n        ['B', 'E', 'F', 'F'],\n      ];\n      const word = 'BDDC';`,\n      evaluate: `wordSearch(board, word);`,\n      expected: false,\n    },\n  ],\n  setupCode: '',\n  category: RECURSION,\n  type: ALGORITHM,\n  difficulty: EXPERT,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330, 360, 420],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, LINKED_LIST, ADVANCED } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: -1, text: 'function Node(val) {' },\n  { stage: -1, text: '  this.val = val;' },\n  { stage: -1, text: '  this.next = null;' },\n  { stage: -1, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function reorderList(head) {' },\n  { stage: 1, text: '  if (!head) {' },\n  { stage: 1, text: '    return;' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 2, text: '  let slow = head;' },\n  { stage: 2, text: '  let fast = head;' },\n  { stage: 3, text: '  while (fast && fast.next) {' },\n  { stage: 4, text: '    slow = slow.next;' },\n  { stage: 4, text: '    fast = fast.next.next;' },\n  { stage: 3, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 5, text: '  let prev = null;' },\n  { stage: 5, text: '  let curr = slow;' },\n  { stage: 5, text: '  let tmp = null;' },\n  { stage: 6, text: '  while (curr != null) {' },\n  { stage: 7, text: '    tmp = curr.next;' },\n  { stage: 7, text: '    curr.next = prev;' },\n  { stage: 7, text: '    prev = curr;' },\n  { stage: 7, text: '    curr = tmp;' },\n  { stage: 6, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 8, text: '  let first = head;' },\n  { stage: 8, text: '  let second = prev;' },\n  { stage: 9, text: '  while (second.next) {' },\n  { stage: 10, text: '    tmp = first.next;' },\n  { stage: 10, text: '    first.next = second;' },\n  { stage: 10, text: '    first = tmp;' },\n  { stage: 0, text: '' },\n  { stage: 11, text: '    tmp = second.next;' },\n  { stage: 11, text: '    second.next = first;' },\n  { stage: 11, text: '    second = tmp;' },\n  { stage: 9, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 69,\n  problemName: 'Reorder a *LinkedList*.',\n  problemText: `Given a \\`head\\` *Node*, reorder a linked list of length \\`n\\` so that a *LinkedList* in the pattern of:\n\n  ( L<sub>1</sub> -> L<sub>2</sub> -> L<sub>3</sub> -> L<sub>4</sub> -> L<sub>5</sub> )\n\n  becomes:\n\n  ( L<sub>1</sub> -> L<sub>n</sub> -> L<sub>2</sub> -> L<sub>n-1</sub> -> L<sub>3</sub> )\n  \n  List must be re-ordered in place, using no additional data structures.\n  `,\n  testCases: [\n    {\n      id: 1,\n      name: 'reorder empty list does not error',\n      inherit: [],\n      code: `reorderList(null);`,\n      evaluate: `reorderList(null);`,\n      expected: undefined,\n    },\n    {\n      id: 2,\n      name: 'case 1',\n      inherit: [],\n      code: `let head = new Node(1);\n      head.next = new Node(2);\n      head.next.next = new Node(3);\n      head.next.next.next = new Node(4);\n      head.next.next.next.next = new Node(5);\n      reorderList(head);`,\n      evaluate: `printList(head);`,\n      expected: JSON.stringify([1, 5, 2, 4, 3]),\n    },\n  ],\n  setupCode: `\n  function Node(val) {\n    this.val = val;\n    this.next = null;\n  }\n\n  function printList(head) {\n    const arr = [];\n    while (head) {\n      arr.push(head.val);\n      head = head.next;\n    }\n    return arr;\n  }`,\n  category: LINKED_LIST,\n  type: ALGORITHM,\n  difficulty: ADVANCED,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 360],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, ADVANCED, GENERAL } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function findAnagrams(str, p) {' },\n  { stage: 1, text: '  if (str.length < p.length) {' },\n  { stage: 1, text: '    return [];' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 2, text: '  const pCount = {};' },\n  { stage: 2, text: '  const strCount = {};' },\n  { stage: 0, text: '' },\n  { stage: 3, text: '  for (let i = 0; i < p.length; i++) {' },\n  { stage: 4, text: '    let ch = p[i];' },\n  { stage: 4, text: '    if (pCount[ch]) {' },\n  { stage: 5, text: '      pCount[ch]++;' },\n  { stage: 4, text: '    } else {' },\n  { stage: 5, text: '      pCount[ch] = 1;' },\n  { stage: 4, text: '    }' },\n  { stage: 3, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 6, text: '  const output = [];' },\n  { stage: 0, text: '' },\n  { stage: 6, text: '  for (let i = 0; i < str.length; ++i) {' },\n  { stage: 7, text: '    let ch = str[i];' },\n  { stage: 7, text: '    if (strCount[ch]) {' },\n  { stage: 8, text: '      strCount[ch]++;' },\n  { stage: 7, text: '    } else {' },\n  { stage: 8, text: '      strCount[ch] = 1;' },\n  { stage: 7, text: '    }' },\n  { stage: 0, text: '' },\n  { stage: 9, text: '    if (i >= p.length) {' },\n  { stage: 10, text: '      ch = str[i - p.length];' },\n  { stage: 10, text: '      if (strCount[ch] == 1) {' },\n  { stage: 11, text: '        delete strCount[ch];' },\n  { stage: 10, text: '      } else {' },\n  { stage: 11, text: '        strCount[ch] = strCount[ch] - 1;' },\n  { stage: 10, text: '      }' },\n  { stage: 9, text: '    }' },\n  { stage: 0, text: '' },\n  { stage: 12, text: '    if (Object.keys(pCount).length === Object.keys(strCount).length) {' },\n  { stage: 13, text: '      let isEqual = true;' },\n  { stage: 0, text: '' },\n  { stage: 13, text: '      for (let key of Object.keys(pCount)) {' },\n  { stage: 14, text: '        if (pCount[key] !== strCount[key]) {' },\n  { stage: 14, text: '          isEqual = false;' },\n  { stage: 14, text: '          break;' },\n  { stage: 14, text: '        }' },\n  { stage: 13, text: '      }' },\n  { stage: 0, text: '' },\n  { stage: 15, text: '      if (isEqual) {' },\n  { stage: 15, text: '        output.push(i - p.length + 1);' },\n  { stage: 15, text: '      }' },\n  { stage: 12, text: '    }' },\n  { stage: 6, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 16, text: '  return output;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 70,\n  problemName: `Find anagrams in a string.`,\n  problemText: `Given a string \\`str\\` and another string \\`p\\`, find all the start indices of \\`p\\`'s anagrams within \\`str\\`.\n\n  - All characters in either string are lowercase letters.\n  - Return the indices as an array of integers.  Indices should be returned in ascending order.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'string (str) length shorter than find (p)length',\n      inherit: [],\n      code: ``,\n      evaluate: `findAnagrams(\"a\", \"abc\");`,\n      expected: JSON.stringify([]),\n    },\n    {\n      id: 2,\n      name: 'case 1',\n      inherit: [],\n      code: ``,\n      evaluate: `findAnagrams('cbaebabacd', 'abc');`,\n      expected: JSON.stringify([0, 6]),\n    },\n    {\n      id: 3,\n      name: 'case 2',\n      inherit: [],\n      code: ``,\n      evaluate: `findAnagrams('abab', 'ab');`,\n      expected: JSON.stringify([0, 1, 2]),\n    },\n  ],\n  setupCode: ``,\n  category: GENERAL,\n  type: ALGORITHM,\n  difficulty: ADVANCED,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330, 360, 390, 420, 450, 510],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, ADVANCED, GENERAL } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class RandomizedSet {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.dict = {};' },\n  { stage: 0, text: '    this.list = [];' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '  insert(val) {' },\n  { stage: 1, text: '    if (this.dict[val] != null) {' },\n  { stage: 1, text: '      return false;' },\n  { stage: 1, text: '    }' },\n  { stage: 2, text: '    this.dict[val] = this.list.length;' },\n  { stage: 2, text: '    this.list.push(val);' },\n  { stage: 2, text: '    return true;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '  remove(val) {' },\n  { stage: 3, text: '    if (this.dict[val] == null) {' },\n  { stage: 3, text: '      return false;' },\n  { stage: 3, text: '    }' },\n  { stage: 0, text: '' },\n  { stage: 4, text: '    const lastElement = this.list[this.list.length - 1];' },\n  { stage: 4, text: '    const idx = this.dict[val];' },\n  { stage: 5, text: '    this.list[idx] = lastElement;' },\n  { stage: 5, text: '    this.dict[lastElement] = idx;' },\n  { stage: 0, text: '' },\n  { stage: 6, text: '    this.list.pop();' },\n  { stage: 6, text: '    delete this.dict[val];' },\n  { stage: 6, text: '    return true;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '  getRandom() {' },\n  { stage: 7, text: '    if (!this.list.length) {' },\n  { stage: 7, text: '      return null;' },\n  { stage: 7, text: '    }' },\n  { stage: 8, text: '    return this.list[Math.floor(Math.random(1) * this.list.length)];' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 71,\n  problemName: `Implement a *RandomizedSet* class.`,\n  problemText: `Implement a *RandomizedSet* class with **insert**, **remove** and **getRandom** methods.\n  \n   - **insert**: Inserts an item \\`val\\` into the set if not present. Returns \\`true\\` if the item was not present, false otherwise.\n   - **remove**: Removes an item \\`val\\` from the set if present. Returns \\`true\\` if the item was present, \\`false\\` otherwise.\n   - **getRandom**:  Returns a random element from the current set of elements, or \\`null\\` if there are no items in the set. Each element must have the same probability of being returned.\n\n   All operations should perform in O(1) time.\n   `,\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const randomizedSet = new RandomizedSet();`,\n      evaluate: `Boolean(randomizedSet);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'getRandom on empty returns null',\n      inherit: [1],\n      code: ``,\n      evaluate: `randomizedSet.getRandom();`,\n      expected: null,\n    },\n    {\n      id: 3,\n      name: 'insert returns true the first time a value is added',\n      inherit: [1],\n      code: ``,\n      evaluate: `randomizedSet.insert(1);`,\n      expected: true,\n    },\n    {\n      id: 4,\n      name: 'remove returns false if item is not in set',\n      inherit: [1],\n      code: ``,\n      evaluate: `randomizedSet.remove(2);`,\n      expected: false,\n    },\n    {\n      id: 5,\n      name: 'getRandom returns a valid value',\n      inherit: [1],\n      code: `randomizedSet.insert(1);randomizedSet.insert(2);`,\n      evaluate: `const a = randomizedSet.getRandom(); a === 1 || a === 2;`,\n      expected: true,\n    },\n    {\n      id: 6,\n      name: 'remove returns true when removing a valid value',\n      inherit: [1, 5],\n      code: ``,\n      evaluate: `randomizedSet.remove(1);`,\n      expected: true,\n    },\n    {\n      id: 7,\n      name: 'insert returns false if item is already in set',\n      inherit: [1, 5],\n      code: ``,\n      evaluate: `randomizedSet.insert(2);`,\n      expected: false,\n    },\n    {\n      id: 8,\n      name: 'getRandom returns only possible value',\n      inherit: [1, 5],\n      code: `randomizedSet.remove(1);`,\n      evaluate: `randomizedSet.getRandom();`,\n      expected: 2,\n    },\n  ],\n  setupCode: ``,\n  category: GENERAL,\n  type: ALGORITHM,\n  difficulty: ADVANCED,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 270],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, ADVANCED, DYNAMIC_PROGRAMMING } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function minPathSum(grid) {' },\n  { stage: 1, text: '  const lastRow = grid.length - 1;' },\n  { stage: 2, text: '  for (let row = lastRow; row >= 0; row--) {' },\n  { stage: 3, text: '    const lastColumn = grid[row].length - 1;' },\n  { stage: 4, text: '    for (let column = lastColumn; column >= 0; column--) {' },\n  { stage: 5, text: '      if (row == lastRow && column != lastColumn) {' },\n  { stage: 6, text: '        grid[row][column] = grid[row][column] + grid[row][column + 1];' },\n  { stage: 5, text: '      } else if (column == lastColumn && row != lastRow) {' },\n  { stage: 7, text: '        grid[row][column] = grid[row][column] + grid[row + 1][column];' },\n  { stage: 5, text: '      } else if (column != lastColumn && row != lastRow) {' },\n  { stage: 8, text: '        grid[row][column] =' },\n  {\n    stage: 8,\n    text: '          grid[row][column] + Math.min(grid[row + 1][column], grid[row][column + 1]);',\n  },\n  { stage: 5, text: '      }' },\n  { stage: 4, text: '    }' },\n  { stage: 2, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 9, text: '  return grid[0][0];' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 72,\n  problemName: `Minimum Path Sum on a 2D Matrix.`,\n  problemText: `Given a 2D \\`grid\\` filled with positive integers, trace a path from the top left to the bottom right which produces the minimum sum along its path, and return that value.\n\n   - Your path must only follow a trajectory of downward and rightward movements.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: ``,\n      evaluate: `minPathSum([\n        [1, 3, 1],\n        [1, 5, 1],\n        [4, 2, 1],\n      ]);`,\n      expected: 7,\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: ``,\n      evaluate: `minPathSum([\n        [1, 2, 3],\n        [4, 5, 6],\n      ]);`,\n      expected: 12,\n    },\n  ],\n  setupCode: ``,\n  category: DYNAMIC_PROGRAMMING,\n  type: ALGORITHM,\n  difficulty: ADVANCED,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 300],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, ADVANCED, GENERAL } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function numIslands(grid) {' },\n  { stage: 1, text: '  let count = 0;' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  for (let row = 0; row < grid.length; row++) {' },\n  { stage: 2, text: '    for (let column = 0; column < grid[row].length; column++) {' },\n  { stage: 3, text: \"      if (grid[row][column] === '1') {\" },\n  { stage: 4, text: '        count++;' },\n  { stage: 4, text: '        doBFS(grid, row, column);' },\n  { stage: 3, text: '      }' },\n  { stage: 2, text: '    }' },\n  { stage: 1, text: '  }' },\n  { stage: 5, text: '  return count;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 6, text: 'function doBFS(grid, row, column) {' },\n  { stage: 7, text: '  const rowOutOfBounds = row < 0 || row >= grid.length;' },\n  { stage: 7, text: '  if (rowOutOfBounds) {' },\n  { stage: 7, text: '    return;' },\n  { stage: 7, text: '  }' },\n  { stage: 8, text: '  const columnOutOfBounds = column < 0 || column >= grid[row].length;' },\n  { stage: 8, text: \"  if (columnOutOfBounds || grid[row][column] === '0') {\" },\n  { stage: 8, text: '    return;' },\n  { stage: 8, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 9, text: \"  grid[row][column] = '0';\" },\n  { stage: 0, text: '' },\n  { stage: 10, text: '  doBFS(grid, row + 1, column);' },\n  { stage: 10, text: '  doBFS(grid, row - 1, column);' },\n  { stage: 11, text: '  doBFS(grid, row, column + 1);' },\n  { stage: 11, text: '  doBFS(grid, row, column - 1);' },\n  { stage: 6, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 73,\n  problemName: `Determine Number of Islands in a 2D Grid.`,\n  problemText: `Given an 2d \\`grid\\` of '1's (land) and '0's (water), return the number of islands.\n\n  An island is surrounded by water and includes all land connected horizontally or vertically. \n  \n  Assume areas outside the bounds of the grid are water.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: `const grid = [\n        ['1', '1', '1', '1', '0'],\n        ['1', '1', '0', '1', '0'],\n        ['1', '1', '0', '0', '0'],\n        ['0', '0', '0', '0', '0'],\n      ];`,\n      evaluate: `numIslands(grid);`,\n      expected: 1,\n    },\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: `const grid = [\n        ['1', '1', '0', '0', '0'],\n        ['1', '1', '0', '0', '0'],\n        ['0', '0', '1', '0', '0'],\n        ['0', '0', '0', '1', '1'],\n      ];`,\n      evaluate: `numIslands(grid);`,\n      expected: 3,\n    },\n  ],\n  setupCode: ``,\n  category: GENERAL,\n  type: ALGORITHM,\n  difficulty: ADVANCED,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 360],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, ADVANCED, DYNAMIC_PROGRAMMING } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function numDecodingsRecursive(s) {' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  const memo = {};' },\n  { stage: 1, text: '  return recursiveWithMemo(0, s, memo);' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 2, text: 'function recursiveWithMemo(index, str, memo) {' },\n  { stage: 3, text: '  if (memo[index] != null) {' },\n  { stage: 3, text: '    return memo[index];' },\n  { stage: 3, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 4, text: '  if (index === str.length) {' },\n  { stage: 4, text: '    return 1;' },\n  { stage: 4, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 5, text: \"  if (str[index] === '0') {\" },\n  { stage: 5, text: '    return 0;' },\n  { stage: 5, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 6, text: '  if (index === str.length - 1) {' },\n  { stage: 6, text: '    return 1;' },\n  { stage: 6, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 7, text: '  let ans = recursiveWithMemo(index + 1, str, memo);' },\n  { stage: 8, text: '  if (parseInt(str.substring(index, index + 2), 10) <= 26) {' },\n  { stage: 9, text: '    ans += recursiveWithMemo(index + 2, str, memo);' },\n  { stage: 8, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 10, text: '  memo[index] = ans;' },\n  { stage: 0, text: '' },\n  { stage: 11, text: '  return ans;' },\n  { stage: 2, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 74,\n  problemName: `Solve Decode Ways Recursively`,\n  problemText: `A message containing letters from A-Z can be encoded into numbers using the following mapping:\n\n   - 'A' -> \"1\"\n   - 'B' -> \"2\"\n   - ...\n   - 'Z' -> \"26\"\n\n  To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways).\n  \n  Given a string \\`s\\` containing only digits, return the number of ways to decode it.\n  \n  Please solve using recursion.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: ``,\n      evaluate: `numDecodingsRecursive('12');`,\n      expected: 2,\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: ``,\n      evaluate: `numDecodingsRecursive('226');`,\n      expected: 3,\n    },\n    {\n      id: 3,\n      name: 'example 3',\n      inherit: [],\n      code: ``,\n      evaluate: `numDecodingsRecursive('0');`,\n      expected: 0,\n    },\n    {\n      id: 4,\n      name: 'example 4',\n      inherit: [],\n      code: ``,\n      evaluate: `numDecodingsRecursive('06');`,\n      expected: 0,\n    },\n  ],\n  setupCode: ``,\n  category: DYNAMIC_PROGRAMMING,\n  type: ALGORITHM,\n  difficulty: ADVANCED,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 360],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, ADVANCED, LINKED_LIST } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: -1, text: 'function ListNode(val) {' },\n  { stage: -1, text: '  this.val = val;' },\n  { stage: -1, text: '  this.next = null;' },\n  { stage: -1, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function addTwoNumbers(l1, l2) {' },\n  { stage: 1, text: '  const dummyHead = new ListNode(0);' },\n  { stage: 1, text: '  let curr = dummyHead;' },\n  { stage: 0, text: '' },\n  { stage: 2, text: '  let p = l1;' },\n  { stage: 2, text: '  let q = l2;' },\n  { stage: 2, text: '  let carry = 0;' },\n  { stage: 3, text: '  while (p || q) {' },\n  { stage: 4, text: '    let x = p ? p.val : 0;' },\n  { stage: 4, text: '    let y = q ? q.val : 0;' },\n  { stage: 5, text: '    let sum = carry + x + y;' },\n  { stage: 5, text: '    carry = Math.floor(sum / 10);' },\n  { stage: 6, text: '    curr.next = new ListNode(sum % 10);' },\n  { stage: 6, text: '    curr = curr.next;' },\n  { stage: 7, text: '    if (p) {' },\n  { stage: 7, text: '      p = p.next;' },\n  { stage: 7, text: '    }' },\n  { stage: 8, text: '    if (q) {' },\n  { stage: 8, text: '      q = q.next;' },\n  { stage: 8, text: '    }' },\n  { stage: 3, text: '  }' },\n  { stage: 9, text: '  if (carry > 0) {' },\n  { stage: 9, text: '    curr.next = new ListNode(carry);' },\n  { stage: 9, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 10, text: '  return dummyHead.next;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 75,\n  problemName: `Add Two Linked Lists.`,\n  problemText: `You are given the head nodes for each of two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as the head node of a linked list (also in reverse order).\n\n  You may assume the two numbers do not contain any leading zero, except the number 0 itself.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: `\n      const ex1l1 = new ListNode(2);ex1l1.next = new ListNode(4);ex1l1.next.next = new ListNode(3);const ex1l2 = new ListNode(5);ex1l2.next = new ListNode(6);ex1l2.next.next = new ListNode(4);`,\n      evaluate: `addTwoNumbers(ex1l1, ex1l2).convert();`,\n      expected: JSON.stringify([7, 0, 8]),\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: `const ex2l1 = new ListNode(0);const ex2l2 = new ListNode(0);`,\n      evaluate: `addTwoNumbers(ex2l1, ex2l2).convert();`,\n      expected: JSON.stringify([0]),\n    },\n    {\n      id: 3,\n      name: 'example 3',\n      inherit: [],\n      code: `const ex3l1 = new ListNode(9);ex3l1.next = new ListNode(9);ex3l1.next.next = new ListNode(9);const ex3l2 = new ListNode(9);ex3l2.next = new ListNode(9);`,\n      evaluate: `addTwoNumbers(ex3l1, ex3l2).convert();`,\n      expected: JSON.stringify([8, 9, 0, 1]),\n    },\n  ],\n  setupCode: `\n  function ListNode(val) {\n    this.val = val;\n    this.next = null;\n  }\n\n  ListNode.prototype.convert = function () {\n    const arr = [];\n    let node = this;\n    while (node) {\n      arr.push(node.val);\n      node = node.next;\n    }\n    return arr;\n  };\n  `,\n  category: LINKED_LIST,\n  type: ALGORITHM,\n  difficulty: ADVANCED,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 330],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, INTERMEDIATE, GENERAL } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function merge(intervals) {' },\n  { stage: 1, text: '  intervals.sort((a, b) => a[0] - b[0]);' },\n  { stage: 1, text: '  const result = [];' },\n  { stage: 0, text: '' },\n  { stage: 2, text: '  let currentInterval = intervals[0];' },\n  { stage: 0, text: '' },\n  { stage: 3, text: '  for (let i = 0; i < intervals.length; i++) {' },\n  { stage: 4, text: '    const thisInterval = intervals[i];' },\n  { stage: 4, text: '    const nextInterval = intervals[i + 1];' },\n  { stage: 5, text: '    if (nextInterval && thisInterval[1] >= nextInterval[0]) {' },\n  { stage: 6, text: '      currentInterval = [currentInterval[0], nextInterval[1]];' },\n  { stage: 5, text: '    } else {' },\n  { stage: 7, text: '      result.push(currentInterval);' },\n  { stage: 7, text: '      currentInterval = nextInterval;' },\n  { stage: 5, text: '    }' },\n  { stage: 3, text: '  }' },\n  { stage: 8, text: '  return result;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 76,\n  problemName: `Solve Merge Intervals`,\n  problemText: `Given an array of intervals where intervals[i] = [start-i, end-i], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: `const intervals = [[0, 5],[11, 15],[4, 6],[8, 9],[1, 2],[12, 16],[2, 4]];`,\n      evaluate: `merge(intervals);`,\n      expected: JSON.stringify([\n        [0, 6],\n        [8, 9],\n        [11, 16],\n      ]),\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: `const intervals = [[1, 3],[2, 6],[8, 10],[15, 18]];`,\n      evaluate: `merge(intervals);`,\n      expected: JSON.stringify([\n        [1, 6],\n        [8, 10],\n        [15, 18],\n      ]),\n    },\n    {\n      id: 3,\n      name: 'example 3',\n      inherit: [],\n      code: `const intervals = [[1, 4],[4, 5]];`,\n      evaluate: `merge(intervals);`,\n      expected: JSON.stringify([[1, 5]]),\n    },\n  ],\n  setupCode: ``,\n  category: GENERAL,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 270],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, INTERMEDIATE, GENERAL } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function maxProfit(prices) {' },\n  { stage: 1, text: '  let minprice = Infinity;' },\n  { stage: 1, text: '  let maxprofit = 0;' },\n  { stage: 0, text: '' },\n  { stage: 2, text: '  for (let i = 0; i < prices.length; i++) {' },\n  { stage: 3, text: '    if (prices[i] < minprice) {' },\n  { stage: 4, text: '      minprice = prices[i];' },\n  { stage: 3, text: '    } else if (prices[i] - minprice > maxprofit) {' },\n  { stage: 5, text: '      maxprofit = prices[i] - minprice;' },\n  { stage: 3, text: '    }' },\n  { stage: 2, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 6, text: '  return maxprofit;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 77,\n  problemName: `Best Time to Buy and Sell Stock`,\n  problemText: `You are given an array prices where \\`prices[i]\\` is the price of a given stock on the \\`i\\`th day.\n\n  You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\n  \n  Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return \\`0\\`.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: ``,\n      evaluate: `maxProfit([7, 1, 5, 3, 6, 4]);`,\n      expected: 5,\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: ``,\n      evaluate: `maxProfit([7, 6, 4, 3, 1]);`,\n      expected: 0,\n    },\n  ],\n  setupCode: ``,\n  category: GENERAL,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 210],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, INTERMEDIATE, GENERAL } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function productExceptSelf(nums) {' },\n  { stage: 1, text: '  let length = nums.length;' },\n  { stage: 0, text: '' },\n  { stage: 2, text: '  const leftProducts = [];' },\n  { stage: 2, text: '  const rightProducts = [];' },\n  { stage: 0, text: '' },\n  { stage: 3, text: '  const answer = [];' },\n  { stage: 0, text: '' },\n  { stage: 4, text: '  leftProducts[0] = 1;' },\n  { stage: 5, text: '  for (let i = 1; i < length; i++) {' },\n  { stage: 5, text: '    leftProducts[i] = nums[i - 1] * leftProducts[i - 1];' },\n  { stage: 5, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 6, text: '  rightProducts[length - 1] = 1;' },\n  { stage: 7, text: '  for (let i = length - 2; i >= 0; i--) {' },\n  { stage: 7, text: '    rightProducts[i] = nums[i + 1] * rightProducts[i + 1];' },\n  { stage: 7, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 8, text: '  for (let i = 0; i < length; i++) {' },\n  { stage: 8, text: '    answer[i] = leftProducts[i] * rightProducts[i];' },\n  { stage: 8, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 9, text: '  return answer;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 78,\n  problemName: `Product of Array Except Self`,\n  problemText: `Given an array nums of \\`n\\` integers where \\`n > 1\\`,  return an array output such that \\`output[i]\\` is equal to the product of all the elements of\\` nums\\` except \\`nums[i]\\`.\n\n  Example:\n  \n  Input:  \\`[1,2,3,4]\\`\n  Output: \\`[24,12,8,6]\\`\n  Constraint: It's guaranteed that the product of the elements of any prefix or suffix of the array (including the whole array) fits in a 32 bit integer.\n  \n  Note: Please solve it **without** division and in O(n).`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: ``,\n      evaluate: `productExceptSelf([1, 2, 3, 4]);`,\n      expected: JSON.stringify([24, 12, 8, 6]),\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: ``,\n      evaluate: `productExceptSelf([5, 8, 4, 3, 7]);`,\n      expected: JSON.stringify([672, 420, 840, 1120, 480]),\n    },\n  ],\n  setupCode: ``,\n  category: GENERAL,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 300],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, ADVANCED, GRAPH } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 11, text: 'const directions = [' },\n  { stage: 11, text: '  [-1, -1],' },\n  { stage: 11, text: '  [-1, 0],' },\n  { stage: 11, text: '  [-1, 1],' },\n  { stage: 11, text: '  [0, -1],' },\n  { stage: 11, text: '  [0, 1],' },\n  { stage: 11, text: '  [1, -1],' },\n  { stage: 11, text: '  [1, 0],' },\n  { stage: 11, text: '  [1, 1],' },\n  { stage: 11, text: '];' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function shortestPathBinaryMatrix(grid) {' },\n  {\n    stage: 1,\n    text: '  if (grid[0][0] !== 0 || grid[grid.length - 1][grid[0].length - 1] !== 0) {',\n  },\n  { stage: 2, text: '    return -1;' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 3, text: '  const naiveQueue = [];' },\n  { stage: 3, text: '  grid[0][0] = 1;' },\n  { stage: 3, text: '  naiveQueue.push([0, 0]);' },\n  { stage: 0, text: '' },\n  { stage: 4, text: '  while (naiveQueue.length) {' },\n  { stage: 5, text: '    const cell = naiveQueue.shift();' },\n  { stage: 6, text: '    const row = cell[0];' },\n  { stage: 6, text: '    const col = cell[1];' },\n  { stage: 7, text: '    const distance = grid[row][col];' },\n  { stage: 8, text: '    if (row === grid.length - 1 && col === grid[0].length - 1) {' },\n  { stage: 9, text: '      return distance;' },\n  { stage: 8, text: '    }' },\n  { stage: 0, text: '' },\n  { stage: 10, text: '    for (let neighbour of getNeighbours(row, col, grid)) {' },\n  { stage: 18, text: '      const neighbourRow = neighbour[0];' },\n  { stage: 18, text: '      const neighbourCol = neighbour[1];' },\n  { stage: 19, text: '      naiveQueue.push([neighbourRow, neighbourCol]);' },\n  { stage: 19, text: '      grid[neighbourRow][neighbourCol] = distance + 1;' },\n  { stage: 10, text: '    }' },\n  { stage: 4, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 20, text: '  return -1;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 11, text: 'function getNeighbours(row, col, grid) {' },\n  { stage: 12, text: '  const neighbours = [];' },\n  { stage: 12, text: '  for (let i = 0; i < directions.length; i++) {' },\n  { stage: 13, text: '    const newRow = row + directions[i][0];' },\n  { stage: 13, text: '    const newCol = col + directions[i][1];' },\n  { stage: 14, text: '    if (' },\n  { stage: 14, text: '      newRow < 0 ||' },\n  { stage: 14, text: '      newCol < 0 ||' },\n  { stage: 14, text: '      newRow >= grid.length ||' },\n  { stage: 14, text: '      newCol >= grid[0].length ||' },\n  { stage: 14, text: '      grid[newRow][newCol] !== 0' },\n  { stage: 14, text: '    ) {' },\n  { stage: 15, text: '      continue;' },\n  { stage: 14, text: '    }' },\n  { stage: 16, text: '    neighbours.push([newRow, newCol]);' },\n  { stage: 12, text: '  }' },\n  { stage: 17, text: '  return neighbours;' },\n  { stage: 11, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 79,\n  problemName: `Shortest Path in a Binary Matrix`,\n  problemText: `Given an \\`n x n\\` binary matrix \\`grid\\`, return the length of the shortest clear path in the matrix. If there is no clear path, return \\`-1\\`.\n\n  A clear path in a binary matrix is a path from the top-left cell (i.e., (0, 0)) to the bottom-right cell (i.e., (n - 1, n - 1)) such that:\n  \n  All the visited cells of the path are 0.\n  All the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner).\n  The length of a clear path is the number of visited cells of this path.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: ``,\n      evaluate: `shortestPathBinaryMatrix([[0, 1],[1, 0]]);`,\n      expected: 2,\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: ``,\n      evaluate: `shortestPathBinaryMatrix([\n        [0, 0, 0],\n        [1, 1, 0],\n        [1, 1, 0],\n      ]);`,\n      expected: 4,\n    },\n    {\n      id: 3,\n      name: 'example 3 - no path',\n      inherit: [],\n      code: ``,\n      evaluate: `shortestPathBinaryMatrix([\n        [1, 0, 0],\n        [1, 1, 0],\n        [1, 1, 0],\n      ]);`,\n      expected: -1,\n    },\n  ],\n  setupCode: ``,\n  category: GRAPH,\n  type: ALGORITHM,\n  difficulty: ADVANCED,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [\n      0,\n      30,\n      60,\n      90,\n      120,\n      150,\n      180,\n      210,\n      240,\n      270,\n      300,\n      330,\n      360,\n      390,\n      420,\n      450,\n      480,\n      510,\n      540,\n      570,\n      630,\n    ],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, ADVANCED, LINKED_LIST } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: -1, text: 'function ListNode(val) {' },\n  { stage: -1, text: '  this.val = val;' },\n  { stage: -1, text: '  this.next = null;' },\n  { stage: -1, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function isPalindrome(head) {' },\n  { stage: 1, text: '  if (head === null) {' },\n  { stage: 1, text: '    return true;' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 2, text: '  const firstHalfEnd = endOfFirstHalf(head);' },\n  { stage: 2, text: '  const secondHalfStart = reverseList(firstHalfEnd.next);' },\n  { stage: 0, text: '' },\n  { stage: 14, text: '  let p1 = head;' },\n  { stage: 14, text: '  let p2 = secondHalfStart;' },\n  { stage: 14, text: '  let result = true;' },\n  { stage: 15, text: '  while (result && p2 !== null) {' },\n  { stage: 16, text: '    if (p1.val != p2.val) {' },\n  { stage: 16, text: '      result = false;' },\n  { stage: 16, text: '    }' },\n  { stage: 17, text: '    p1 = p1.next;' },\n  { stage: 17, text: '    p2 = p2.next;' },\n  { stage: 15, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 18, text: '  firstHalfEnd.next = reverseList(secondHalfStart);' },\n  { stage: 19, text: '  return result;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 8, text: 'function reverseList(head) {' },\n  { stage: 9, text: '  let prev = null;' },\n  { stage: 9, text: '  let curr = head;' },\n  { stage: 10, text: '  while (curr !== null) {' },\n  { stage: 11, text: '    let nextTemp = curr.next;' },\n  { stage: 11, text: '    curr.next = prev;' },\n  { stage: 12, text: '    prev = curr;' },\n  { stage: 12, text: '    curr = nextTemp;' },\n  { stage: 10, text: '  }' },\n  { stage: 13, text: '  return prev;' },\n  { stage: 8, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 3, text: 'function endOfFirstHalf(head) {' },\n  { stage: 4, text: '  let fast = head;' },\n  { stage: 4, text: '  let slow = head;' },\n  { stage: 5, text: '  while (fast.next !== null && fast.next.next !== null) {' },\n  { stage: 6, text: '    fast = fast.next.next;' },\n  { stage: 6, text: '    slow = slow.next;' },\n  { stage: 5, text: '  }' },\n  { stage: 7, text: '  return slow;' },\n  { stage: 3, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 80,\n  problemName: `Solve Palindrome Linked List`,\n  problemText: `Given a singly linked list's \\`head\\` node, determine if it is a palindrome.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: `const ex1 = new ListNode(1);\n      ex1.next = new ListNode(2);`,\n      evaluate: `isPalindrome(ex1);`,\n      expected: false,\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: `const ex2 = new ListNode(1);\n      ex2.next = new ListNode(2);\n      ex2.next.next = new ListNode(2);\n      ex2.next.next.next = new ListNode(1);`,\n      evaluate: `isPalindrome(ex2);`,\n      expected: true,\n    },\n    {\n      id: 3,\n      name: 'example 3',\n      inherit: [],\n      code: `const ex3 = new ListNode(1);\n      ex3.next = new ListNode(2);\n      ex3.next.next = new ListNode(3);\n      ex3.next.next.next = new ListNode(1);\n      ex3.next.next.next.next = new ListNode(2);\n      ex3.next.next.next.next.next = new ListNode(3);`,\n      evaluate: `isPalindrome(ex3);`,\n      expected: false,\n    },\n    {\n      id: 4,\n      name: 'example 4',\n      inherit: [],\n      code: `const ex4 = new ListNode(1);\n      ex4.next = new ListNode(2);\n      ex4.next.next = new ListNode(3);\n      ex4.next.next.next = new ListNode(4);\n      ex4.next.next.next.next = new ListNode(3);\n      ex4.next.next.next.next.next = new ListNode(2);\n      ex4.next.next.next.next.next.next = new ListNode(1);`,\n      evaluate: `isPalindrome(ex4);`,\n      expected: true,\n    },\n    {\n      id: 5,\n      name: 'example 5',\n      inherit: [],\n      code: `const ex5 = new ListNode(1);\n      ex5.next = new ListNode(2);\n      ex5.next.next = new ListNode(3);\n      ex5.next.next.next = new ListNode(3);\n      ex5.next.next.next.next = new ListNode(2);\n      ex5.next.next.next.next.next = new ListNode(1);\n      ex5.next.next.next.next.next.next = new ListNode(4);`,\n      evaluate: `isPalindrome(ex5);`,\n      expected: false,\n    },\n    {\n      id: 6,\n      name: 'example 6',\n      inherit: [],\n      code: `const ex6 = new ListNode(5);`,\n      evaluate: `isPalindrome(ex6);`,\n      expected: true,\n    },\n  ],\n  setupCode: `\n  function ListNode(val) {\n    this.val = val;\n    this.next = null;\n  }\n  `,\n  category: LINKED_LIST,\n  type: ALGORITHM,\n  difficulty: ADVANCED,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [\n      0,\n      30,\n      60,\n      90,\n      120,\n      150,\n      180,\n      210,\n      240,\n      270,\n      300,\n      330,\n      360,\n      390,\n      420,\n      450,\n      480,\n      510,\n      540,\n      600,\n    ],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, INTERMEDIATE, GENERAL } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function isAlienSorted(words, order) {' },\n  { stage: 1, text: '  const index = {};' },\n  { stage: 1, text: '  for (let i = 0; i < order.length; i++) {' },\n  { stage: 2, text: '    index[order[i]] = i;' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 3, text: '  for (let i = 0; i < words.length - 1; i++) {' },\n  { stage: 4, text: '    let word1 = words[i];' },\n  { stage: 4, text: '    let word2 = words[i + 1];' },\n  { stage: 0, text: '' },\n  { stage: 5, text: '    let breakLoop = false;' },\n  { stage: 6, text: '    for (let k = 0; k < Math.min(word1.length, word2.length); k++) {' },\n  { stage: 7, text: '      if (word1[k] !== word2[k]) {' },\n  { stage: 8, text: '        if (index[word1[k]] > index[word2[k]]) {' },\n  { stage: 9, text: '          return false;' },\n  { stage: 8, text: '        }' },\n  { stage: 9, text: '        breakLoop = true;' },\n  { stage: 9, text: '        break;' },\n  { stage: 7, text: '      }' },\n  { stage: 6, text: '    }' },\n  { stage: 0, text: '' },\n  { stage: 10, text: '    if (breakLoop) {' },\n  { stage: 10, text: '      continue;' },\n  { stage: 10, text: '    }' },\n  { stage: 0, text: '' },\n  { stage: 11, text: '    if (word1.length > word2.length) {' },\n  { stage: 11, text: '      return false;' },\n  { stage: 11, text: '    }' },\n  { stage: 3, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 12, text: '  return true;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 81,\n  problemName: `Verify Alien Dictionary`,\n  problemText: `In an alien language, surprisingly they also use english lowercase letters, but possibly in a different order. The order of the alphabet is some permutation of lowercase letters.\n\n  Given a sequence of \\`words\\` written in the alien language, and the \\`order\\` of the alphabet, return \\`true\\` if and only if the given \\`words\\` are sorted lexicographicaly in this alien language.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: `const words1 = ['hello', 'leetcode'];\n      const order1 = 'hlabcdefgijkmnopqrstuvwxyz';`,\n      evaluate: `isAlienSorted(words1, order1);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: `const words2 = ['word', 'world', 'row'];\n        const order2 = 'worldabcefghijkmnpqstuvxyz';`,\n      evaluate: `isAlienSorted(words2, order2);`,\n      expected: false,\n    },\n    {\n      id: 3,\n      name: 'example 3',\n      inherit: [],\n      code: `const words3 = ['apple', 'app'];\n      const order3 = 'abcdefghijklmnopqrstuvwxyz';`,\n      evaluate: `isAlienSorted(words3, order3);`,\n      expected: false,\n    },\n  ],\n  setupCode: ``,\n  category: GENERAL,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330, 390],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, INTERMEDIATE, GENERAL } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function lengthOfLongestSubstring(str) {' },\n  { stage: 1, text: '  let answer = 0;' },\n  { stage: 1, text: '  let map = {};' },\n  { stage: 2, text: '  for (let j = 0, i = 0; j < str.length; j++) {' },\n  { stage: 3, text: '    const char = str[j];' },\n  { stage: 4, text: '    if (map[char]) {' },\n  { stage: 4, text: '      i = Math.max(map[char], i);' },\n  { stage: 4, text: '    }' },\n  { stage: 5, text: '    answer = Math.max(answer, j - i + 1);' },\n  { stage: 6, text: '    map[char] = j + 1;' },\n  { stage: 2, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 7, text: '  return answer;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 82,\n  problemName: `Find Length of Longest Substring`,\n  problemText: `Given a string \\`str\\`, find the length of the longest substring without repeating characters.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: ``,\n      evaluate: `lengthOfLongestSubstring('abcabcbb');`,\n      expected: 3,\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: ``,\n      evaluate: `lengthOfLongestSubstring('bbbbb');`,\n      expected: 1,\n    },\n    {\n      id: 3,\n      name: 'example 3',\n      inherit: [],\n      code: ``,\n      evaluate: `lengthOfLongestSubstring('pwwkew');`,\n      expected: 3,\n    },\n    {\n      id: 4,\n      name: 'example 4',\n      inherit: [],\n      code: ``,\n      evaluate: `lengthOfLongestSubstring('');`,\n      expected: 0,\n    },\n  ],\n  setupCode: ``,\n  category: GENERAL,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 240],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, INTERMEDIATE, GENERAL } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function minMeetingRooms(intervals) {' },\n  { stage: 1, text: '  if (!intervals.length) {' },\n  { stage: 1, text: '    return 0;' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 2, text: '  const starts = [];' },\n  { stage: 2, text: '  const ends = [];' },\n  { stage: 0, text: '' },\n  { stage: 3, text: '  for (let i = 0; i < intervals.length; i++) {' },\n  { stage: 4, text: '    starts[i] = intervals[i][0];' },\n  { stage: 4, text: '    ends[i] = intervals[i][1];' },\n  { stage: 3, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 5, text: '  const numericalSort = (a, b) => {' },\n  { stage: 5, text: '    return a - b;' },\n  { stage: 5, text: '  };' },\n  { stage: 0, text: '' },\n  { stage: 6, text: '  starts.sort(numericalSort);' },\n  { stage: 6, text: '  ends.sort(numericalSort);' },\n  { stage: 0, text: '' },\n  { stage: 7, text: '  let startPointer = 0;' },\n  { stage: 7, text: '  let endPointer = 0;' },\n  { stage: 7, text: '  let usedRooms = 0;' },\n  { stage: 0, text: '' },\n  { stage: 8, text: '  while (startPointer < intervals.length) {' },\n  { stage: 9, text: '    if (starts[startPointer] >= ends[endPointer]) {' },\n  { stage: 10, text: '      usedRooms -= 1;' },\n  { stage: 10, text: '      endPointer += 1;' },\n  { stage: 9, text: '    }' },\n  { stage: 0, text: '' },\n  { stage: 11, text: '    usedRooms += 1;' },\n  { stage: 11, text: '    startPointer += 1;' },\n  { stage: 8, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 12, text: '  return usedRooms;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 83,\n  problemName: `Find the minimum number of Meeting Rooms needed.`,\n  problemText: `Given an array of meeting time \\`intervals\\` where \\`intervals[i] = [start-i, end-i]\\`, return the minimum number of conference rooms required.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: ``,\n      evaluate: `minMeetingRooms([\n        [0, 30],\n        [5, 10],\n        [15, 20],\n      ]);`,\n      expected: 2,\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: ``,\n      evaluate: `minMeetingRooms([\n        [7, 10],\n        [2, 4],\n      ]);`,\n      expected: 1,\n    },\n    {\n      id: 3,\n      name: 'example 3',\n      inherit: [],\n      code: ``,\n      evaluate: `minMeetingRooms([\n        [1, 10],\n        [2, 7],\n        [3, 19],\n        [8, 12],\n        [10, 20],\n        [11, 30],\n      ]);`,\n      expected: 4,\n    },\n  ],\n  setupCode: ``,\n  category: GENERAL,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330, 390],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, INTERMEDIATE, DESIGN } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class MetroSystem {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 1, text: '    this.inProgress = {};' },\n  { stage: 2, text: '    this.finished = {};' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '  checkIn(id, stationName, t) {' },\n  { stage: 0, text: '' },\n  { stage: 3, text: '    this.inProgress[id] = { stationName, t };' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '  checkOut(id, stationName, t) {' },\n  { stage: 0, text: '' },\n  { stage: 4, text: '    const checkInRecord = this.inProgress[id];' },\n  { stage: 4, text: '    delete this.inProgress[id];' },\n  { stage: 5, text: '    if (!this.finished[checkInRecord.stationName]) {' },\n  { stage: 6, text: '      this.finished[checkInRecord.stationName] = {};' },\n  { stage: 5, text: '    }' },\n  { stage: 7, text: '    if (!this.finished[checkInRecord.stationName][stationName]) {' },\n  {\n    stage: 8,\n    text: '      this.finished[checkInRecord.stationName][stationName] = { sum: 0, trips: 0 };',\n  },\n  { stage: 7, text: '    }' },\n  { stage: 9, text: '    const route = this.finished[checkInRecord.stationName][stationName];' },\n  { stage: 9, text: '    route.sum += t - checkInRecord.t;' },\n  { stage: 9, text: '    route.trips++;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '  getAverageTime(startStation, endStation) {' },\n  { stage: 0, text: '' },\n  { stage: 10, text: '    const route = this.finished[startStation][endStation];' },\n  { stage: 11, text: '    return route.sum / route.trips;' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 84,\n  problemName: `Design a Metro System.`,\n  problemText: `Implement the *MetroSystem* class:\n\n**checkIn** (\\`id\\`: number, \\`stationName\\`: string, \\`t\\`: number) void\n  \n   - A customer with a card id equal to \\`id\\`, gets in the station \\`stationName\\` at time \\`t\\`.  A customer can only be checked into one place at a time.\n\n**checkOut** (\\`id\\`: number, \\`stationName\\`: string, \\`t\\`: number) void\n  \n   - A customer with a card id equal to \\`id\\`, gets out from the station \\`stationName\\` at time \\`t\\`.\n  \n**getAverageTime** (\\`startStation\\`: string, \\`endStation\\`: string) number\n  \n   - Returns the average time to travel between the \\`startStation\\` and the \\`endStation\\`.  The average time is computed from all the previous traveling from \\`startStation\\` to \\`endStation\\` that happened directly.  Call to **getAverageTime** is always valid.\n\nYou can assume all calls to **checkIn** and **checkOut** methods are consistent. If a customer gets in at time t<sub>1</sub> at some station, they get out at time t<sub>2</sub> with t<sub>2</sub> > t<sub>1</sub>. All events happen in chronological order.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'compiles',\n      inherit: [],\n      code: `const metroSystem = new MetroSystem();`,\n      evaluate: `Boolean(metroSystem);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'correct output 1',\n      inherit: [1],\n      code: `metroSystem.checkIn(45, 'Leyton', 3);\n      metroSystem.checkIn(32, 'Paradise', 8);\n      metroSystem.checkIn(27, 'Leyton', 10);\n      metroSystem.checkOut(45, 'Waterloo', 15);\n      metroSystem.checkOut(27, 'Waterloo', 20);\n      metroSystem.checkOut(32, 'Cambridge', 22);`,\n      evaluate: `metroSystem.getAverageTime('Paradise', 'Cambridge');`,\n      expected: 14,\n    },\n    {\n      id: 3,\n      name: 'correct output 2',\n      inherit: [1, 2],\n      code: ``,\n      evaluate: `metroSystem.getAverageTime('Leyton', 'Waterloo');`,\n      expected: 11,\n    },\n    {\n      id: 4,\n      name: 'correct output 3',\n      inherit: [1, 2],\n      code: `metroSystem.checkIn(10, 'Leyton', 24);`,\n      evaluate: `metroSystem.getAverageTime('Leyton', 'Waterloo');`,\n      expected: 11,\n    },\n    {\n      id: 5,\n      name: 'correct output 4',\n      inherit: [1, 2, 4],\n      code: `metroSystem.checkOut(10, 'Waterloo', 38);`,\n      evaluate: `metroSystem.getAverageTime('Leyton', 'Waterloo');`,\n      expected: 12,\n    },\n  ],\n  setupCode: ``,\n  category: DESIGN,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 360],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, EXPERT, DYNAMIC_PROGRAMMING } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function maximalSquare(matrix) {' },\n  { stage: 1, text: '  let rows = matrix.length;' },\n  { stage: 1, text: '  let cols = rows > 0 ? matrix[0].length : 0;' },\n  { stage: 0, text: '' },\n  { stage: 2, text: '  let dp = new Array(cols + 1).fill(0);' },\n  { stage: 3, text: '  let maxsqlen = 0;' },\n  { stage: 3, text: '  let prev = 0;' },\n  { stage: 0, text: '' },\n  { stage: 4, text: '  for (let i = 1; i <= rows; i++) {' },\n  { stage: 5, text: '    for (let j = 1; j <= cols; j++) {' },\n  { stage: 6, text: '      let temp = dp[j];' },\n  { stage: 7, text: \"      if (matrix[i - 1][j - 1] === '1') {\" },\n  { stage: 8, text: '        dp[j] = Math.min(Math.min(dp[j - 1], prev), dp[j]) + 1;' },\n  { stage: 9, text: '        maxsqlen = Math.max(maxsqlen, dp[j]);' },\n  { stage: 7, text: '      } else {' },\n  { stage: 10, text: '        dp[j] = 0;' },\n  { stage: 7, text: '      }' },\n  { stage: 11, text: '      prev = temp;' },\n  { stage: 5, text: '    }' },\n  { stage: 4, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 12, text: '  return maxsqlen * maxsqlen;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 85,\n  problemName: `Find the Maximal Square in a Grid.`,\n  problemText: `Given an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: `const matrix = [\n        ['1', '0', '1', '0', '0'],\n        ['1', '0', '1', '1', '1'],\n        ['1', '1', '1', '1', '1'],\n        ['1', '0', '0', '1', '0'],\n      ];`,\n      evaluate: `maximalSquare(matrix);`,\n      expected: 4,\n    },\n  ],\n  setupCode: ``,\n  category: DYNAMIC_PROGRAMMING,\n  type: ALGORITHM,\n  difficulty: EXPERT,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330, 390],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, SLIDING_WINDOW, BEGINNER } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function find_averages_of_subarrays(K, arr) {' },\n  { stage: 1, text: '  const result = [];' },\n  { stage: 2, text: '  let windowSum = 0.0;' },\n  { stage: 2, text: '  let windowStart = 0;' },\n  { stage: 3, text: '  for (let windowEnd = 0; windowEnd < arr.length; windowEnd++) {' },\n  { stage: 4, text: '    windowSum += arr[windowEnd];' },\n  { stage: 5, text: '    if (windowEnd >= K - 1) {' },\n  { stage: 6, text: '      result.push(windowSum / K);' },\n  { stage: 7, text: '      windowSum -= arr[windowStart];' },\n  { stage: 7, text: '      windowStart += 1;' },\n  { stage: 5, text: '    }' },\n  { stage: 3, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 8, text: '  return result;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 86,\n  problemName: `Find Average of Subarrays`,\n  problemText: `Given an array, find the average of all contiguous subarrays of size ‘K’ in it.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: ``,\n      evaluate: `find_averages_of_subarrays(5, [1, 3, 2, 6, -1, 4, 1, 8, 2]);`,\n      expected: JSON.stringify([2.2, 2.8, 2.4, 3.6, 2.8]),\n    },\n  ],\n  setupCode: ``,\n  category: SLIDING_WINDOW,\n  type: ALGORITHM,\n  difficulty: BEGINNER,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 270],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, SLIDING_WINDOW, BEGINNER } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function max_sub_array_of_size_k(k, arr) {' },\n  { stage: 1, text: '  let maxSum = 0;' },\n  { stage: 1, text: '  let windowSum = 0;' },\n  { stage: 0, text: '' },\n  { stage: 2, text: '  for (let i = 0; i < arr.length - k + 1; i++) {' },\n  { stage: 3, text: '    windowSum = 0;' },\n  { stage: 4, text: '    for (let j = i; j < i + k; j++) {' },\n  { stage: 5, text: '      windowSum += arr[j];' },\n  { stage: 4, text: '    }' },\n  { stage: 6, text: '    maxSum = Math.max(maxSum, windowSum);' },\n  { stage: 2, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 7, text: '  return maxSum;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 87,\n  problemName: `Find maximum of subarrays.`,\n  problemText: `Given an array of positive numbers and a positive number ‘k,’ find the maximum sum of any contiguous subarray of size ‘k’.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: ``,\n      evaluate: `max_sub_array_of_size_k(3, [2, 1, 5, 1, 3, 2]);`,\n      expected: 9,\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: ``,\n      evaluate: `max_sub_array_of_size_k(2, [2, 3, 4, 1, 5]);`,\n      expected: 7,\n    },\n  ],\n  setupCode: ``,\n  category: SLIDING_WINDOW,\n  type: ALGORITHM,\n  difficulty: BEGINNER,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 240],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, SLIDING_WINDOW, BEGINNER } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function smallest_subarray_with_given_sum(s, arr) {' },\n  { stage: 1, text: '  let windowSum = 0;' },\n  { stage: 1, text: '  let minLength = Infinity;' },\n  { stage: 1, text: '  let windowStart = 0;' },\n  { stage: 0, text: '' },\n  { stage: 2, text: '  for (let windowEnd = 0; windowEnd < arr.length; windowEnd++) {' },\n  { stage: 3, text: '    windowSum += arr[windowEnd];' },\n  { stage: 4, text: '    while (windowSum >= s) {' },\n  { stage: 5, text: '      minLength = Math.min(minLength, windowEnd - windowStart + 1);' },\n  { stage: 6, text: '      windowSum -= arr[windowStart];' },\n  { stage: 6, text: '      windowStart += 1;' },\n  { stage: 4, text: '    }' },\n  { stage: 2, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 7, text: '  if (minLength === Infinity) {' },\n  { stage: 7, text: '    return 0;' },\n  { stage: 7, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 8, text: '  return minLength;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 88,\n  problemName: `Smallest Subarray given Sum.`,\n  problemText: `Given an array of positive numbers and a positive number ‘S,’ find the length of the smallest contiguous subarray whose sum is greater than or equal to ‘S’. Return 0 if no such subarray exists.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: ``,\n      evaluate: `smallest_subarray_with_given_sum(7, [2, 1, 5, 2, 3, 2]);`,\n      expected: 2,\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: ``,\n      evaluate: `smallest_subarray_with_given_sum(7, [2, 1, 5, 2, 8]);`,\n      expected: 1,\n    },\n    {\n      id: 3,\n      name: 'example 3',\n      inherit: [],\n      code: ``,\n      evaluate: `smallest_subarray_with_given_sum(8, [3, 4, 1, 1, 6]);`,\n      expected: 3,\n    },\n  ],\n  setupCode: ``,\n  category: SLIDING_WINDOW,\n  type: ALGORITHM,\n  difficulty: BEGINNER,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 270],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, SLIDING_WINDOW, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function longest_substring_with_k_distinct(str, k) {' },\n  { stage: 1, text: '  let windowStart = 0;' },\n  { stage: 1, text: '  let maxLength = 0;' },\n  { stage: 2, text: '  let charFrequency = {};' },\n  { stage: 0, text: '' },\n  { stage: 3, text: '  for (let windowEnd = 0; windowEnd < str.length; windowEnd++) {' },\n  { stage: 4, text: '    const rightChar = str[windowEnd];' },\n  { stage: 5, text: '    if (!(rightChar in charFrequency)) {' },\n  { stage: 5, text: '      charFrequency[rightChar] = 0;' },\n  { stage: 5, text: '    }' },\n  { stage: 6, text: '    charFrequency[rightChar] += 1;' },\n  { stage: 0, text: '' },\n  { stage: 7, text: '    while (Object.keys(charFrequency).length > k) {' },\n  { stage: 8, text: '      const leftChar = str[windowStart];' },\n  { stage: 8, text: '      charFrequency[leftChar] -= 1;' },\n  { stage: 9, text: '      if (charFrequency[leftChar] === 0) {' },\n  { stage: 9, text: '        delete charFrequency[leftChar];' },\n  { stage: 9, text: '      }' },\n  { stage: 10, text: '      windowStart += 1;' },\n  { stage: 7, text: '    }' },\n  { stage: 0, text: '' },\n  { stage: 11, text: '    maxLength = Math.max(maxLength, windowEnd - windowStart + 1);' },\n  { stage: 3, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 12, text: '  return maxLength;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 89,\n  problemName: `Longest Substring K Distinct Characters`,\n  problemText: `Given a string, find the length of the longest substring in it with no more than K distinct characters.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: ``,\n      evaluate: `longest_substring_with_k_distinct('araaci', 2);`,\n      expected: 4,\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: ``,\n      evaluate: `longest_substring_with_k_distinct('araaci', 1);`,\n      expected: 2,\n    },\n    {\n      id: 3,\n      name: 'example 3',\n      inherit: [],\n      code: ``,\n      evaluate: `longest_substring_with_k_distinct('cbbebi', 3);`,\n      expected: 5,\n    },\n  ],\n  setupCode: ``,\n  category: SLIDING_WINDOW,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330, 390],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, SLIDING_WINDOW, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function fruits_into_baskets(fruits) {' },\n  { stage: 1, text: '  let windowStart = 0;' },\n  { stage: 1, text: '  let maxLength = 0;' },\n  { stage: 2, text: '  let fruitFrequency = {};' },\n  { stage: 0, text: '' },\n  { stage: 3, text: '  for (let windowEnd = 0; windowEnd < fruits.length; windowEnd++) {' },\n  { stage: 4, text: '    const rightFruit = fruits[windowEnd];' },\n  { stage: 5, text: '    if (!(rightFruit in fruitFrequency)) {' },\n  { stage: 5, text: '      fruitFrequency[rightFruit] = 0;' },\n  { stage: 5, text: '    }' },\n  { stage: 6, text: '    fruitFrequency[rightFruit] += 1;' },\n  { stage: 0, text: '' },\n  { stage: 7, text: '    while (Object.keys(fruitFrequency).length > 2) {' },\n  { stage: 8, text: '      const leftFruit = fruits[windowStart];' },\n  { stage: 8, text: '      fruitFrequency[leftFruit] -= 1;' },\n  { stage: 9, text: '      if (fruitFrequency[leftFruit] === 0) {' },\n  { stage: 9, text: '        delete fruitFrequency[leftFruit];' },\n  { stage: 9, text: '      }' },\n  { stage: 10, text: '      windowStart += 1;' },\n  { stage: 7, text: '    }' },\n  { stage: 11, text: '    maxLength = Math.max(maxLength, windowEnd - windowStart + 1);' },\n  { stage: 3, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 12, text: '  return maxLength;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 90,\n  problemName: `Fruits into Basket`,\n  problemText: `Given an array of characters where each character represents a fruit tree, you are given two baskets, and your goal is to put maximum number of fruits in each basket. The only restriction is that each basket can have only one type of fruit.\n\n  You can start with any tree, but you can’t skip a tree once you have started. You will pick one fruit from each tree until you cannot, i.e., you will stop when you have to pick from a third fruit type.\n  \n  Write a function to return the maximum number of fruits in both baskets.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: ``,\n      evaluate: `fruits_into_baskets(['A', 'B', 'C', 'A', 'C']);`,\n      expected: 3,\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: ``,\n      evaluate: `fruits_into_baskets(['A', 'B', 'C', 'B', 'B', 'C']);`,\n      expected: 5,\n    },\n  ],\n  setupCode: ``,\n  category: SLIDING_WINDOW,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330, 390],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, SLIDING_WINDOW, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function non_repeat_substring(str) {' },\n  { stage: 1, text: '  let windowStart = 0;' },\n  { stage: 1, text: '  let maxLength = 0;' },\n  { stage: 2, text: '  let charIndexMap = {};' },\n  { stage: 0, text: '' },\n  { stage: 3, text: '  for (let windowEnd = 0; windowEnd < str.length; windowEnd++) {' },\n  { stage: 4, text: '    const rightChar = str[windowEnd];' },\n  { stage: 5, text: '    if (rightChar in charIndexMap) {' },\n  { stage: 6, text: '      windowStart = Math.max(windowStart, charIndexMap[rightChar] + 1);' },\n  { stage: 5, text: '    }' },\n  { stage: 0, text: '' },\n  { stage: 7, text: '    charIndexMap[rightChar] = windowEnd;' },\n  { stage: 7, text: '    maxLength = Math.max(maxLength, windowEnd - windowStart + 1);' },\n  { stage: 3, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 8, text: '  return maxLength;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 91,\n  problemName: `No Repeat Substring`,\n  problemText: `Given a string, find the length of the longest substring, which has no repeating characters.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: ``,\n      evaluate: `non_repeat_substring('aabccbb');`,\n      expected: 3,\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: ``,\n      evaluate: `non_repeat_substring('abbbb');`,\n      expected: 2,\n    },\n    {\n      id: 3,\n      name: 'example 3',\n      inherit: [],\n      code: ``,\n      evaluate: `non_repeat_substring('abccde');`,\n      expected: 3,\n    },\n  ],\n  setupCode: ``,\n  category: SLIDING_WINDOW,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 270],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, SLIDING_WINDOW, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function length_of_longest_substring(str, k) {' },\n  { stage: 1, text: '  let windowStart = 0;' },\n  { stage: 1, text: '  let maxLength = 0;' },\n  { stage: 2, text: '  let maxRepeatLetterCount = 0;' },\n  { stage: 2, text: '  let frequencyMap = {};' },\n  { stage: 0, text: '' },\n  { stage: 3, text: '  for (let windowEnd = 0; windowEnd < str.length; windowEnd++) {' },\n  { stage: 4, text: '    const rightChar = str[windowEnd];' },\n  { stage: 5, text: '    if (!(rightChar in frequencyMap)) {' },\n  { stage: 5, text: '      frequencyMap[rightChar] = 0;' },\n  { stage: 5, text: '    }' },\n  { stage: 6, text: '    frequencyMap[rightChar] += 1;' },\n  {\n    stage: 7,\n    text: '    maxRepeatLetterCount = Math.max(maxRepeatLetterCount, frequencyMap[rightChar]);',\n  },\n  { stage: 0, text: '' },\n  { stage: 8, text: '    if (windowEnd - windowStart + 1 - maxRepeatLetterCount > k) {' },\n  { stage: 9, text: '      let leftChar = str[windowStart];' },\n  { stage: 9, text: '      frequencyMap[leftChar] -= 1;' },\n  { stage: 9, text: '      windowStart += 1;' },\n  { stage: 8, text: '    }' },\n  { stage: 0, text: '' },\n  { stage: 10, text: '    maxLength = Math.max(maxLength, windowEnd - windowStart + 1);' },\n  { stage: 3, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 11, text: '  return maxLength;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 92,\n  problemName: `Longest Substring Same Letter`,\n  problemText: `Given a string with lowercase letters only, if you are allowed to replace no more than ‘k’ letters with any letter, find the length of the longest substring having the same letters after replacement.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: ``,\n      evaluate: `length_of_longest_substring('aabccbb', 2);`,\n      expected: 5,\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: ``,\n      evaluate: `length_of_longest_substring('abbcb', 1);`,\n      expected: 4,\n    },\n    {\n      id: 3,\n      name: 'example 3',\n      inherit: [],\n      code: ``,\n      evaluate: `length_of_longest_substring('abccde', 1);`,\n      expected: 3,\n    },\n  ],\n  setupCode: ``,\n  category: SLIDING_WINDOW,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 360],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, SLIDING_WINDOW, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function length_of_longest_substring(arr, k) {' },\n  { stage: 1, text: '  let windowStart = 0;' },\n  { stage: 1, text: '  let maxLength = 0;' },\n  { stage: 1, text: '  let maxOnesCount = 0;' },\n  { stage: 0, text: '' },\n  { stage: 2, text: '  for (let windowEnd = 0; windowEnd < arr.length; windowEnd++) {' },\n  { stage: 3, text: '    if (arr[windowEnd] === 1) {' },\n  { stage: 4, text: '      maxOnesCount += 1;' },\n  { stage: 3, text: '    }' },\n  { stage: 0, text: '' },\n  { stage: 5, text: '    if (windowEnd - windowStart + 1 - maxOnesCount > k) {' },\n  { stage: 6, text: '      if (arr[windowStart] === 1) {' },\n  { stage: 7, text: '        maxOnesCount -= 1;' },\n  { stage: 6, text: '      }' },\n  { stage: 7, text: '      windowStart += 1;' },\n  { stage: 5, text: '    }' },\n  { stage: 0, text: '' },\n  { stage: 8, text: '    maxLength = Math.max(maxLength, windowEnd - windowStart + 1);' },\n  { stage: 2, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 9, text: '  return maxLength;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 93,\n  problemName: `Longest Binary Subarray After Replacement`,\n  problemText: `Given an array containing 0s and 1s, if you are allowed to replace no more than ‘k’ 0s with 1s, find the length of the longest contiguous subarray having all 1s.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: ``,\n      evaluate: `length_of_longest_substring([0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1], 2);`,\n      expected: 6,\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: ``,\n      evaluate: `length_of_longest_substring([0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1], 3);`,\n      expected: 9,\n    },\n  ],\n  setupCode: ``,\n  category: SLIDING_WINDOW,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 300],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, SLIDING_WINDOW, ADVANCED } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function find_permutation(str, pattern) {' },\n  { stage: 1, text: '  let windowStart = 0;' },\n  { stage: 1, text: '  let matched = 0;' },\n  { stage: 1, text: '  let charFrequency = {};' },\n  { stage: 0, text: '' },\n  { stage: 2, text: '  for (let i = 0; i < pattern.length; i++) {' },\n  { stage: 3, text: '    const chr = pattern[i];' },\n  { stage: 4, text: '    if (!(chr in charFrequency)) {' },\n  { stage: 5, text: '      charFrequency[chr] = 0;' },\n  { stage: 4, text: '    }' },\n  { stage: 5, text: '    charFrequency[chr] += 1;' },\n  { stage: 2, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 6, text: '  for (let windowEnd = 0; windowEnd < str.length; windowEnd++) {' },\n  { stage: 7, text: '    const rightChar = str[windowEnd];' },\n  { stage: 8, text: '    if (rightChar in charFrequency) {' },\n  { stage: 9, text: '      charFrequency[rightChar] -= 1;' },\n  { stage: 10, text: '      if (charFrequency[rightChar] === 0) {' },\n  { stage: 10, text: '        matched += 1;' },\n  { stage: 10, text: '      }' },\n  { stage: 8, text: '    }' },\n  { stage: 0, text: '' },\n  { stage: 11, text: '    if (matched === Object.keys(charFrequency).length) {' },\n  { stage: 11, text: '      return true;' },\n  { stage: 11, text: '    }' },\n  { stage: 0, text: '' },\n  { stage: 12, text: '    if (windowEnd >= pattern.length - 1) {' },\n  { stage: 13, text: '      let leftChar = str[windowStart];' },\n  { stage: 13, text: '      windowStart += 1;' },\n  { stage: 14, text: '      if (leftChar in charFrequency) {' },\n  { stage: 15, text: '        if (charFrequency[leftChar] === 0) {' },\n  { stage: 16, text: '          matched -= 1;' },\n  { stage: 15, text: '        }' },\n  { stage: 17, text: '        charFrequency[leftChar] += 1;' },\n  { stage: 14, text: '      }' },\n  { stage: 12, text: '    }' },\n  { stage: 6, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 18, text: '  return false;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 94,\n  problemName: `Permutation in a String`,\n  problemText: `Given a string and a pattern, find out if the string contains any permutation of the pattern.\n\nPermutation is defined as the re-arranging of the characters of the string. For example, “abc” has the following six permutations:\n  \n   - abc\n   - acb\n   - bac\n   - bca\n   - cab\n   - cba\n  \nIf a string has ‘n’ distinct characters, it will have n!n! permutations.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: ``,\n      evaluate: `find_permutation('oidbcaf', 'abc');`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: ``,\n      evaluate: `find_permutation('odicf', 'dc');`,\n      expected: false,\n    },\n    {\n      id: 3,\n      name: 'example 3',\n      inherit: [],\n      code: ``,\n      evaluate: `find_permutation('bcdxabcdy', 'bcdyabcdx');`,\n      expected: true,\n    },\n    {\n      id: 4,\n      name: 'example 4',\n      inherit: [],\n      code: ``,\n      evaluate: `find_permutation('aaacb', 'abc');`,\n      expected: true,\n    },\n  ],\n  setupCode: ``,\n  category: SLIDING_WINDOW,\n  type: ALGORITHM,\n  difficulty: ADVANCED,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [\n      0,\n      30,\n      60,\n      90,\n      120,\n      150,\n      180,\n      210,\n      240,\n      270,\n      300,\n      330,\n      360,\n      390,\n      420,\n      450,\n      480,\n      510,\n      570,\n    ],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, SLIDING_WINDOW, ADVANCED } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function find_string_anagrams(str, pattern) {' },\n  { stage: 1, text: '  let windowStart = 0;' },\n  { stage: 1, text: '  let matched = 0;' },\n  { stage: 1, text: '  let charFrequency = {};' },\n  { stage: 0, text: '' },\n  { stage: 2, text: '  for (let i = 0; i < pattern.length; i++) {' },\n  { stage: 3, text: '    const chr = pattern[i];' },\n  { stage: 4, text: '    if (!(chr in charFrequency)) {' },\n  { stage: 5, text: '      charFrequency[chr] = 0;' },\n  { stage: 4, text: '    }' },\n  { stage: 6, text: '    charFrequency[chr] += 1;' },\n  { stage: 2, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 7, text: '  const resultIndices = [];' },\n  { stage: 0, text: '' },\n  { stage: 8, text: '  for (let windowEnd = 0; windowEnd < str.length; windowEnd++) {' },\n  { stage: 9, text: '    const rightChar = str[windowEnd];' },\n  { stage: 10, text: '    if (rightChar in charFrequency) {' },\n  { stage: 11, text: '      charFrequency[rightChar] -= 1;' },\n  { stage: 12, text: '      if (charFrequency[rightChar] === 0) {' },\n  { stage: 12, text: '        matched += 1;' },\n  { stage: 12, text: '      }' },\n  { stage: 10, text: '    }' },\n  { stage: 0, text: '' },\n  { stage: 13, text: '    if (matched === Object.keys(charFrequency).length) {' },\n  { stage: 14, text: '      resultIndices.push(windowStart);' },\n  { stage: 13, text: '    }' },\n  { stage: 0, text: '' },\n  { stage: 15, text: '    if (windowEnd >= pattern.length - 1) {' },\n  { stage: 16, text: '      let leftChar = str[windowStart];' },\n  { stage: 16, text: '      windowStart += 1;' },\n  { stage: 17, text: '      if (leftChar in charFrequency) {' },\n  { stage: 18, text: '        if (charFrequency[leftChar] === 0) {' },\n  { stage: 19, text: '          matched -= 1;' },\n  { stage: 18, text: '        }' },\n  { stage: 19, text: '        charFrequency[leftChar] += 1;' },\n  { stage: 17, text: '      }' },\n  { stage: 15, text: '    }' },\n  { stage: 8, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 20, text: '  return resultIndices;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 95,\n  problemName: `String Anagrams`,\n  problemText: `Given a string and a pattern, find all anagrams of the pattern in the given string.\n\nAnagram is actually a Permutation of a string. For example, “abc” has the following six anagrams:\n  \n   - abc\n   - acb\n   - bac\n   - bca\n   - cab\n   - cba\n  \nWrite a function to return a list of starting indices of the anagrams of the pattern in the given string.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: ``,\n      evaluate: `find_string_anagrams('ppqp', 'pq');`,\n      expected: JSON.stringify([1, 2]),\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: ``,\n      evaluate: `find_string_anagrams('abbcabc', 'abc');`,\n      expected: JSON.stringify([2, 3, 4]),\n    },\n  ],\n  setupCode: ``,\n  category: SLIDING_WINDOW,\n  type: ALGORITHM,\n  difficulty: ADVANCED,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [\n      0,\n      30,\n      60,\n      90,\n      120,\n      150,\n      180,\n      210,\n      240,\n      270,\n      300,\n      330,\n      360,\n      390,\n      420,\n      450,\n      480,\n      510,\n      540,\n      570,\n      630,\n    ],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, SLIDING_WINDOW, ADVANCED } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function find_substring(str, pattern) {' },\n  { stage: 1, text: '  let windowStart = 0;' },\n  { stage: 1, text: '  let matched = 0;' },\n  { stage: 1, text: '  let substrStart = 0;' },\n  { stage: 2, text: '  let minLength = str.length + 1;' },\n  { stage: 2, text: '  let charFrequency = {};' },\n  { stage: 0, text: '' },\n  { stage: 3, text: '  for (let i = 0; i < pattern.length; i++) {' },\n  { stage: 4, text: '    const chr = pattern[i];' },\n  { stage: 5, text: '    if (!(chr in charFrequency)) {' },\n  { stage: 6, text: '      charFrequency[chr] = 0;' },\n  { stage: 5, text: '    }' },\n  { stage: 6, text: '    charFrequency[chr] += 1;' },\n  { stage: 3, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 7, text: '  for (let windowEnd = 0; windowEnd < str.length; windowEnd++) {' },\n  { stage: 8, text: '    const rightChar = str[windowEnd];' },\n  { stage: 9, text: '    if (rightChar in charFrequency) {' },\n  { stage: 10, text: '      charFrequency[rightChar] -= 1;' },\n  { stage: 11, text: '      if (charFrequency[rightChar] >= 0) {' },\n  { stage: 11, text: '        matched += 1;' },\n  { stage: 11, text: '      }' },\n  { stage: 9, text: '    }' },\n  { stage: 0, text: '' },\n  { stage: 12, text: '    while (matched === pattern.length) {' },\n  { stage: 13, text: '      if (minLength > windowEnd - windowStart + 1) {' },\n  { stage: 14, text: '        minLength = windowEnd - windowStart + 1;' },\n  { stage: 14, text: '        substrStart = windowStart;' },\n  { stage: 13, text: '      }' },\n  { stage: 0, text: '' },\n  { stage: 15, text: '      const leftChar = str[windowStart];' },\n  { stage: 15, text: '      windowStart += 1;' },\n  { stage: 0, text: '' },\n  { stage: 16, text: '      if (leftChar in charFrequency) {' },\n  { stage: 17, text: '        if (charFrequency[leftChar] === 0) {' },\n  { stage: 17, text: '          matched -= 1;' },\n  { stage: 17, text: '        }' },\n  { stage: 18, text: '        charFrequency[leftChar] += 1;' },\n  { stage: 16, text: '      }' },\n  { stage: 12, text: '    }' },\n  { stage: 7, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 19, text: '  if (minLength > str.length) {' },\n  { stage: 19, text: '    return \"\";' },\n  { stage: 19, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 20, text: '  return str.substring(substrStart, substrStart + minLength);' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 96,\n  problemName: `Smallest Window Containing Substring`,\n  problemText: `Given a string and a pattern, find the smallest substring in the given string which has all the characters of the given pattern.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: ``,\n      evaluate: `find_substring('aabdec', 'abc');`,\n      expected: 'abdec',\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: ``,\n      evaluate: `find_substring('abdbca', 'abc');`,\n      expected: 'bca',\n    },\n    {\n      id: 3,\n      name: 'example 3',\n      inherit: [],\n      code: ``,\n      evaluate: `find_substring('adcad', 'abc');`,\n      expected: '',\n    },\n  ],\n  setupCode: ``,\n  category: SLIDING_WINDOW,\n  type: ALGORITHM,\n  difficulty: ADVANCED,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [\n      0,\n      30,\n      60,\n      90,\n      120,\n      150,\n      180,\n      210,\n      240,\n      270,\n      300,\n      330,\n      360,\n      390,\n      420,\n      450,\n      480,\n      510,\n      540,\n      570,\n      630,\n    ],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, SLIDING_WINDOW, ADVANCED } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function find_word_concatenation(str, words) {' },\n  { stage: 1, text: '  if (words.length === 0 || words[0].length === 0) {' },\n  { stage: 1, text: '    return [];' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 2, text: '  const wordFrequency = {};' },\n  { stage: 0, text: '' },\n  { stage: 3, text: '  words.forEach(word => {' },\n  { stage: 4, text: '    if (!(word in wordFrequency)) {' },\n  { stage: 5, text: '      wordFrequency[word] = 0;' },\n  { stage: 4, text: '    }' },\n  { stage: 5, text: '    wordFrequency[word] += 1;' },\n  { stage: 3, text: '  });' },\n  { stage: 0, text: '' },\n  { stage: 6, text: '  const resultIndices = [];' },\n  { stage: 6, text: '  const wordsCount = words.length;' },\n  { stage: 6, text: '  const wordLength = words[0].length;' },\n  { stage: 0, text: '' },\n  { stage: 7, text: '  for (let i = 0; i < str.length - wordsCount * wordLength + 1; i++) {' },\n  { stage: 8, text: '    const wordsSeen = {};' },\n  { stage: 9, text: '    for (let j = 0; j < wordsCount; j++) {' },\n  { stage: 10, text: '      let next_word_index = i + j * wordLength;' },\n  {\n    stage: 11,\n    text: '      let word = str.substring(next_word_index, next_word_index + wordLength);',\n  },\n  { stage: 12, text: '      if (!(word in wordFrequency)) {' },\n  { stage: 12, text: '        break;' },\n  { stage: 12, text: '      }' },\n  { stage: 0, text: '' },\n  { stage: 13, text: '      if (!(word in wordsSeen)) {' },\n  { stage: 13, text: '        wordsSeen[word] = 0;' },\n  { stage: 13, text: '      }' },\n  { stage: 14, text: '      wordsSeen[word] += 1;' },\n  { stage: 0, text: '' },\n  { stage: 15, text: '      if (wordsSeen[word] > (wordFrequency[word] || 0)) {' },\n  { stage: 15, text: '        break;' },\n  { stage: 15, text: '      }' },\n  { stage: 0, text: '' },\n  { stage: 16, text: '      if (j + 1 === wordsCount) {' },\n  { stage: 16, text: '        resultIndices.push(i);' },\n  { stage: 16, text: '      }' },\n  { stage: 9, text: '    }' },\n  { stage: 7, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 17, text: '  return resultIndices;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 97,\n  problemName: `Words Concatenation`,\n  problemText: `Given a string and a list of words, find all the starting indices of substrings in the given string that are a concatenation of all the given words exactly once without any overlapping of words. It is given that all words are of the same length.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: ``,\n      evaluate: `find_word_concatenation('catfoxcat', ['cat', 'fox']);`,\n      expected: JSON.stringify([0, 3]),\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: ``,\n      evaluate: `find_word_concatenation('catcatfoxfox', ['cat', 'fox']);`,\n      expected: JSON.stringify([3]),\n    },\n  ],\n  setupCode: ``,\n  category: SLIDING_WINDOW,\n  type: ALGORITHM,\n  difficulty: ADVANCED,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330, 360, 390, 420, 450, 480, 540],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, BITWISE, EXPERT } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function find_single_number(arr) {' },\n  { stage: 1, text: '  let num = 0;' },\n  { stage: 2, text: '  for (let i = 0; i < arr.length; i++) {' },\n  { stage: 3, text: '    num ^= arr[i];' },\n  { stage: 2, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 4, text: '  return num;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 98,\n  problemName: `Use Bitwise XOR`,\n  problemText: `In a non-empty array of integers, every number appears twice except for one, find that single number.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: ``,\n      evaluate: `find_single_number([1, 4, 2, 1, 3, 2, 3]);`,\n      expected: 4,\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: ``,\n      evaluate: `find_single_number([7, 9, 7]);`,\n      expected: 9,\n    },\n  ],\n  setupCode: ``,\n  category: BITWISE,\n  type: ALGORITHM,\n  difficulty: EXPERT,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 150],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, CYCLIC_SORT, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function cyclic_sort(nums) {' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  let i = 0;' },\n  { stage: 2, text: '  while (i < nums.length) {' },\n  { stage: 3, text: '    const j = nums[i] - 1;' },\n  { stage: 4, text: '    if (nums[i] !== nums[j]) {' },\n  { stage: 5, text: '      [nums[i], nums[j]] = [nums[j], nums[i]];' },\n  { stage: 4, text: '    } else {' },\n  { stage: 6, text: '      i += 1;' },\n  { stage: 4, text: '    }' },\n  { stage: 2, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 7, text: '  return nums;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 99,\n  problemName: `Implement Cyclic Sort`,\n  problemText: `We are given an array containing ‘n’ objects. Each object, when created, was assigned a unique number from 1 to ‘n’ based on their creation sequence. This means that the object with sequence number ‘3’ was created just before the object with sequence number ‘4’.\n\nWrite a function to sort the objects in-place on their creation sequence number in O(n)O(n) and without any extra space. For simplicity, let’s assume we are passed an integer array containing only the sequence numbers, though each number is actually an object.\n`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: ``,\n      evaluate: `cyclic_sort([3, 1, 5, 4, 2]);`,\n      expected: JSON.stringify([1, 2, 3, 4, 5]),\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: ``,\n      evaluate: `cyclic_sort([2, 6, 4, 3, 1, 5]);`,\n      expected: JSON.stringify([1, 2, 3, 4, 5, 6]),\n    },\n    {\n      id: 3,\n      name: 'example 3',\n      inherit: [],\n      code: ``,\n      evaluate: `cyclic_sort([1, 5, 6, 4, 3, 2]);`,\n      expected: JSON.stringify([1, 2, 3, 4, 5, 6]),\n    },\n  ],\n  setupCode: ``,\n  category: CYCLIC_SORT,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 240],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, TEMP, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function find_missing_number(nums) {' },\n  { stage: 1, text: '  let i = 0;' },\n  { stage: 1, text: '  const n = nums.length;' },\n  { stage: 0, text: '' },\n  { stage: 2, text: '  while (i < n) {' },\n  { stage: 3, text: '    let j = nums[i];' },\n  { stage: 4, text: '    if (nums[i] < n && nums[i] !== nums[j]) {' },\n  { stage: 5, text: '      [nums[i], nums[j]] = [nums[j], nums[i]];' },\n  { stage: 4, text: '    } else {' },\n  { stage: 5, text: '      i += 1;' },\n  { stage: 4, text: '    }' },\n  { stage: 2, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 6, text: '  for (i = 0; i < n; i++) {' },\n  { stage: 7, text: '    if (nums[i] !== i) {' },\n  { stage: 7, text: '      return i;' },\n  { stage: 7, text: '    }' },\n  { stage: 6, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 8, text: '  return n;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 100,\n  problemName: `Find Missing Number`,\n  problemText: `We are given an array containing ‘n’ distinct numbers taken from the range 0 to ‘n’. Since the array has only ‘n’ numbers out of the total ‘n+1’ numbers, find the missing number.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: ``,\n      evaluate: `find_missing_number([4, 0, 3, 1]);`,\n      expected: 2,\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: ``,\n      evaluate: `find_missing_number([8, 3, 5, 2, 4, 6, 0, 1]);`,\n      expected: 7,\n    },\n  ],\n  setupCode: ``,\n  category: TEMP,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 270],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, TEMP, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function find_missing_numbers(nums) {' },\n  { stage: 1, text: '  let i = 0;' },\n  { stage: 1, text: '  while (i < nums.length) {' },\n  { stage: 2, text: '    const j = nums[i] - 1;' },\n  { stage: 3, text: '    if (nums[i] !== nums[j]) {' },\n  { stage: 4, text: '      [nums[i], nums[j]] = [nums[j], nums[i]];' },\n  { stage: 3, text: '    } else {' },\n  { stage: 4, text: '      i += 1;' },\n  { stage: 3, text: '    }' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 5, text: '  const missingNumbers = [];' },\n  { stage: 6, text: '  for (i = 0; i < nums.length; i++) {' },\n  { stage: 7, text: '    if (nums[i] !== i + 1) {' },\n  { stage: 8, text: '      missingNumbers.push(i + 1);' },\n  { stage: 7, text: '    }' },\n  { stage: 6, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 8, text: '  return missingNumbers;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 101,\n  problemName: `Find All Missing Numbers`,\n  problemText: `We are given an unsorted array containing numbers taken from the range 1 to ‘n’. The array can have duplicates, which means some numbers will be missing. Find all those missing numbers.  Return missing numbers as an array (in ascending order).`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: ``,\n      evaluate: `find_missing_numbers([2, 3, 1, 8, 2, 3, 5, 1]);`,\n      expected: JSON.stringify([4, 6, 7]),\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: ``,\n      evaluate: `find_missing_numbers([2, 4, 1, 2]);`,\n      expected: JSON.stringify([3]),\n    },\n    {\n      id: 3,\n      name: 'example 3',\n      inherit: [],\n      code: ``,\n      evaluate: `find_missing_numbers([2, 3, 2, 1]);`,\n      expected: JSON.stringify([4]),\n    },\n  ],\n  setupCode: ``,\n  category: TEMP,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 270],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, TEMP, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function find_duplicate(nums) {' },\n  { stage: 1, text: '  let i = 0;' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  while (i < nums.length) {' },\n  { stage: 2, text: '    if (nums[i] !== i + 1) {' },\n  { stage: 3, text: '      let j = nums[i] - 1;' },\n  { stage: 4, text: '      if (nums[i] !== nums[j]) {' },\n  { stage: 5, text: '        [nums[i], nums[j]] = [nums[j], nums[i]];' },\n  { stage: 4, text: '      } else {' },\n  { stage: 6, text: '        return nums[i];' },\n  { stage: 4, text: '      }' },\n  { stage: 2, text: '    } else {' },\n  { stage: 7, text: '      i += 1;' },\n  { stage: 2, text: '    }' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 8, text: '  return -1;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 102,\n  problemName: `Find Duplicate Number`,\n  problemText: `We are given an unsorted array containing ‘n+1’ numbers taken from the range 1 to ‘n’. The array has only one duplicate but it can be repeated multiple times. Find that duplicate number without using any extra space. You are, however, allowed to modify the input array.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: ``,\n      evaluate: `find_duplicate([1, 4, 4, 3, 2]);`,\n      expected: 4,\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: ``,\n      evaluate: `find_duplicate([2, 1, 3, 3, 5, 4]);`,\n      expected: 3,\n    },\n    {\n      id: 3,\n      name: 'example 3',\n      inherit: [],\n      code: ``,\n      evaluate: `find_duplicate([2, 4, 1, 4, 4]);`,\n      expected: 4,\n    },\n  ],\n  setupCode: ``,\n  category: TEMP,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 270],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, TEMP, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function find_all_duplicates(nums) {' },\n  { stage: 1, text: '  let i = 0;' },\n  { stage: 1, text: '  while (i < nums.length) {' },\n  { stage: 2, text: '    let j = nums[i] - 1;' },\n  { stage: 2, text: '    if (nums[i] != nums[j]) {' },\n  { stage: 3, text: '      [nums[i], nums[j]] = [nums[j], nums[i]];' },\n  { stage: 2, text: '    } else {' },\n  { stage: 4, text: '      i++;' },\n  { stage: 2, text: '    }' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 5, text: '  const duplicateNumbers = [];' },\n  { stage: 6, text: '  for (i = 0; i < nums.length; i++) {' },\n  { stage: 7, text: '    if (nums[i] !== i + 1) {' },\n  { stage: 8, text: '      duplicateNumbers.push(nums[i]);' },\n  { stage: 7, text: '    }' },\n  { stage: 6, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 9, text: '  return duplicateNumbers;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 103,\n  problemName: `Find All Duplicate Numbers`,\n  problemText: `We are given an unsorted array containing ‘n’ numbers taken from the range 1 to ‘n’. The array has some numbers appearing twice, find all these duplicate numbers without using any extra space.  Return them as an array in ascending order.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: ``,\n      evaluate: `find_all_duplicates([3, 4, 4, 5, 5]);`,\n      expected: JSON.stringify([5, 4]),\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: ``,\n      evaluate: `find_all_duplicates([5, 4, 7, 2, 3, 5, 3]);`,\n      expected: JSON.stringify([3, 5]),\n    },\n  ],\n  setupCode: ``,\n  category: TEMP,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 300],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, DYNAMIC_PROGRAMMING, ADVANCED } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'let solveKnapsack = function (profits, weights, capacity) {' },\n  { stage: 1, text: '  const n = profits.length;' },\n  { stage: 2, text: '  if (capacity <= 0 || n == 0 || weights.length != n) return 0;' },\n  { stage: 0, text: '' },\n  { stage: 3, text: '  const dp = Array(capacity + 1).fill(0);' },\n  { stage: 0, text: '' },\n  { stage: 4, text: '  for (let c = 0; c <= capacity; c++) {' },\n  { stage: 5, text: '    if (weights[0] <= c) dp[c] = profits[0];' },\n  { stage: 4, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 6, text: '  for (let i = 1; i < n; i++) {' },\n  { stage: 7, text: '    for (let c = capacity; c >= 0; c--) {' },\n  { stage: 8, text: '      let profit1 = 0;' },\n  { stage: 8, text: '      let profit2 = 0;' },\n  { stage: 0, text: '' },\n  { stage: 9, text: '      if (weights[i] <= c) {' },\n  { stage: 10, text: '        profit1 = profits[i] + dp[c - weights[i]];' },\n  { stage: 9, text: '      }' },\n  { stage: 0, text: '' },\n  { stage: 11, text: '      profit2 = dp[c];' },\n  { stage: 12, text: '      dp[c] = Math.max(profit1, profit2);' },\n  { stage: 7, text: '    }' },\n  { stage: 6, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 13, text: '  return dp[capacity];' },\n  { stage: 0, text: '};' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 104,\n  problemName: `0/1 Knapsack`,\n  problemText: `Given two integer arrays to represent weights and profits of ‘N’ items, we need to find a subset of these items which will give us maximum profit such that their cumulative weight is not more than a given number ‘C.’ Each item can only be selected once, which means either we put an item in the knapsack or we skip it.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: `var profits = [1, 6, 10, 16];\n      var weights = [1, 2, 3, 5];`,\n      evaluate: `solveKnapsack(profits, weights, 7);`,\n      expected: 22,\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [1],\n      code: ``,\n      evaluate: `solveKnapsack(profits, weights, 6);`,\n      expected: 17,\n    },\n  ],\n  setupCode: ``,\n  category: DYNAMIC_PROGRAMMING,\n  type: ALGORITHM,\n  difficulty: ADVANCED,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330, 360, 420],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, TEMP, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: -1, text: 'class Node {' },\n  { stage: -1, text: '  constructor(value, next = null) {' },\n  { stage: -1, text: '    this.value = value;' },\n  { stage: -1, text: '    this.next = next;' },\n  { stage: -1, text: '  }' },\n  { stage: -1, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function has_cycle(head) {' },\n  { stage: 1, text: '  let slow = head;' },\n  { stage: 1, text: '  let fast = head;' },\n  { stage: 0, text: '' },\n  { stage: 2, text: '  while (fast !== null && fast.next !== null) {' },\n  { stage: 3, text: '    fast = fast.next.next;' },\n  { stage: 3, text: '    slow = slow.next;' },\n  { stage: 4, text: '    if (slow === fast) {' },\n  { stage: 5, text: '      return true;' },\n  { stage: 4, text: '    }' },\n  { stage: 2, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 6, text: '  return false;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 105,\n  problemName: `Linked List Cycle`,\n  problemText: `Given the head of a Singly LinkedList, write a function to determine if the LinkedList has a cycle in it or not.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: `const head = new Node(1);\n      head.next = new Node(2);\n      head.next.next = new Node(3);\n      head.next.next.next = new Node(4);\n      head.next.next.next.next = new Node(5);\n      head.next.next.next.next.next = new Node(6);`,\n      evaluate: `has_cycle(head);`,\n      expected: false,\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [1],\n      code: `head.next.next.next.next.next.next = head.next.next;`,\n      evaluate: `has_cycle(head);`,\n      expected: true,\n    },\n    {\n      id: 3,\n      name: 'example 3',\n      inherit: [1, 2],\n      code: `head.next.next.next.next.next.next = head.next.next.next;`,\n      evaluate: `has_cycle(head);`,\n      expected: true,\n    },\n  ],\n  setupCode: `class Node {\n    constructor(value, next = null) {\n      this.value = value;\n      this.next = next;\n    }\n  }`,\n  category: TEMP,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 210],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, TEMP, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: -1, text: 'class Node {' },\n  { stage: -1, text: '  constructor(value, next = null) {' },\n  { stage: -1, text: '    this.value = value;' },\n  { stage: -1, text: '    this.next = next;' },\n  { stage: -1, text: '  }' },\n  { stage: -1, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function find_middle_of_linked_list(head) {' },\n  { stage: 1, text: '  let slow = head;' },\n  { stage: 1, text: '  let fast = head;' },\n  { stage: 0, text: '' },\n  { stage: 2, text: '  while (fast !== null && fast.next !== null) {' },\n  { stage: 3, text: '    slow = slow.next;' },\n  { stage: 3, text: '    fast = fast.next.next;' },\n  { stage: 2, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 4, text: '  return slow;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 106,\n  problemName: `Middle of Linked List`,\n  problemText: `Given the head of a Singly LinkedList, write a method to return the middle node of the LinkedList.\n\nIf the total number of nodes in the LinkedList is even, return the second middle node.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: `const head = new Node(1);\n      head.next = new Node(2);\n      head.next.next = new Node(3);\n      head.next.next.next = new Node(4);\n      head.next.next.next.next = new Node(5);`,\n      evaluate: `find_middle_of_linked_list(head).value`,\n      expected: 3,\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [1],\n      code: `head.next.next.next.next.next = new Node(6);`,\n      evaluate: `find_middle_of_linked_list(head).value`,\n      expected: 4,\n    },\n    {\n      id: 3,\n      name: 'example 3',\n      inherit: [1, 2],\n      code: `head.next.next.next.next.next.next = new Node(7);`,\n      evaluate: `find_middle_of_linked_list(head).value`,\n      expected: 4,\n    },\n  ],\n  setupCode: `\nclass Node {\n  constructor(value, next = null) {\n    this.value = value;\n    this.next = next;\n  }\n}\n`,\n  category: TEMP,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 150],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, TEMP, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: -1, text: 'class MinHeap {' },\n  { stage: -1, text: '/*' },\n  { stage: -1, text: '  poll(): ListNode' },\n  { stage: -1, text: '  add(item: ListNode) void' },\n  { stage: -1, text: '  length() Number' },\n  { stage: -1, text: '*/' },\n  { stage: -1, text: '}' },\n  { stage: -1, text: '' },\n  { stage: -1, text: 'class ListNode {' },\n  { stage: -1, text: '  constructor(value, next = null) {' },\n  { stage: -1, text: '    this.value = value;' },\n  { stage: -1, text: '    this.next = next;' },\n  { stage: -1, text: '  }' },\n  { stage: -1, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function merge_lists(lists) {' },\n  { stage: 1, text: '  const minHeap = new MinHeap();' },\n  { stage: 0, text: '' },\n  { stage: 2, text: '  lists.forEach(a => {' },\n  { stage: 3, text: '    if (a !== null) {' },\n  { stage: 3, text: '      minHeap.add(a);' },\n  { stage: 3, text: '    }' },\n  { stage: 2, text: '  });' },\n  { stage: 0, text: '' },\n  { stage: 4, text: '  let resultHead = null;' },\n  { stage: 4, text: '  let resultTail = null;' },\n  { stage: 5, text: '  while (minHeap.length() > 0) {' },\n  { stage: 6, text: '    let node = minHeap.poll();' },\n  { stage: 0, text: '' },\n  { stage: 7, text: '    if (resultHead === null) {' },\n  { stage: 8, text: '      resultHead = resultTail = node;' },\n  { stage: 7, text: '    } else {' },\n  { stage: 9, text: '      resultTail.next = node;' },\n  { stage: 9, text: '      resultTail = resultTail.next;' },\n  { stage: 7, text: '    }' },\n  { stage: 10, text: '    if (node.next !== null) {' },\n  { stage: 11, text: '      minHeap.add(node.next);' },\n  { stage: 10, text: '    }' },\n  { stage: 5, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 12, text: '  return resultHead;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 107,\n  problemName: `Merge K Sorted Lists`,\n  problemText: `Given an array of ‘K’ sorted LinkedLists, merge them into one sorted list.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: `const l1 = new ListNode(2);\n      l1.next = new ListNode(6);\n      l1.next.next = new ListNode(8);\n      const l2 = new ListNode(3);\n      l2.next = new ListNode(6);\n      l2.next.next = new ListNode(7);\n      const l3 = new ListNode(1);\n      l3.next = new ListNode(3);\n      l3.next.next = new ListNode(4);`,\n      evaluate: `merge_lists([l1, l2, l3]).convert();`,\n      expected: JSON.stringify([1, 2, 3, 3, 4, 6, 6, 7, 8]),\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: `const l1 = new ListNode(5);\n      l1.next = new ListNode(8);\n      l1.next.next = new ListNode(9);\n      const l2 = new ListNode(1);\n      l2.next = new ListNode(7);;`,\n      evaluate: `merge_lists([l1, l2]).convert();`,\n      expected: JSON.stringify([1, 5, 7, 8, 9]),\n    },\n  ],\n  setupCode: `\n  class MinHeap {\n    constructor() {\n      this.heapContainer = [];\n    }\n  \n    getLeftChildIndex(parentIndex) {\n      return 2 * parentIndex + 1;\n    }\n  \n    getRightChildIndex(parentIndex) {\n      return 2 * parentIndex + 2;\n    }\n  \n    hasLeftChild(parentIndex) {\n      return this.getLeftChildIndex(parentIndex) < this.heapContainer.length;\n    }\n  \n    hasRightChild(parentIndex) {\n      return this.getRightChildIndex(parentIndex) < this.heapContainer.length;\n    }\n  \n    leftChild(parentIndex) {\n      return this.heapContainer[this.getLeftChildIndex(parentIndex)];\n    }\n  \n    rightChild(parentIndex) {\n      return this.heapContainer[this.getRightChildIndex(parentIndex)];\n    }\n  \n    getParentIndex(childIndex) {\n      return Math.floor((childIndex - 1) / 2);\n    }\n  \n    hasParent(childIndex) {\n      return this.getParentIndex(childIndex) >= 0;\n    }\n  \n    parent(childIndex) {\n      return this.heapContainer[this.getParentIndex(childIndex)];\n    }\n  \n    poll() {\n      if (this.heapContainer.length === 0) {\n        return null;\n      }\n      if (this.heapContainer.length === 1) {\n        return this.heapContainer.pop();\n      }\n      const item = this.heapContainer[0];\n      this.heapContainer[0] = this.heapContainer.pop();\n      this.heapifyDown();\n      return item;\n    }\n  \n    add(item) {\n      this.heapContainer.push(item);\n      this.heapifyUp();\n      return this;\n    }\n  \n    heapifyUp(customStartIndex) {\n      let currentIndex = customStartIndex || this.heapContainer.length - 1;\n  \n      while (\n        this.hasParent(currentIndex) &&\n        !(this.parent(currentIndex).value <= this.heapContainer[currentIndex].value)\n      ) {\n        this.swap(currentIndex, this.getParentIndex(currentIndex));\n        currentIndex = this.getParentIndex(currentIndex);\n      }\n    }\n  \n    heapifyDown(customStartIndex = 0) {\n      let currentIndex = customStartIndex;\n      let nextIndex = null;\n  \n      while (this.hasLeftChild(currentIndex)) {\n        if (\n          this.hasRightChild(currentIndex) &&\n          this.rightChild(currentIndex).value <= this.leftChild(currentIndex).value\n        ) {\n          nextIndex = this.getRightChildIndex(currentIndex);\n        } else {\n          nextIndex = this.getLeftChildIndex(currentIndex);\n        }\n  \n        if (this.heapContainer[currentIndex].value <= this.heapContainer[nextIndex].value) {\n          break;\n        }\n  \n        this.swap(currentIndex, nextIndex);\n        currentIndex = nextIndex;\n      }\n    }\n  \n    swap(indexOne, indexTwo) {\n      const tmp = this.heapContainer[indexTwo];\n      this.heapContainer[indexTwo] = this.heapContainer[indexOne];\n      this.heapContainer[indexOne] = tmp;\n    }\n  \n    length() {\n      return this.heapContainer.length;\n    }\n  }\n  \n  class ListNode {\n    constructor(value, next = null) {\n      this.value = value;\n      this.next = next;\n    }\n  }\n\n  ListNode.prototype.convert = function () {\n    const arr = [];\n    let node = this;\n    while (node) {\n      arr.push(node.value);\n      node = node.next;\n    }\n    return arr;\n  };`,\n  category: TEMP,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330, 390],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, TEMP, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function insert(intervals, new_interval) {' },\n  { stage: 1, text: '  let merged = [];' },\n  { stage: 1, text: '  let i = 0;' },\n  { stage: 0, text: '' },\n  { stage: 2, text: '  while (i < intervals.length && intervals[i][1] < new_interval[0]) {' },\n  { stage: 3, text: '    merged.push(intervals[i]);' },\n  { stage: 3, text: '    i += 1;' },\n  { stage: 2, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 4, text: '  while (i < intervals.length && intervals[i][0] <= new_interval[1]) {' },\n  { stage: 5, text: '    new_interval[0] = Math.min(intervals[i][0], new_interval[0]);' },\n  { stage: 6, text: '    new_interval[1] = Math.max(intervals[i][1], new_interval[1]);' },\n  { stage: 6, text: '    i += 1;' },\n  { stage: 4, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 7, text: '  merged.push(new_interval);' },\n  { stage: 0, text: '' },\n  { stage: 8, text: '  while (i < intervals.length) {' },\n  { stage: 9, text: '    merged.push(intervals[i]);' },\n  { stage: 9, text: '    i += 1;' },\n  { stage: 8, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 10, text: '  return merged;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 108,\n  problemName: `Insert Intervals`,\n  problemText: `Given a list of non-overlapping intervals sorted by their start time, insert a given interval at the correct position and merge all necessary intervals to produce a list that has only mutually exclusive intervals.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: ``,\n      evaluate: `insert([[1, 3],[5, 7],[8, 12]],[4, 6]);`,\n      expected: JSON.stringify([\n        [1, 3],\n        [4, 7],\n        [8, 12],\n      ]),\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: ``,\n      evaluate: `insert([[1, 3],[5, 7],[8, 12]],[4, 10]);`,\n      expected: JSON.stringify([\n        [1, 3],\n        [4, 12],\n      ]),\n    },\n    {\n      id: 3,\n      name: 'example 3',\n      inherit: [],\n      code: ``,\n      evaluate: `insert([[2, 3],[5, 7]],[1, 4]);`,\n      expected: JSON.stringify([\n        [1, 4],\n        [5, 7],\n      ]),\n    },\n  ],\n  setupCode: ``,\n  category: TEMP,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 330],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, TEMP, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function binary_search(arr, key) {' },\n  { stage: 1, text: '  let start = 0;' },\n  { stage: 1, text: '  let end = arr.length - 1;' },\n  { stage: 2, text: '  let isAscending = arr[start] < arr[end];' },\n  { stage: 0, text: '' },\n  { stage: 3, text: '  while (start <= end) {' },\n  { stage: 4, text: '    let mid = Math.floor(start + (end - start) / 2);' },\n  { stage: 5, text: '    if (key === arr[mid]) {' },\n  { stage: 6, text: '      return mid;' },\n  { stage: 5, text: '    }' },\n  { stage: 7, text: '    if (isAscending) {' },\n  { stage: 8, text: '      if (key < arr[mid]) {' },\n  { stage: 9, text: '        end = mid - 1;' },\n  { stage: 8, text: '      } else {' },\n  { stage: 9, text: '        start = mid + 1;' },\n  { stage: 8, text: '      }' },\n  { stage: 7, text: '    } else {' },\n  { stage: 10, text: '      if (key > arr[mid]) {' },\n  { stage: 11, text: '        end = mid - 1;' },\n  { stage: 10, text: '      } else {' },\n  { stage: 11, text: '        start = mid + 1;' },\n  { stage: 10, text: '      }' },\n  { stage: 7, text: '    }' },\n  { stage: 3, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 12, text: '  return -1;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 109,\n  problemName: `Order Agnostic Binary Search`,\n  problemText: `Given a sorted array of numbers, find if a given number ‘key’ is present in the array. Though we know that the array is sorted, we don’t know if it’s sorted in ascending or descending order. You should assume that the array can have duplicates.\n\nWrite a function to return the index of the ‘key’ if it is present in the array, otherwise return -1.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: ``,\n      evaluate: `binary_search([4, 6, 10], 10);`,\n      expected: 2,\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: ``,\n      evaluate: `binary_search([1, 2, 3, 4, 5, 6, 7], 5);`,\n      expected: 4,\n    },\n    {\n      id: 3,\n      name: 'example 3',\n      inherit: [],\n      code: ``,\n      evaluate: `binary_search([10, 6, 4], 10);`,\n      expected: 0,\n    },\n    {\n      id: 4,\n      name: 'example 4',\n      inherit: [],\n      code: ``,\n      evaluate: `binary_search([10, 6, 4], 4);`,\n      expected: 2,\n    },\n  ],\n  setupCode: ``,\n  category: TEMP,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330, 390],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, TEMP, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function find_max_in_bitonic_array(arr) {' },\n  { stage: 1, text: '  let start = 0;' },\n  { stage: 1, text: '  let end = arr.length - 1;' },\n  { stage: 0, text: '' },\n  { stage: 2, text: '  while (start < end) {' },\n  { stage: 3, text: '    let mid = Math.floor(start + (end - start) / 2);' },\n  { stage: 4, text: '    if (arr[mid] > arr[mid + 1]) {' },\n  { stage: 5, text: '      end = mid;' },\n  { stage: 4, text: '    } else {' },\n  { stage: 5, text: '      start = mid + 1;' },\n  { stage: 4, text: '    }' },\n  { stage: 2, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 6, text: '  return arr[start];' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 110,\n  problemName: `Bitonic Array Maximum`,\n  problemText: `Find the maximum value in a given Bitonic array. An array is considered bitonic if it is monotonically increasing and then monotonically decreasing. Monotonically increasing or decreasing means that for any index i in the array arr[i] != arr[i+1].`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: ``,\n      evaluate: `find_max_in_bitonic_array([1, 3, 8, 12, 4, 2]);`,\n      expected: 12,\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: ``,\n      evaluate: `find_max_in_bitonic_array([3, 8, 3, 1]);`,\n      expected: 8,\n    },\n    {\n      id: 3,\n      name: 'example 3',\n      inherit: [],\n      code: ``,\n      evaluate: `find_max_in_bitonic_array([1, 3, 8, 12]);`,\n      expected: 12,\n    },\n    {\n      id: 4,\n      name: 'example 4',\n      inherit: [],\n      code: ``,\n      evaluate: `find_max_in_bitonic_array([10, 9, 8]);`,\n      expected: 10,\n    },\n  ],\n  setupCode: ``,\n  category: TEMP,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 210],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, TEMP, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: -1, text: 'class Node {' },\n  { stage: -1, text: '  constructor(value, next = null) {' },\n  { stage: -1, text: '    this.value = value;' },\n  { stage: -1, text: '    this.next = next;' },\n  { stage: -1, text: '  }' },\n  { stage: -1, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function reverse_sub_list(head, p, q) {' },\n  { stage: 1, text: '  if (p === q) {' },\n  { stage: 1, text: '    return head;' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 2, text: '  let current = head;' },\n  { stage: 2, text: '  let previous = null;' },\n  { stage: 2, text: '  let i = 0;' },\n  { stage: 3, text: '  while (current !== null && i < p - 1) {' },\n  { stage: 4, text: '    previous = current;' },\n  { stage: 4, text: '    current = current.next;' },\n  { stage: 4, text: '    i += 1;' },\n  { stage: 3, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 5, text: '  const last_node_of_first_part = previous;' },\n  { stage: 5, text: '  const last_node_of_sub_list = current;' },\n  { stage: 6, text: '  let next = null;' },\n  { stage: 6, text: '  i = 0;' },\n  { stage: 0, text: '' },\n  { stage: 7, text: '  while (current !== null && i < q - p + 1) {' },\n  { stage: 8, text: '    next = current.next;' },\n  { stage: 8, text: '    current.next = previous;' },\n  { stage: 9, text: '    previous = current;' },\n  { stage: 9, text: '    current = next;' },\n  { stage: 9, text: '    i += 1;' },\n  { stage: 7, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 10, text: '  if (last_node_of_first_part !== null) {' },\n  { stage: 11, text: '    last_node_of_first_part.next = previous;' },\n  { stage: 10, text: '  } else {' },\n  { stage: 12, text: '    head = previous;' },\n  { stage: 10, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 13, text: '  last_node_of_sub_list.next = current;' },\n  { stage: 13, text: '  return head;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 111,\n  problemName: `Reverse Sub List`,\n  problemText: `Given the head of a LinkedList and two positions ‘p’ and ‘q’, reverse the LinkedList from position ‘p’ to ‘q’.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: `const head = new Node(1);\n      head.next = new Node(2);\n      head.next.next = new Node(3);\n      head.next.next.next = new Node(4);\n      head.next.next.next.next = new Node(5);`,\n      evaluate: `reverse_sub_list(head, 2, 4).convert();`,\n      expected: JSON.stringify([1, 4, 3, 2, 5]),\n    },\n  ],\n  setupCode: `\n  function Node(value) {\n    this.value = value;\n    this.next = null;\n  }\n\n  Node.prototype.convert = function () {\n    const arr = [];\n    let node = this;\n    while (node) {\n      arr.push(node.value);\n      node = node.next;\n    }\n    return arr;\n  };`,\n  category: TEMP,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330, 360, 420],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, TEMP, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function find_subsets(nums) {' },\n  { stage: 1, text: '  const subsets = [];' },\n  { stage: 0, text: '' },\n  { stage: 2, text: '  subsets.push([]);' },\n  { stage: 3, text: '  for (let i = 0; i < nums.length; i++) {' },\n  { stage: 4, text: '    let currentNumber = nums[i];' },\n  { stage: 4, text: '    const n = subsets.length;' },\n  { stage: 5, text: '    for (let j = 0; j < n; j++) {' },\n  { stage: 6, text: '      const set1 = subsets[j].slice(0);' },\n  { stage: 7, text: '      set1.push(currentNumber);' },\n  { stage: 7, text: '      subsets.push(set1);' },\n  { stage: 5, text: '    }' },\n  { stage: 3, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 8, text: '  return subsets;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 112,\n  problemName: `Subsets (distinct)`,\n  problemText: `Given a set with distinct elements, find all of its distinct subsets.\n  \n  Example:\n   - Input: [1, 3]\n   - Output: [], [1], [3], [1,3]`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: ``,\n      evaluate: `standardize(find_subsets([1, 3]));`,\n      expected: JSON.stringify(['', '1', '1-3', '3']),\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: ``,\n      evaluate: `standardize(find_subsets([1, 5, 3]));`,\n      expected: JSON.stringify(['', '1', '1-3', '1-3-5', '1-5', '3', '3-5', '5']),\n    },\n  ],\n  setupCode: `\n  function standardize(arr) {\n    return arr\n      .map(d => {\n        return d.sort((a, b) => a - b).join('-');\n      })\n      .sort();\n  }`,\n  category: TEMP,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 270],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, TEMP, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function find_subsets(nums) {' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  nums.sort();' },\n  { stage: 1, text: '  const subsets = [];' },\n  { stage: 1, text: '  subsets.push([]);' },\n  { stage: 2, text: '  let startIndex = 0;' },\n  { stage: 2, text: '  let endIndex = 0;' },\n  { stage: 0, text: '' },\n  { stage: 3, text: '  for (let i = 0; i < nums.length; i++) {' },\n  { stage: 4, text: '    startIndex = 0;' },\n  { stage: 0, text: '' },\n  { stage: 4, text: '    if (i > 0 && nums[i] === nums[i - 1]) {' },\n  { stage: 5, text: '      startIndex = endIndex + 1;' },\n  { stage: 4, text: '    }' },\n  { stage: 6, text: '    endIndex = subsets.length - 1;' },\n  { stage: 7, text: '    for (let j = startIndex; j < endIndex + 1; j++) {' },\n  { stage: 8, text: '      const set1 = subsets[j].slice(0);' },\n  { stage: 8, text: '      set1.push(nums[i]);' },\n  { stage: 9, text: '      subsets.push(set1);' },\n  { stage: 7, text: '    }' },\n  { stage: 3, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 10, text: '  return subsets;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 113,\n  problemName: `Subsets with Duplicates`,\n  problemText: `Given a set of numbers that might contain duplicates, find all of its distinct subsets.\n\nExample 1:\n\n - Input: [1, 3, 3]\n - Output: [], [1], [3], [1,3], [3,3], [1,3,3]`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: ``,\n      evaluate: `standardize(find_subsets([1, 3, 3]));`,\n      expected: JSON.stringify(['', '1', '1-3', '1-3-3', '3', '3-3']),\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: ``,\n      evaluate: `standardize(find_subsets([1, 5, 3, 3]));`,\n      expected: JSON.stringify([\n        '',\n        '1',\n        '1-3',\n        '1-3-3',\n        '1-3-3-5',\n        '1-3-5',\n        '1-5',\n        '3',\n        '3-3',\n        '3-3-5',\n        '3-5',\n        '5',\n      ]),\n    },\n  ],\n  setupCode: `\n  function standardize(arr) {\n    return arr\n      .map(d => {\n        return d.sort((a, b) => a - b).join('-');\n      })\n      .sort();\n  }`,\n  category: TEMP,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 330],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, TEMP, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: -1, text: 'class MinHeap {' },\n  { stage: -1, text: '  /*' },\n  { stage: -1, text: '    add(item: Number)' },\n  { stage: -1, text: '    poll() Number' },\n  { stage: -1, text: '    length() Number' },\n  { stage: -1, text: '  */' },\n  { stage: -1, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function find_k_largest_numbers(nums, k) {' },\n  { stage: 1, text: '  const minHeap = new MinHeap();' },\n  { stage: 2, text: '  for (let i = 0; i < k; i++) {' },\n  { stage: 3, text: '    minHeap.add(nums[i]);' },\n  { stage: 2, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 4, text: '  for (let i = k; i < nums.length; i++) {' },\n  { stage: 5, text: '    if (nums[i] > minHeap.peek()) {' },\n  { stage: 6, text: '      minHeap.poll();' },\n  { stage: 6, text: '      minHeap.add(nums[i]);' },\n  { stage: 5, text: '    }' },\n  { stage: 4, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 7, text: '  let arr = [];' },\n  { stage: 8, text: '  while (minHeap.length()) {' },\n  { stage: 9, text: '    arr.push(minHeap.poll());' },\n  { stage: 8, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 10, text: '  return arr;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 114,\n  problemName: `Top K Numbers`,\n  problemText: `Given an unsorted array of numbers, find the ‘K’ largest numbers in it.  Return them as an array sorted lowest to highest.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: ``,\n      evaluate: `find_k_largest_numbers([3, 1, 5, 12, 2, 11], 3);`,\n      expected: JSON.stringify([5, 11, 12]),\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: ``,\n      evaluate: `find_k_largest_numbers([5, 12, 11, -1, 12], 3);`,\n      expected: JSON.stringify([11, 12, 12]),\n    },\n  ],\n  setupCode: `\n  \nclass MinHeap {\n  constructor() {\n    this.heapContainer = [];\n  }\n\n  getLeftChildIndex(parentIndex) {\n    return 2 * parentIndex + 1;\n  }\n\n  getRightChildIndex(parentIndex) {\n    return 2 * parentIndex + 2;\n  }\n\n  hasLeftChild(parentIndex) {\n    return this.getLeftChildIndex(parentIndex) < this.heapContainer.length;\n  }\n\n  hasRightChild(parentIndex) {\n    return this.getRightChildIndex(parentIndex) < this.heapContainer.length;\n  }\n\n  leftChild(parentIndex) {\n    return this.heapContainer[this.getLeftChildIndex(parentIndex)];\n  }\n\n  rightChild(parentIndex) {\n    return this.heapContainer[this.getRightChildIndex(parentIndex)];\n  }\n\n  getParentIndex(childIndex) {\n    return Math.floor((childIndex - 1) / 2);\n  }\n\n  hasParent(childIndex) {\n    return this.getParentIndex(childIndex) >= 0;\n  }\n\n  parent(childIndex) {\n    return this.heapContainer[this.getParentIndex(childIndex)];\n  }\n\n  poll() {\n    if (this.heapContainer.length === 0) {\n      return null;\n    }\n    if (this.heapContainer.length === 1) {\n      return this.heapContainer.pop();\n    }\n    const item = this.heapContainer[0];\n    this.heapContainer[0] = this.heapContainer.pop();\n    this.heapifyDown();\n    return item;\n  }\n\n  add(item) {\n    this.heapContainer.push(item);\n    this.heapifyUp();\n    return this;\n  }\n\n  heapifyUp(customStartIndex) {\n    let currentIndex = customStartIndex || this.heapContainer.length - 1;\n\n    while (\n      this.hasParent(currentIndex) &&\n      !(this.parent(currentIndex) <= this.heapContainer[currentIndex])\n    ) {\n      this.swap(currentIndex, this.getParentIndex(currentIndex));\n      currentIndex = this.getParentIndex(currentIndex);\n    }\n  }\n\n  heapifyDown(customStartIndex = 0) {\n    let currentIndex = customStartIndex;\n    let nextIndex = null;\n\n    while (this.hasLeftChild(currentIndex)) {\n      if (\n        this.hasRightChild(currentIndex) &&\n        this.rightChild(currentIndex) <= this.leftChild(currentIndex)\n      ) {\n        nextIndex = this.getRightChildIndex(currentIndex);\n      } else {\n        nextIndex = this.getLeftChildIndex(currentIndex);\n      }\n\n      if (this.heapContainer[currentIndex] <= this.heapContainer[nextIndex]) {\n        break;\n      }\n\n      this.swap(currentIndex, nextIndex);\n      currentIndex = nextIndex;\n    }\n  }\n\n  swap(indexOne, indexTwo) {\n    const tmp = this.heapContainer[indexTwo];\n    this.heapContainer[indexTwo] = this.heapContainer[indexOne];\n    this.heapContainer[indexOne] = tmp;\n  }\n\n  peek() {\n    if (this.heapContainer.length === 0) {\n      return null;\n    }\n\n    return this.heapContainer[0];\n  }\n\n  length() {\n    return this.heapContainer.length;\n  }\n}\n`,\n  category: TEMP,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 330],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, TEMP, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: -1, text: 'class MaxHeap {' },\n  { stage: -1, text: '  /*' },\n  { stage: -1, text: '    add(item: Number)' },\n  { stage: -1, text: '    poll() Number' },\n  { stage: -1, text: '    peek() Number' },\n  { stage: -1, text: '  */' },\n  { stage: -1, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function find_Kth_smallest_number(nums, k) {' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  const maxHeap = new MaxHeap();' },\n  { stage: 2, text: '  for (let i = 0; i < k; i++) {' },\n  { stage: 3, text: '    maxHeap.add(nums[i]);' },\n  { stage: 2, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 4, text: '  for (let i = k; i < nums.length; i++) {' },\n  { stage: 5, text: '    if (nums[i] < maxHeap.peek()) {' },\n  { stage: 6, text: '      maxHeap.poll();' },\n  { stage: 6, text: '      maxHeap.add(nums[i]);' },\n  { stage: 5, text: '    }' },\n  { stage: 4, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 7, text: '  return maxHeap.peek();' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 115,\n  problemName: `Find Kth Smallest Number`,\n  problemText: `Given an unsorted array of numbers, find Kth smallest number in it.\n\nPlease note that it is the Kth smallest number in the sorted order, not the Kth distinct element.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: ``,\n      evaluate: `find_Kth_smallest_number([1, 5, 12, 2, 11, 5], 3);`,\n      expected: 5,\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: ``,\n      evaluate: `find_Kth_smallest_number([1, 5, 12, 2, 11, 5], 4);`,\n      expected: 5,\n    },\n    {\n      id: 3,\n      name: 'example 3',\n      inherit: [],\n      code: ``,\n      evaluate: `find_Kth_smallest_number([5, 12, 11, -1, 12], 3);`,\n      expected: 11,\n    },\n  ],\n  setupCode: `\n  class MaxHeap {\n    constructor() {\n      this.heapContainer = [];\n    }\n  \n    // child utils\n    getLeftChildIndex(parentIndex) {\n      return 2 * parentIndex + 1;\n    }\n  \n    getRightChildIndex(parentIndex) {\n      return 2 * parentIndex + 2;\n    }\n  \n    hasLeftChild(parentIndex) {\n      return this.getLeftChildIndex(parentIndex) < this.heapContainer.length;\n    }\n  \n    hasRightChild(parentIndex) {\n      return this.getRightChildIndex(parentIndex) < this.heapContainer.length;\n    }\n  \n    leftChild(parentIndex) {\n      return this.heapContainer[this.getLeftChildIndex(parentIndex)];\n    }\n  \n    rightChild(parentIndex) {\n      return this.heapContainer[this.getRightChildIndex(parentIndex)];\n    }\n  \n    // parent utils\n    getParentIndex(childIndex) {\n      return Math.floor((childIndex - 1) / 2);\n    }\n  \n    hasParent(childIndex) {\n      return this.getParentIndex(childIndex) >= 0;\n    }\n  \n    parent(childIndex) {\n      return this.heapContainer[this.getParentIndex(childIndex)];\n    }\n  \n    // peek\n    peek() {\n      if (this.heapContainer.length === 0) {\n        return null;\n      }\n  \n      return this.heapContainer[0];\n    }\n  \n    // poll\n    poll() {\n      if (this.heapContainer.length === 0) {\n        return null;\n      }\n  \n      if (this.heapContainer.length === 1) {\n        return this.heapContainer.pop();\n      }\n  \n      const item = this.heapContainer[0];\n  \n      // Move the last element from the end to the head.\n      this.heapContainer[0] = this.heapContainer.pop();\n      this.heapifyDown();\n  \n      return item;\n    }\n  \n    // add\n    add(item) {\n      this.heapContainer.push(item);\n      this.heapifyUp();\n      return this;\n    }\n  \n    // heapify up for min heap and max heap\n    heapifyUp(customStartIndex) {\n      // Take the last element (last in array or the bottom left in a tree)\n      // in the heap container and lift it up until it is in the correct\n      // order with respect to its parent element.\n      let currentIndex = customStartIndex || this.heapContainer.length - 1;\n  \n      while (\n        this.hasParent(currentIndex) &&\n        !(this.parent(currentIndex) >= this.heapContainer[currentIndex])\n      ) {\n        this.swap(currentIndex, this.getParentIndex(currentIndex));\n        currentIndex = this.getParentIndex(currentIndex);\n      }\n    }\n  \n    // heapify down for min heap or max heap\n    heapifyDown(customStartIndex = 0) {\n      // Compare the parent element to its children and swap parent with the appropriate\n      // child (smallest child for MinHeap, largest child for MaxHeap).\n      // Do the same for next children after swap.\n      let currentIndex = customStartIndex;\n      let nextIndex = null;\n  \n      while (this.hasLeftChild(currentIndex)) {\n        if (\n          this.hasRightChild(currentIndex) &&\n          this.rightChild(currentIndex) >= this.leftChild(currentIndex)\n        ) {\n          nextIndex = this.getRightChildIndex(currentIndex);\n        } else {\n          nextIndex = this.getLeftChildIndex(currentIndex);\n        }\n  \n        if (this.heapContainer[currentIndex] >= this.heapContainer[nextIndex]) {\n          break;\n        }\n  \n        this.swap(currentIndex, nextIndex);\n        currentIndex = nextIndex;\n      }\n    }\n  \n    // no, but added as utility\n    swap(indexOne, indexTwo) {\n      const tmp = this.heapContainer[indexTwo];\n      this.heapContainer[indexTwo] = this.heapContainer[indexOne];\n      this.heapContainer[indexOne] = tmp;\n    }\n  }\n  `,\n  category: TEMP,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 240],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, TEMP, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: -1, text: 'class MaxHeap {' },\n  { stage: -1, text: '  /*' },\n  { stage: -1, text: '    add(item: Point)' },\n  { stage: -1, text: '    peek() Point' },\n  { stage: -1, text: '    poll() Point' },\n  { stage: -1, text: '    length() Number' },\n  { stage: -1, text: '  */' },\n  { stage: -1, text: '}' },\n  { stage: -1, text: '' },\n  { stage: -1, text: 'class Point {' },\n  { stage: -1, text: '  constructor(id, x, y) {' },\n  { stage: -1, text: '    this.id = id;' },\n  { stage: -1, text: '    this.x = x;' },\n  { stage: -1, text: '    this.y = y;' },\n  { stage: -1, text: '  }' },\n  { stage: -1, text: '' },\n  { stage: -1, text: '  distance() {' },\n  { stage: -1, text: '    return this.x * this.x + this.y * this.y;' },\n  { stage: -1, text: '  }' },\n  { stage: -1, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function find_closest_points(points, k) {' },\n  { stage: 1, text: '  const maxHeap = new MaxHeap();' },\n  { stage: 0, text: '' },\n  { stage: 2, text: '  for (let i = 0; i < k; i++) {' },\n  { stage: 3, text: '    maxHeap.add(points[i]);' },\n  { stage: 2, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 4, text: '  for (let i = k; i < points.length; i++) {' },\n  { stage: 5, text: '    if (points[i].distance() < maxHeap.peek().distance()) {' },\n  { stage: 6, text: '      maxHeap.poll();' },\n  { stage: 6, text: '      maxHeap.add(points[i]);' },\n  { stage: 5, text: '    }' },\n  { stage: 4, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 7, text: '  const arr = [];' },\n  { stage: 0, text: '' },\n  { stage: 8, text: '  while (maxHeap.length()) {' },\n  { stage: 9, text: '    arr.push(maxHeap.poll());' },\n  { stage: 8, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 10, text: '  return arr;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 116,\n  problemName: `Find K Closest Points to Origin`,\n  problemText: `Given an array of *Points* in on a 2d plane, find and return the \\`k\\` closest points to the origin.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: ``,\n      evaluate: `extractIds(find_closest_points(\n        [new Point('a', 1, 3), new Point('b', 3, 4), new Point('c', 2, -1)],\n        2,\n      ));`,\n      expected: JSON.stringify(['a', 'c']),\n    },\n  ],\n  setupCode: `\n  class MaxHeap {\n    constructor() {\n      this.heapContainer = [];\n    }\n  \n    // child utils\n    getLeftChildIndex(parentIndex) {\n      return 2 * parentIndex + 1;\n    }\n  \n    getRightChildIndex(parentIndex) {\n      return 2 * parentIndex + 2;\n    }\n  \n    hasLeftChild(parentIndex) {\n      return this.getLeftChildIndex(parentIndex) < this.heapContainer.length;\n    }\n  \n    hasRightChild(parentIndex) {\n      return this.getRightChildIndex(parentIndex) < this.heapContainer.length;\n    }\n  \n    leftChild(parentIndex) {\n      return this.heapContainer[this.getLeftChildIndex(parentIndex)];\n    }\n  \n    rightChild(parentIndex) {\n      return this.heapContainer[this.getRightChildIndex(parentIndex)];\n    }\n  \n    // parent utils\n    getParentIndex(childIndex) {\n      return Math.floor((childIndex - 1) / 2);\n    }\n  \n    hasParent(childIndex) {\n      return this.getParentIndex(childIndex) >= 0;\n    }\n  \n    parent(childIndex) {\n      return this.heapContainer[this.getParentIndex(childIndex)];\n    }\n  \n    // peek\n    peek() {\n      if (this.heapContainer.length === 0) {\n        return null;\n      }\n  \n      return this.heapContainer[0];\n    }\n  \n    // poll\n    poll() {\n      if (this.heapContainer.length === 0) {\n        return null;\n      }\n  \n      if (this.heapContainer.length === 1) {\n        return this.heapContainer.pop();\n      }\n  \n      const item = this.heapContainer[0];\n  \n      // Move the last element from the end to the head.\n      this.heapContainer[0] = this.heapContainer.pop();\n      this.heapifyDown();\n  \n      return item;\n    }\n  \n    // add\n    add(item) {\n      this.heapContainer.push(item);\n      this.heapifyUp();\n      return this;\n    }\n  \n    // heapify up for min heap and max heap\n    heapifyUp(customStartIndex) {\n      // Take the last element (last in array or the bottom left in a tree)\n      // in the heap container and lift it up until it is in the correct\n      // order with respect to its parent element.\n      let currentIndex = customStartIndex || this.heapContainer.length - 1;\n  \n      while (\n        this.hasParent(currentIndex) &&\n        !(this.parent(currentIndex).distance() >= this.heapContainer[currentIndex].distance())\n      ) {\n        this.swap(currentIndex, this.getParentIndex(currentIndex));\n        currentIndex = this.getParentIndex(currentIndex);\n      }\n    }\n  \n    // heapify down for min heap or max heap\n    heapifyDown(customStartIndex = 0) {\n      // Compare the parent element to its children and swap parent with the appropriate\n      // child (smallest child for MinHeap, largest child for MaxHeap).\n      // Do the same for next children after swap.\n      let currentIndex = customStartIndex;\n      let nextIndex = null;\n  \n      while (this.hasLeftChild(currentIndex)) {\n        if (\n          this.hasRightChild(currentIndex) &&\n          this.rightChild(currentIndex).distance() >= this.leftChild(currentIndex).distance()\n        ) {\n          nextIndex = this.getRightChildIndex(currentIndex);\n        } else {\n          nextIndex = this.getLeftChildIndex(currentIndex);\n        }\n  \n        if (this.heapContainer[currentIndex].distance() >= this.heapContainer[nextIndex].distance()) {\n          break;\n        }\n  \n        this.swap(currentIndex, nextIndex);\n        currentIndex = nextIndex;\n      }\n    }\n  \n    // no, but added as utility\n    swap(indexOne, indexTwo) {\n      const tmp = this.heapContainer[indexTwo];\n      this.heapContainer[indexTwo] = this.heapContainer[indexOne];\n      this.heapContainer[indexOne] = tmp;\n    }\n  \n    length() {\n      return this.heapContainer.length;\n    }\n  }\n  \n  function extractIds(arr) {\n    return arr.map(d => d.id);\n  }\n  \n  class Point {\n    constructor(id, x, y) {\n      this.id = id;\n      this.x = x;\n      this.y = y;\n    }\n  \n    distance() {\n      return this.x * this.x + this.y * this.y;\n    }\n  }\n  `,\n  category: TEMP,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 330],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, TEMP, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: -1, text: 'class MinHeap {' },\n  { stage: -1, text: '  /*' },\n  { stage: -1, text: '    add(item: Number)' },\n  { stage: -1, text: '    poll() Number' },\n  { stage: -1, text: '    length() Number' },\n  { stage: -1, text: '  */' },\n  { stage: -1, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function minimum_cost_to_connect_ropes(ropeLengths) {' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  const minHeap = new MinHeap();' },\n  { stage: 0, text: '' },\n  { stage: 2, text: '  ropeLengths.forEach(len => {' },\n  { stage: 3, text: '    minHeap.add(len);' },\n  { stage: 2, text: '  });' },\n  { stage: 0, text: '' },\n  { stage: 4, text: '  let result = 0;' },\n  { stage: 4, text: '  while (minHeap.length() > 1) {' },\n  { stage: 5, text: '    const temp = minHeap.poll() + minHeap.poll();' },\n  { stage: 5, text: '    result += temp;' },\n  { stage: 6, text: '    minHeap.add(temp);' },\n  { stage: 4, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 7, text: '  return result;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 117,\n  problemName: `Connect Ropes`,\n  problemText: `Given ‘N’ ropes with different lengths, we need to connect these ropes into one big rope with minimum cost. The cost of connecting two ropes is equal to the sum of their lengths.\n  \nExample 1:\n\n - Input: [1, 3, 11, 5]\n - Output: 33\n - Explanation: First connect 1+3(=4), then 4+5(=9), and then 9+11(=20). So the total cost is 33 (4+9+20)\n\n `,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: ``,\n      evaluate: `minimum_cost_to_connect_ropes([1, 3, 11, 5]);`,\n      expected: 33,\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: ``,\n      evaluate: `minimum_cost_to_connect_ropes([3, 4, 5, 6]);`,\n      expected: 36,\n    },\n    {\n      id: 3,\n      name: 'example 3',\n      inherit: [],\n      code: ``,\n      evaluate: `minimum_cost_to_connect_ropes([1, 3, 11, 5, 2]);`,\n      expected: 42,\n    },\n  ],\n  setupCode: `\n  class MinHeap {\n    constructor() {\n      this.heapContainer = [];\n    }\n  \n    getLeftChildIndex(parentIndex) {\n      return 2 * parentIndex + 1;\n    }\n  \n    getRightChildIndex(parentIndex) {\n      return 2 * parentIndex + 2;\n    }\n  \n    hasLeftChild(parentIndex) {\n      return this.getLeftChildIndex(parentIndex) < this.heapContainer.length;\n    }\n  \n    hasRightChild(parentIndex) {\n      return this.getRightChildIndex(parentIndex) < this.heapContainer.length;\n    }\n  \n    leftChild(parentIndex) {\n      return this.heapContainer[this.getLeftChildIndex(parentIndex)];\n    }\n  \n    rightChild(parentIndex) {\n      return this.heapContainer[this.getRightChildIndex(parentIndex)];\n    }\n  \n    getParentIndex(childIndex) {\n      return Math.floor((childIndex - 1) / 2);\n    }\n  \n    hasParent(childIndex) {\n      return this.getParentIndex(childIndex) >= 0;\n    }\n  \n    parent(childIndex) {\n      return this.heapContainer[this.getParentIndex(childIndex)];\n    }\n  \n    poll() {\n      if (this.heapContainer.length === 0) {\n        return null;\n      }\n      if (this.heapContainer.length === 1) {\n        return this.heapContainer.pop();\n      }\n      const item = this.heapContainer[0];\n      this.heapContainer[0] = this.heapContainer.pop();\n      this.heapifyDown();\n      return item;\n    }\n  \n    add(item) {\n      this.heapContainer.push(item);\n      this.heapifyUp();\n      return this;\n    }\n  \n    heapifyUp(customStartIndex) {\n      let currentIndex = customStartIndex || this.heapContainer.length - 1;\n  \n      while (\n        this.hasParent(currentIndex) &&\n        !(this.parent(currentIndex) <= this.heapContainer[currentIndex])\n      ) {\n        this.swap(currentIndex, this.getParentIndex(currentIndex));\n        currentIndex = this.getParentIndex(currentIndex);\n      }\n    }\n  \n    heapifyDown(customStartIndex = 0) {\n      let currentIndex = customStartIndex;\n      let nextIndex = null;\n  \n      while (this.hasLeftChild(currentIndex)) {\n        if (\n          this.hasRightChild(currentIndex) &&\n          this.rightChild(currentIndex) <= this.leftChild(currentIndex)\n        ) {\n          nextIndex = this.getRightChildIndex(currentIndex);\n        } else {\n          nextIndex = this.getLeftChildIndex(currentIndex);\n        }\n  \n        if (this.heapContainer[currentIndex] <= this.heapContainer[nextIndex]) {\n          break;\n        }\n  \n        this.swap(currentIndex, nextIndex);\n        currentIndex = nextIndex;\n      }\n    }\n  \n    swap(indexOne, indexTwo) {\n      const tmp = this.heapContainer[indexTwo];\n      this.heapContainer[indexTwo] = this.heapContainer[indexOne];\n      this.heapContainer[indexOne] = tmp;\n    }\n  \n    peek() {\n      if (this.heapContainer.length === 0) {\n        return null;\n      }\n  \n      return this.heapContainer[0];\n    }\n  \n    length() {\n      return this.heapContainer.length;\n    }\n  }`,\n  category: TEMP,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 240],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, TEMP, ADVANCED } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function topological_sort(vertices, edges) {' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  const sortedOrder = [];' },\n  { stage: 2, text: '  if (vertices <= 0) {' },\n  { stage: 2, text: '    return sortedOrder;' },\n  { stage: 2, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 3, text: '  const inDegree = Array(vertices).fill(0);' },\n  { stage: 4, text: '  const graph = Array(vertices)' },\n  { stage: 4, text: '    .fill(0)' },\n  { stage: 4, text: '    .map(() => Array());' },\n  { stage: 0, text: '' },\n  { stage: 5, text: '  edges.forEach(edge => {' },\n  { stage: 6, text: '    let parent = edge[0];' },\n  { stage: 6, text: '    let child = edge[1];' },\n  { stage: 7, text: '    graph[parent].push(child);' },\n  { stage: 7, text: '    inDegree[child]++;' },\n  { stage: 5, text: '  });' },\n  { stage: 0, text: '' },\n  { stage: 8, text: '  const sources = [];' },\n  { stage: 8, text: '  for (let i = 0; i < inDegree.length; i++) {' },\n  { stage: 9, text: '    if (inDegree[i] === 0) {' },\n  { stage: 10, text: '      sources.push(i);' },\n  { stage: 9, text: '    }' },\n  { stage: 8, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 11, text: '  while (sources.length > 0) {' },\n  { stage: 12, text: '    const vertex = sources.shift();' },\n  { stage: 12, text: '    sortedOrder.push(vertex);' },\n  { stage: 13, text: '    graph[vertex].forEach(child => {' },\n  { stage: 14, text: '      inDegree[child] -= 1;' },\n  { stage: 15, text: '      if (inDegree[child] === 0) {' },\n  { stage: 15, text: '        sources.push(child);' },\n  { stage: 15, text: '      }' },\n  { stage: 13, text: '    });' },\n  { stage: 11, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 16, text: '  if (sortedOrder.length !== vertices) {' },\n  { stage: 16, text: '    return [];' },\n  { stage: 16, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 17, text: '  return sortedOrder;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 118,\n  problemName: `Topological Sort`,\n  problemText: `Given a directed graph, find the topological ordering of its vertices.\n  \nExample:\n\nInput: Vertices=4, Edges=[3, 2], [3, 0], [2, 0], [2, 1]\n`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: `const result = stringify(\n        topological_sort(4, [\n          [3, 2],\n          [3, 0],\n          [2, 0],\n          [2, 1],\n        ]),\n      );`,\n      evaluate: `['3,2,0,1', '3,2,1,0'].includes(result);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: `const result = stringify(\n        topological_sort(5, [\n          [4, 2],\n          [4, 3],\n          [2, 0],\n          [2, 1],\n          [3, 1],\n        ]),\n      );`,\n      evaluate: `['4,2,3,0,1','4,3,2,0,1','4,3,2,1,0','4,2,3,1,0','4,2,0,3,1'].includes(result);`,\n      expected: true,\n    },\n    {\n      id: 3,\n      name: 'example 3',\n      inherit: [],\n      code: `const result = stringify(\n        topological_sort(7, [\n          [6, 4],\n          [6, 2],\n          [5, 3],\n          [5, 4],\n          [3, 0],\n          [3, 1],\n          [3, 2],\n          [4, 1],\n        ]),\n      );`,\n      evaluate: `['5,6,3,4,0,1,2','6,5,3,4,0,1,2','5,6,4,3,0,2,1','6,5,4,3,0,1,2','5,6,3,4,0,2,1','5,6,3,4,1,2,0'].includes(result);`,\n      expected: true,\n    },\n  ],\n  setupCode: `\n  function stringify(arr) {\n    return arr.join(',');\n  }\n  `,\n  category: TEMP,\n  type: ALGORITHM,\n  difficulty: ADVANCED,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330, 360, 390, 420, 450, 480, 540],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, TEMP, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: -1, text: 'class TreeNode {' },\n  { stage: -1, text: '  constructor(val) {' },\n  { stage: -1, text: '    this.val = val;' },\n  { stage: -1, text: '    this.left = null;' },\n  { stage: -1, text: '    this.right = null;' },\n  { stage: -1, text: '  }' },\n  { stage: -1, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function traverse(root) {' },\n  { stage: 1, text: '  const result = [];' },\n  { stage: 2, text: '  if (root === null) {' },\n  { stage: 2, text: '    return result;' },\n  { stage: 2, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 3, text: '  const queue = [];' },\n  { stage: 3, text: '  queue.push(root);' },\n  { stage: 4, text: '  while (queue.length > 0) {' },\n  { stage: 5, text: '    const levelSize = queue.length;' },\n  { stage: 5, text: '    let currentLevel = [];' },\n  { stage: 6, text: '    for (let i = 0; i < levelSize; i++) {' },\n  { stage: 7, text: '      let currentNode = queue.shift();' },\n  { stage: 7, text: '      currentLevel.push(currentNode.val);' },\n  { stage: 8, text: '      if (currentNode.left !== null) {' },\n  { stage: 8, text: '        queue.push(currentNode.left);' },\n  { stage: 8, text: '      }' },\n  { stage: 9, text: '      if (currentNode.right !== null) {' },\n  { stage: 9, text: '        queue.push(currentNode.right);' },\n  { stage: 9, text: '      }' },\n  { stage: 6, text: '    }' },\n  { stage: 10, text: '    result.push(currentLevel);' },\n  { stage: 4, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 11, text: '  return result;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 119,\n  problemName: `Binary Tree Level Order Traversal`,\n  problemText: `Given a binary tree, populate an array to represent its level-by-level traversal. You should populate the values of all nodes of each level from left to right in separate sub-arrays.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: `const root = new TreeNode(12);\n      root.left = new TreeNode(7);\n      root.right = new TreeNode(1);\n      root.left.left = new TreeNode(9);\n      root.right.left = new TreeNode(10);\n      root.right.right = new TreeNode(5);`,\n      evaluate: `traverse(root);`,\n      expected: JSON.stringify([[12], [7, 1], [9, 10, 5]]),\n    },\n  ],\n  setupCode: `\n  class TreeNode {\n    constructor(val) {\n      this.val = val;\n      this.left = null;\n      this.right = null;\n    }\n  }`,\n  category: TEMP,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 360],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, TEMP, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: -1, text: 'class TreeNode {' },\n  { stage: -1, text: '  constructor(val) {' },\n  { stage: -1, text: '    this.val = val;' },\n  { stage: -1, text: '    this.left = null;' },\n  { stage: -1, text: '    this.right = null;' },\n  { stage: -1, text: '  }' },\n  { stage: -1, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function traverse(root) {' },\n  { stage: 1, text: '  const result = [];' },\n  { stage: 2, text: '  if (root === null) {' },\n  { stage: 2, text: '    return result;' },\n  { stage: 2, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 3, text: '  const queue = [];' },\n  { stage: 3, text: '  queue.push(root);' },\n  { stage: 4, text: '  while (queue.length > 0) {' },\n  { stage: 5, text: '    let levelSize = queue.length;' },\n  { stage: 5, text: '    let currentLevel = [];' },\n  { stage: 6, text: '    for (let i = 0; i < levelSize; i++) {' },\n  { stage: 7, text: '      let currentNode = queue.shift();' },\n  { stage: 7, text: '      currentLevel.push(currentNode.val);' },\n  { stage: 8, text: '      if (currentNode.left !== null) {' },\n  { stage: 8, text: '        queue.push(currentNode.left);' },\n  { stage: 8, text: '      }' },\n  { stage: 9, text: '      if (currentNode.right !== null) {' },\n  { stage: 9, text: '        queue.push(currentNode.right);' },\n  { stage: 9, text: '      }' },\n  { stage: 6, text: '    }' },\n  { stage: 0, text: '' },\n  { stage: 10, text: '    result.unshift(currentLevel);' },\n  { stage: 4, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 11, text: '  return result;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 120,\n  problemName: `Reverse Level Order Traversal`,\n  problemText: `Given a binary tree, populate an array to represent its level-by-level traversal in reverse order, i.e., the lowest level comes first. You should populate the values of all nodes in each level from left to right in separate sub-arrays.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: `const root = new TreeNode(12);\n      root.left = new TreeNode(7);\n      root.right = new TreeNode(1);\n      root.left.left = new TreeNode(9);\n      root.right.left = new TreeNode(10);\n      root.right.right = new TreeNode(5);`,\n      evaluate: `traverse(root);`,\n      expected: JSON.stringify([[9, 10, 5], [7, 1], [12]]),\n    },\n  ],\n  setupCode: `\n  class TreeNode {\n    constructor(val) {\n      this.val = val;\n      this.left = null;\n      this.right = null;\n    }\n  }`,\n  category: TEMP,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 360],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, TEMP, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: -1, text: 'class TreeNode {' },\n  { stage: -1, text: '  constructor(val) {' },\n  { stage: -1, text: '    this.val = val;' },\n  { stage: -1, text: '    this.left = null;' },\n  { stage: -1, text: '    this.right = null;' },\n  { stage: -1, text: '  }' },\n  { stage: -1, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function find_level_averages(root) {' },\n  { stage: 1, text: '  const result = [];' },\n  { stage: 2, text: '  if (root === null) {' },\n  { stage: 2, text: '    return result;' },\n  { stage: 2, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 3, text: '  const queue = [];' },\n  { stage: 3, text: '  queue.push(root);' },\n  { stage: 4, text: '  while (queue.length > 0) {' },\n  { stage: 5, text: '    let levelSize = queue.length;' },\n  { stage: 5, text: '    let levelSum = 0.0;' },\n  { stage: 6, text: '    for (let i = 0; i < levelSize; i++) {' },\n  { stage: 7, text: '      let currentNode = queue.shift();' },\n  { stage: 7, text: '      levelSum += currentNode.val;' },\n  { stage: 8, text: '      if (currentNode.left !== null) {' },\n  { stage: 8, text: '        queue.push(currentNode.left);' },\n  { stage: 8, text: '      }' },\n  { stage: 9, text: '      if (currentNode.right !== null) {' },\n  { stage: 9, text: '        queue.push(currentNode.right);' },\n  { stage: 9, text: '      }' },\n  { stage: 6, text: '    }' },\n  { stage: 0, text: '' },\n  { stage: 10, text: '    result.push(levelSum / levelSize);' },\n  { stage: 4, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 11, text: '  return result;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 121,\n  problemName: `Level Averages`,\n  problemText: `Given a binary tree, populate an array to represent the averages of all of its levels.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: `const root = new TreeNode(12);\n      root.left = new TreeNode(7);\n      root.right = new TreeNode(1);\n      root.left.left = new TreeNode(9);\n      root.left.right = new TreeNode(2);\n      root.right.left = new TreeNode(10);\n      root.right.right = new TreeNode(5);`,\n      evaluate: `find_level_averages(root);`,\n      expected: JSON.stringify([12, 4, 6.5]),\n    },\n  ],\n  setupCode: `\n  class TreeNode {\n    constructor(val) {\n      this.val = val;\n      this.left = null;\n      this.right = null;\n    }\n  }`,\n  category: TEMP,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 360],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, TEMP, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: -1, text: 'class TreeNode {' },\n  { stage: -1, text: '  constructor(val) {' },\n  { stage: -1, text: '    this.val = val;' },\n  { stage: -1, text: '    this.left = null;' },\n  { stage: -1, text: '    this.right = null;' },\n  { stage: -1, text: '  }' },\n  { stage: -1, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function find_minimum_depth(root) {' },\n  { stage: 1, text: '  if (root === null) {' },\n  { stage: 1, text: '    return 0;' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 2, text: '  const queue = [];' },\n  { stage: 2, text: '  queue.push(root);' },\n  { stage: 3, text: '  let minimumTreeDepth = 0;' },\n  { stage: 4, text: '  while (queue.length > 0) {' },\n  { stage: 5, text: '    minimumTreeDepth += 1;' },\n  { stage: 5, text: '    let levelSize = queue.length;' },\n  { stage: 6, text: '    for (let i = 0; i < levelSize; i++) {' },\n  { stage: 7, text: '      let currentNode = queue.shift();' },\n  { stage: 8, text: '      if (currentNode.left === null && currentNode.right === null) {' },\n  { stage: 9, text: '        return minimumTreeDepth;' },\n  { stage: 8, text: '      }' },\n  { stage: 0, text: '' },\n  { stage: 10, text: '      if (currentNode.left !== null) {' },\n  { stage: 10, text: '        queue.push(currentNode.left);' },\n  { stage: 10, text: '      }' },\n  { stage: 11, text: '      if (currentNode.right !== null) {' },\n  { stage: 11, text: '        queue.push(currentNode.right);' },\n  { stage: 11, text: '      }' },\n  { stage: 6, text: '    }' },\n  { stage: 4, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 12, text: '  return 0;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 122,\n  problemName: `Minimum Depth Binary Tree`,\n  problemText: `Find the minimum depth of a binary tree. The minimum depth is the number of nodes along the shortest path from the root node to the nearest leaf node.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: `const root = new TreeNode(12);\n      root.left = new TreeNode(7);\n      root.right = new TreeNode(1);\n      root.right.left = new TreeNode(10);\n      root.right.right = new TreeNode(5);`,\n      evaluate: `find_minimum_depth(root);`,\n      expected: 2,\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [1],\n      code: `root.left.left = new TreeNode(9);\n      root.right.left.left = new TreeNode(11);`,\n      evaluate: `find_minimum_depth(root);`,\n      expected: 3,\n    },\n  ],\n  setupCode: `\n  class TreeNode {\n    constructor(val) {\n      this.val = val;\n      this.left = null;\n      this.right = null;\n    }\n  }\n  `,\n  category: TEMP,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330, 390],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, TEMP, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: -1, text: 'class TreeNode {' },\n  { stage: -1, text: '  constructor(val) {' },\n  { stage: -1, text: '    this.val = val;' },\n  { stage: -1, text: '    this.left = null;' },\n  { stage: -1, text: '    this.right = null;' },\n  { stage: -1, text: '  }' },\n  { stage: -1, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function find_successor(root, key) {' },\n  { stage: 1, text: '  if (root === null) {' },\n  { stage: 1, text: '    return null;' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 2, text: '  const queue = [];' },\n  { stage: 2, text: '  queue.push(root);' },\n  { stage: 3, text: '  while (queue.length > 0) {' },\n  { stage: 4, text: '    let currentNode = queue.shift();' },\n  { stage: 5, text: '    if (currentNode.left !== null) {' },\n  { stage: 5, text: '      queue.push(currentNode.left);' },\n  { stage: 5, text: '    }' },\n  { stage: 6, text: '    if (currentNode.right !== null) {' },\n  { stage: 6, text: '      queue.push(currentNode.right);' },\n  { stage: 6, text: '    }' },\n  { stage: 7, text: '    if (currentNode.val === key) {' },\n  { stage: 7, text: '      break;' },\n  { stage: 7, text: '    }' },\n  { stage: 3, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 8, text: '  if (queue.length > 0) {' },\n  { stage: 8, text: '    return queue[0];' },\n  { stage: 8, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 9, text: '  return null;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 123,\n  problemName: `Level Order Successor`,\n  problemText: `Given a binary tree and a node, find the level order successor of the given node in the tree. The level order successor is the node that appears right after the given node in the level order traversal.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: `const root = new TreeNode(12);\n      root.left = new TreeNode(7);\n      root.right = new TreeNode(1);\n      root.left.left = new TreeNode(9);\n      root.right.left = new TreeNode(10);\n      root.right.right = new TreeNode(5);`,\n      evaluate: `find_successor(root, 12).val;`,\n      expected: 7,\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [1],\n      code: ``,\n      evaluate: `find_successor(root, 9).val;`,\n      expected: 10,\n    },\n  ],\n  setupCode: `\n  class TreeNode {\n    constructor(val) {\n      this.val = val;\n      this.left = null;\n      this.right = null;\n    }\n  }\n  `,\n  category: TEMP,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 300],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, TEMP, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: -1, text: 'class TreeNode {' },\n  { stage: -1, text: '  constructor(val, left = null, right = null) {' },\n  { stage: -1, text: '    this.val = val;' },\n  { stage: -1, text: '    this.left = left;' },\n  { stage: -1, text: '    this.right = right;' },\n  { stage: -1, text: '  }' },\n  { stage: -1, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function hasPath(root, sum) {' },\n  { stage: 1, text: '  if (root === null) {' },\n  { stage: 2, text: '    return false;' },\n  { stage: 1, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 3, text: '  if (root.val === sum && root.left === null && root.right === null) {' },\n  { stage: 4, text: '    return true;' },\n  { stage: 3, text: '  }' },\n  { stage: 0, text: '' },\n  {\n    stage: 6,\n    text: '  return hasPath(root.left, sum - root.val) || hasPath(root.right, sum - root.val);',\n  },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 124,\n  problemName: `Binary Tree Path Sum`,\n  problemText: `Given a binary tree and a number ‘S’, find if the tree has a path from root-to-leaf such that the sum of all the node values of that path equals ‘S’.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: `const root = new TreeNode(12);\n      root.left = new TreeNode(7);\n      root.right = new TreeNode(1);\n      root.left.left = new TreeNode(9);\n      root.right.left = new TreeNode(10);\n      root.right.right = new TreeNode(5);`,\n      evaluate: `hasPath(root, 23);`,\n      expected: true,\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [1],\n      code: ``,\n      evaluate: `hasPath(root, 16);`,\n      expected: false,\n    },\n  ],\n  setupCode: `\n  class TreeNode {\n    constructor(val, left = null, right = null) {\n      this.val = val;\n      this.left = left;\n      this.right = right;\n    }\n  }\n  `,\n  category: TEMP,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 210],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, TEMP, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: -1, text: 'class MinHeap {' },\n  { stage: -1, text: '  /*' },\n  { stage: -1, text: '    add(item: Number)' },\n  { stage: -1, text: '    poll(): Number' },\n  { stage: -1, text: '    length(): Number' },\n  { stage: -1, text: '  */' },\n  { stage: -1, text: '}' },\n  { stage: -1, text: '' },\n  { stage: -1, text: 'class MaxHeap {' },\n  { stage: -1, text: '  /*' },\n  { stage: -1, text: '    add(item: Number)' },\n  { stage: -1, text: '    poll(): Number' },\n  { stage: -1, text: '    length(): Number' },\n  { stage: -1, text: '  */' },\n  { stage: -1, text: '}' },\n  { stage: 0, text: '' },\n  { stage: 0, text: 'class MedianOfAStream {' },\n  { stage: 0, text: '  constructor() {' },\n  { stage: 0, text: '    this.maxHeap = new MaxHeap();' },\n  { stage: 0, text: '    this.minHeap = new MinHeap();' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '  insert_num(num) {' },\n  { stage: 1, text: '    if (this.maxHeap.length() === 0 || this.maxHeap.peek() >= num) {' },\n  { stage: 2, text: '      this.maxHeap.add(num);' },\n  { stage: 1, text: '    } else {' },\n  { stage: 3, text: '      this.minHeap.add(num);' },\n  { stage: 1, text: '    }' },\n  { stage: 0, text: '' },\n  { stage: 4, text: '    if (this.maxHeap.length() > this.minHeap.length + 1) {' },\n  { stage: 5, text: '      this.minHeap.add(this.maxHeap.poll());' },\n  { stage: 4, text: '    } else if (this.maxHeap.length() < this.minHeap.length()) {' },\n  { stage: 6, text: '      this.maxHeap.add(this.minHeap.poll());' },\n  { stage: 4, text: '    }' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 0, text: '  find_median() {' },\n  { stage: 7, text: '    if (this.maxHeap.length() === this.minHeap.length()) {' },\n  { stage: 8, text: '      return this.maxHeap.peek() / 2.0 + this.minHeap.peek() / 2.0;' },\n  { stage: 7, text: '    }' },\n  { stage: 0, text: '' },\n  { stage: 9, text: '    return this.maxHeap.peek();' },\n  { stage: 0, text: '  }' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 125,\n  problemName: `Find Median In Stream`,\n  problemText: `Design a class to calculate the median of a number stream. The class should have the following two methods:\n\n - **insertNum** (int num): stores the number in the class\n - **findMedian** (): returns the median of all numbers inserted in the class\n\nIf the count of numbers inserted in the class is even, the median will be the average of the middle two numbers.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: `const medianOfAStream = new MedianOfAStream();medianOfAStream.insert_num(3);medianOfAStream.insert_num(1);`,\n      evaluate: `medianOfAStream.find_median();`,\n      expected: 3,\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [1],\n      code: `medianOfAStream.insert_num(5);`,\n      evaluate: `medianOfAStream.find_median();`,\n      expected: 3,\n    },\n    {\n      id: 3,\n      name: 'example 3',\n      inherit: [1, 2],\n      code: `medianOfAStream.insert_num(4);`,\n      evaluate: `medianOfAStream.find_median();`,\n      expected: 3.5,\n    },\n  ],\n  setupCode: `\n  class MinHeap {\n    constructor() {\n      this.heapContainer = [];\n    }\n  \n    getLeftChildIndex(parentIndex) {\n      return 2 * parentIndex + 1;\n    }\n  \n    getRightChildIndex(parentIndex) {\n      return 2 * parentIndex + 2;\n    }\n  \n    hasLeftChild(parentIndex) {\n      return this.getLeftChildIndex(parentIndex) < this.heapContainer.length;\n    }\n  \n    hasRightChild(parentIndex) {\n      return this.getRightChildIndex(parentIndex) < this.heapContainer.length;\n    }\n  \n    leftChild(parentIndex) {\n      return this.heapContainer[this.getLeftChildIndex(parentIndex)];\n    }\n  \n    rightChild(parentIndex) {\n      return this.heapContainer[this.getRightChildIndex(parentIndex)];\n    }\n  \n    getParentIndex(childIndex) {\n      return Math.floor((childIndex - 1) / 2);\n    }\n  \n    hasParent(childIndex) {\n      return this.getParentIndex(childIndex) >= 0;\n    }\n  \n    parent(childIndex) {\n      return this.heapContainer[this.getParentIndex(childIndex)];\n    }\n  \n    peek() {\n      if (this.heapContainer.length === 0) {\n        return null;\n      }\n      return this.heapContainer[0];\n    }\n  \n    poll() {\n      if (this.heapContainer.length === 0) {\n        return null;\n      }\n      if (this.heapContainer.length === 1) {\n        return this.heapContainer.pop();\n      }\n      const item = this.heapContainer[0];\n      this.heapContainer[0] = this.heapContainer.pop();\n      this.heapifyDown();\n      return item;\n    }\n  \n    add(item) {\n      this.heapContainer.push(item);\n      this.heapifyUp();\n      return this;\n    }\n  \n    heapifyUp(customStartIndex) {\n      let currentIndex = customStartIndex || this.heapContainer.length - 1;\n      while (\n        this.hasParent(currentIndex) &&\n        !(this.parent(currentIndex) <= this.heapContainer[currentIndex])\n      ) {\n        this.swap(currentIndex, this.getParentIndex(currentIndex));\n        currentIndex = this.getParentIndex(currentIndex);\n      }\n    }\n  \n    heapifyDown(customStartIndex = 0) {\n      let currentIndex = customStartIndex;\n      let nextIndex = null;\n      while (this.hasLeftChild(currentIndex)) {\n        if (\n          this.hasRightChild(currentIndex) &&\n          this.rightChild(currentIndex) <= this.leftChild(currentIndex)\n        ) {\n          nextIndex = this.getRightChildIndex(currentIndex);\n        } else {\n          nextIndex = this.getLeftChildIndex(currentIndex);\n        }\n        if (this.heapContainer[currentIndex] <= this.heapContainer[nextIndex]) {\n          break;\n        }\n        this.swap(currentIndex, nextIndex);\n        currentIndex = nextIndex;\n      }\n    }\n  \n    swap(indexOne, indexTwo) {\n      const tmp = this.heapContainer[indexTwo];\n      this.heapContainer[indexTwo] = this.heapContainer[indexOne];\n      this.heapContainer[indexOne] = tmp;\n    }\n  \n    length() {\n      return this.heapContainer.length;\n    }\n  }\n  \n  class MaxHeap {\n    constructor() {\n      this.heapContainer = [];\n    }\n  \n    getLeftChildIndex(parentIndex) {\n      return 2 * parentIndex + 1;\n    }\n  \n    getRightChildIndex(parentIndex) {\n      return 2 * parentIndex + 2;\n    }\n  \n    hasLeftChild(parentIndex) {\n      return this.getLeftChildIndex(parentIndex) < this.heapContainer.length;\n    }\n  \n    hasRightChild(parentIndex) {\n      return this.getRightChildIndex(parentIndex) < this.heapContainer.length;\n    }\n  \n    leftChild(parentIndex) {\n      return this.heapContainer[this.getLeftChildIndex(parentIndex)];\n    }\n  \n    rightChild(parentIndex) {\n      return this.heapContainer[this.getRightChildIndex(parentIndex)];\n    }\n  \n    getParentIndex(childIndex) {\n      return Math.floor((childIndex - 1) / 2);\n    }\n  \n    hasParent(childIndex) {\n      return this.getParentIndex(childIndex) >= 0;\n    }\n  \n    parent(childIndex) {\n      return this.heapContainer[this.getParentIndex(childIndex)];\n    }\n  \n    peek() {\n      if (this.heapContainer.length === 0) {\n        return null;\n      }\n      return this.heapContainer[0];\n    }\n  \n    poll() {\n      if (this.heapContainer.length === 0) {\n        return null;\n      }\n      if (this.heapContainer.length === 1) {\n        return this.heapContainer.pop();\n      }\n      const item = this.heapContainer[0];\n      this.heapContainer[0] = this.heapContainer.pop();\n      this.heapifyDown();\n      return item;\n    }\n  \n    add(item) {\n      this.heapContainer.push(item);\n      this.heapifyUp();\n      return this;\n    }\n  \n    heapifyUp(customStartIndex) {\n      let currentIndex = customStartIndex || this.heapContainer.length - 1;\n      while (\n        this.hasParent(currentIndex) &&\n        !(this.parent(currentIndex) >= this.heapContainer[currentIndex])\n      ) {\n        this.swap(currentIndex, this.getParentIndex(currentIndex));\n        currentIndex = this.getParentIndex(currentIndex);\n      }\n    }\n  \n    heapifyDown(customStartIndex = 0) {\n      let currentIndex = customStartIndex;\n      let nextIndex = null;\n      while (this.hasLeftChild(currentIndex)) {\n        if (\n          this.hasRightChild(currentIndex) &&\n          this.rightChild(currentIndex) >= this.leftChild(currentIndex)\n        ) {\n          nextIndex = this.getRightChildIndex(currentIndex);\n        } else {\n          nextIndex = this.getLeftChildIndex(currentIndex);\n        }\n        if (this.heapContainer[currentIndex] >= this.heapContainer[nextIndex]) {\n          break;\n        }\n        this.swap(currentIndex, nextIndex);\n        currentIndex = nextIndex;\n      }\n    }\n  \n    swap(indexOne, indexTwo) {\n      const tmp = this.heapContainer[indexTwo];\n      this.heapContainer[indexTwo] = this.heapContainer[indexOne];\n      this.heapContainer[indexOne] = tmp;\n    }\n  \n    length() {\n      return this.heapContainer.length;\n    }\n  }\n  `,\n  category: TEMP,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 300],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, TEMP, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function pair_with_target_sum(arr, targetSum) {' },\n  { stage: 1, text: '  let left = 0;' },\n  { stage: 1, text: '  let right = arr.length - 1;' },\n  { stage: 2, text: '  while (left < right) {' },\n  { stage: 3, text: '    const currentSum = arr[left] + arr[right];' },\n  { stage: 4, text: '    if (currentSum === targetSum) {' },\n  { stage: 4, text: '      return [left, right];' },\n  { stage: 4, text: '    }' },\n  { stage: 0, text: '' },\n  { stage: 5, text: '    if (targetSum > currentSum) {' },\n  { stage: 6, text: '      left += 1;' },\n  { stage: 5, text: '    } else {' },\n  { stage: 6, text: '      right -= 1;' },\n  { stage: 5, text: '    }' },\n  { stage: 2, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 7, text: '  return [-1, -1];' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 126,\n  problemName: `Pair with Target Sum`,\n  problemText: `Given an array of sorted numbers and a target sum, find a pair in the array whose sum is equal to the given target.\n\nWrite a function to return the indices of the two numbers (i.e. the pair) such that they add up to the given target.\n  `,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: ``,\n      evaluate: `pair_with_target_sum([1, 2, 3, 4, 6], 6);`,\n      expected: JSON.stringify([1, 3]),\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: ``,\n      evaluate: `pair_with_target_sum([2, 5, 9, 11], 11);`,\n      expected: JSON.stringify([0, 2]),\n    },\n  ],\n  setupCode: ``,\n  category: TEMP,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 240],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, TEMP, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function remove_duplicates(arr) {' },\n  { stage: 1, text: '  let nextNonDuplicate = 1;' },\n  { stage: 0, text: '' },\n  { stage: 1, text: '  let i = 1;' },\n  { stage: 2, text: '  while (i < arr.length) {' },\n  { stage: 3, text: '    if (arr[nextNonDuplicate - 1] !== arr[i]) {' },\n  { stage: 4, text: '      arr[nextNonDuplicate] = arr[i];' },\n  { stage: 4, text: '      nextNonDuplicate += 1;' },\n  { stage: 3, text: '    }' },\n  { stage: 5, text: '    i += 1;' },\n  { stage: 2, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 5, text: '  return nextNonDuplicate;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 127,\n  problemName: `Remove Duplicates in Sorted Array`,\n  problemText: `Given an array of sorted numbers, remove all duplicates from it. You should not use any extra space; after removing the duplicates in-place return the length of the subarray that has no duplicate in it.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: ``,\n      evaluate: `remove_duplicates([2, 3, 3, 3, 6, 9, 9]);`,\n      expected: 4,\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: ``,\n      evaluate: `remove_duplicates([2, 2, 2, 11]);`,\n      expected: 2,\n    },\n  ],\n  setupCode: ``,\n  category: TEMP,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 180],\n    solutionLines: solution,\n  },\n};\n","import { ALGORITHM, TEMP, INTERMEDIATE } from '../constants.js';\n\nconst solution = [\n  { stage: 0, text: '' },\n  { stage: 0, text: 'function make_squares(arr) {' },\n  { stage: 1, text: '  const n = arr.length;' },\n  { stage: 1, text: '  let squares = Array(n).fill(0);' },\n  { stage: 2, text: '  let highestSquareIdx = n - 1;' },\n  { stage: 2, text: '  let left = 0;' },\n  { stage: 2, text: '  let right = n - 1;' },\n  { stage: 0, text: '' },\n  { stage: 3, text: '  while (left <= right) {' },\n  { stage: 4, text: '    let leftSquare = arr[left] * arr[left];' },\n  { stage: 4, text: '    let rightSquare = arr[right] * arr[right];' },\n  { stage: 5, text: '    if (leftSquare > rightSquare) {' },\n  { stage: 6, text: '      squares[highestSquareIdx] = leftSquare;' },\n  { stage: 6, text: '      left += 1;' },\n  { stage: 5, text: '    } else {' },\n  { stage: 7, text: '      squares[highestSquareIdx] = rightSquare;' },\n  { stage: 7, text: '      right -= 1;' },\n  { stage: 5, text: '    }' },\n  { stage: 0, text: '' },\n  { stage: 8, text: '    highestSquareIdx -= 1;' },\n  { stage: 3, text: '  }' },\n  { stage: 0, text: '' },\n  { stage: 9, text: '  return squares;' },\n  { stage: 0, text: '}' },\n  { stage: 0, text: '' },\n];\n\nexport const data = {\n  problemID: 128,\n  problemName: `Squaring Sorted Array`,\n  problemText: `Given a sorted array, create a new array containing squares of all the numbers of the input array in the sorted order.`,\n  testCases: [\n    {\n      id: 1,\n      name: 'example 1',\n      inherit: [],\n      code: ``,\n      evaluate: `make_squares([-2, -1, 0, 2, 3]);`,\n      expected: JSON.stringify([0, 1, 4, 4, 9]),\n    },\n    {\n      id: 2,\n      name: 'example 2',\n      inherit: [],\n      code: ``,\n      evaluate: `make_squares([-3, -1, 0, 1, 2]);`,\n      expected: JSON.stringify([0, 1, 1, 4, 9]),\n    },\n  ],\n  setupCode: ``,\n  category: TEMP,\n  type: ALGORITHM,\n  difficulty: INTERMEDIATE,\n  maxExecutionTime: 2,\n  solution: {\n    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 300],\n    solutionLines: solution,\n  },\n};\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst gameSlice = createSlice({\n  name: 'game',\n  initialState: {\n    value: '',\n    value2: '',\n    results: [],\n    revealButtonPressed: false,\n    isBusyTesting: false,\n    activeIndex: 0,\n    totalSeconds: 0,\n    isRunning: false,\n    open: false,\n    noteCode: '',\n    tableSort: 'id', // id | fail | success\n    sessionHistory: [],\n  },\n  reducers: {\n    setValue: (state, { type, payload }) => {\n      state.value = payload;\n    },\n    setValue2: (state, { type, payload }) => {\n      state.value2 = payload;\n    },\n    setResults: (state, { type, payload }) => {\n      state.results = payload;\n    },\n    setRevealButtonPressed: (state, { type, payload }) => {\n      state.revealButtonPressed = payload;\n    },\n    setIsBusyTesting: (state, { type, payload }) => {\n      state.setIsBusyTesting = payload;\n    },\n    setActiveIndex: (state, { type, payload }) => {\n      state.activeIndex = payload;\n    },\n    setTotalSeconds: (state, { type, payload }) => {\n      state.totalSeconds = payload;\n    },\n    setOpen: (state, { type, payload }) => {\n      state.open = payload;\n    },\n    setNoteCode: (state, { type, payload }) => {\n      state.noteCode = payload;\n    },\n    updateTableSort: (state, { type, payload }) => {\n      state.tableSort = payload;\n    },\n    setSessionHistory: (state, { type, payload }) => {\n      state.sessionHistory = payload;\n    },\n    incrementTotalSeconds: (state, { type, payload }) => {\n      state.totalSeconds = state.totalSeconds + 1;\n    },\n    setIsRunning: (state, { type, payload }) => {\n      state.isRunning = payload;\n    },\n    startRunningTests: (state, { type, payload }) => {\n      state.results = [];\n      state.activeIndex = 1;\n      state.isBusyTesting = true;\n    },\n    concludeRunningTests: (state, { type, payload }) => {\n      const { r, entry } = payload;\n      state.results = r;\n      state.isBusyTesting = false;\n      if (r.every(d => d.ok) && !state.revealButtonPressed) {\n        state.isRunning = false;\n        state.sessionHistory.push(entry);\n        state.revealButtonPressed = true;\n      }\n    },\n    clickNextToResults: (state, { type, payload }) => {\n      state.totalSeconds = 0;\n      state.isRunning = false;\n      state.revealButtonPressed = false;\n      state.activeIndex = 0;\n      state.value = '';\n      state.results = [];\n    },\n    clickSkipToResults: (state, { type, payload }) => {\n      const id = payload;\n      if (!state.revealButtonPressed) {\n        state.sessionHistory.push({ id, seconds: null });\n      }\n      state.totalSeconds = 0;\n      state.isRunning = false;\n      state.revealButtonPressed = false;\n      state.activeIndex = 0;\n      state.value = '';\n      state.results = [];\n    },\n    clickNext: (state, { type, payload }) => {\n      state.totalSeconds = 0;\n      state.isRunning = true;\n      state.revealButtonPressed = false;\n      state.activeIndex = 0;\n      state.value = '';\n      state.results = [];\n    },\n    clickSkip: (state, { type, payload }) => {\n      const id = payload;\n      if (!state.revealButtonPressed) {\n        state.sessionHistory.push({ id, seconds: null });\n      }\n      state.totalSeconds = 0;\n      state.isRunning = true;\n      state.revealButtonPressed = false;\n      state.activeIndex = 0;\n      state.value = '';\n      state.results = [];\n    },\n    revealAnswer: (state, { type, payload }) => {\n      const { id, data } = payload;\n      state.revealButtonPressed = true;\n      state.isRunning = false;\n      state.sessionHistory.push({ id, seconds: null });\n      // code to reveal\n      state.value2 = data.solution.solutionLines\n        .map(line => {\n          return line.text;\n        })\n        .join('\\n');\n    },\n  },\n});\n\nexport const {\n  setValue,\n  setValue2,\n  setResults,\n  setRevealButtonPressed,\n  setIsBusyTesting,\n  setActiveIndex,\n  setTotalSeconds,\n  setOpen,\n  setNoteCode,\n  updateTableSort,\n  setSessionHistory,\n  incrementTotalSeconds,\n  setIsRunning,\n  startRunningTests,\n  concludeRunningTests,\n  clickNextToResults,\n  clickSkipToResults,\n  clickNext,\n  clickSkip,\n  revealAnswer,\n} = gameSlice.actions;\n\nexport const gameReducer = gameSlice.reducer;\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/worker.cdb86241.worker.js\");\n}\n","// deal with personalBests in LocalStorage\n\nconst PERSONAL_BESTS = 'personalBests';\n\nexport function submitResult(entry) {\n  // entry: {id: 1, seconds:90}\n  try {\n    const personalBestsRaw = localStorage.getItem(PERSONAL_BESTS);\n    const personalBests = JSON.parse(personalBestsRaw);\n    if (!personalBests) {\n      throw new Error('Need to populate initial data.');\n    }\n    const previousBest = personalBests[entry.id];\n    if (!previousBest || entry.seconds < previousBest) {\n      personalBests[entry.id] = entry.seconds;\n      localStorage.setItem(PERSONAL_BESTS, JSON.stringify(personalBests));\n    }\n  } catch (err) {\n    // okay to ignore error\n    const personalBests = {};\n    personalBests[entry.id] = entry.seconds;\n    localStorage.setItem(PERSONAL_BESTS, JSON.stringify(personalBests));\n  }\n}\n\nexport function getPersonalBests() {\n  try {\n    const personalBestsRaw = localStorage.getItem(PERSONAL_BESTS);\n    const personalBests = JSON.parse(personalBestsRaw);\n    if (!personalBests) {\n      throw new Error('Need to populate initial data.');\n    }\n    return personalBests;\n  } catch (err) {\n    // okay to ignore error\n    const personalBests = {};\n    localStorage.setItem(PERSONAL_BESTS, JSON.stringify(personalBests));\n    return personalBests;\n  }\n}\n\nexport function clearPersonalBests() {\n  const personalBests = {};\n  localStorage.setItem(PERSONAL_BESTS, JSON.stringify(personalBests));\n  return personalBests;\n}\n","import { getPersonalBests } from './personalBests.js';\n\nexport const HOME_PAGE = '/';\nexport const SESSION_STATS_PAGE = '/sessionStats';\nexport const HISTORIC_STATS_PAGE = '/historicStats';\nexport const GAME_PAGE = '/:id';\n\nexport const BLANK_TIME = '00:00:00';\n\nexport function constructTest(testCases, inherit, code, evaluate, setupCode) {\n  let inheritedCode = ';';\n\n  for (let idRef of inherit) {\n    const foundCase = testCases.find(d => d.id === idRef);\n    if (foundCase) {\n      inheritedCode += foundCase.code;\n    } else {\n      console.error(`Could not find testCase id: ${idRef}`);\n    }\n  }\n\n  const test = inheritedCode + code + evaluate;\n\n  const text = `/* Test Code */\\n\\n\\n${inheritedCode}${code}\\n\\n\\n/* Evaluation Code */\\n\\n\\n${evaluate}\\n\\n\\n/* Implicit Code Below */\\n\\n\\n${setupCode}`;\n\n  return { test, text };\n}\n\nexport function convertToSeconds(hours, minutes, seconds) {\n  return hours * 3600 + minutes * 60 + seconds;\n}\n\nexport function convertToTimer(secondsRaw) {\n  if (!secondsRaw) {\n    return BLANK_TIME;\n  }\n  const { hours, minutes, seconds } = convertToHoursMinutesSeconds(secondsRaw);\n  return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(\n    seconds,\n  ).padStart(2, '0')}`;\n}\n\nexport function convertToHoursMinutesSeconds(seconds) {\n  let hours = 0;\n  let minutes = 0;\n\n  if (seconds > 3600) {\n    hours = Math.floor(seconds / 3600);\n    seconds = seconds % 3600;\n  }\n\n  if (seconds > 60) {\n    minutes = Math.floor(seconds / 60);\n    seconds = seconds % 60;\n  }\n\n  return { hours, minutes, seconds };\n}\n\nexport function colorCodeTime(totalSeconds, data, revealButtonPressed, passedAllTests) {\n  const personalBests = getPersonalBests();\n  const personalBest = personalBests[data.problemID];\n\n  let color = 'green';\n\n  if (personalBest && totalSeconds > personalBest) {\n    color = 'blue';\n  }\n\n  const lastStageSeconds = data.solution.stages[data.solution.stages.length - 1];\n\n  if (totalSeconds > lastStageSeconds || revealButtonPressed) {\n    color = 'red';\n  }\n\n  if (passedAllTests) {\n    color = 'green';\n  }\n\n  return color;\n}\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport * as Comlink from 'comlink';\n/* eslint-disable import/no-webpack-loader-syntax */\nimport Worker from 'worker-loader!../worker';\nimport { submitResult } from '../personalBests.js';\nimport { constructTest } from '../util.js';\nimport { inventory } from '../data/inventory';\nimport { startRunningTests, concludeRunningTests } from './gameStore.js';\n\nexport const clickRun = createAsyncThunk('', async (id, thunkAPI) => {\n  const state = thunkAPI.getState();\n  const value = state.game.value;\n  const data = inventory[id];\n\n  thunkAPI.dispatch(startRunningTests());\n\n  // for each test\n  const promisedResults = data.testCases.map(async test => {\n    // run sandbox code in a worker\n    const worker = new Worker();\n    const obj = Comlink.wrap(worker);\n    let error = '';\n    const response = obj\n      .evaluate(\n        value +\n          data.setupCode +\n          constructTest(data.testCases, test.inherit, test.code, test.evaluate, '').test,\n      )\n      .catch(e => {\n        error = e.message;\n      });\n    const timeout = new Promise((resolve, reject) => {\n      setTimeout(reject, data.maxExecutionTime * 1000, new Error('Timeout'));\n    }).catch(e => {\n      error = e.message;\n    });\n    const val = await Promise.race([response, timeout]);\n    obj[Comlink.releaseProxy]();\n    worker.terminate();\n\n    // update test result\n    let representation = '';\n    if (typeof val === 'object' && val != null) {\n      representation = JSON.stringify(val);\n    } else {\n      representation = val;\n    }\n\n    // determine if actual === expected\n    const ok = test.expected === representation && !error;\n\n    // format for display in table\n    const presentation =\n      typeof representation !== 'string' ? JSON.stringify(representation) : representation;\n\n    return { ...test, actual: presentation, error, ok };\n  });\n\n  await Promise.all(promisedResults).then(r => {\n    const entry = { id, seconds: state.game.totalSeconds };\n    thunkAPI.dispatch(concludeRunningTests({ r, entry }));\n    submitResult(entry);\n  });\n});\n","import * as React from 'react';\nimport AceEditor from 'react-ace';\nimport prettier from 'prettier/esm/standalone.mjs';\nimport parserBabel from 'prettier/esm/parser-babel.mjs';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { setValue } from '../redux/gameStore.js';\nimport { clickRun } from '../redux/thunks.js';\nimport { useParams } from 'react-router-dom';\n\nfunction EditorMain() {\n  const dispatch = useDispatch();\n  const value = useSelector(state => state.game.value);\n\n  const editor1 = React.useRef();\n  const propsRef = React.useRef({});\n  const { id } = useParams();\n  propsRef.current.id = id;\n\n  const onChange = val => {\n    dispatch(setValue(val));\n    editor1.current.editor.resize();\n  };\n\n  return (\n    <div\n      style={{ padding: '1vh 1vw', width: '48.5vw', backgroundColor: 'ivory', borderRadius: '5px' }}\n    >\n      <AceEditor\n        ref={editor1}\n        placeholder={'Enter text here...'}\n        mode=\"javascript\"\n        theme=\"dawn\"\n        name=\"editor1\"\n        onChange={onChange}\n        value={value}\n        width={'47vw'}\n        height={'59vh'}\n        showGutter={true}\n        highlightActiveLine={true}\n        wrapEnabled={true}\n        setOptions={{\n          enableBasicAutocompletion: true,\n          enableLiveAutocompletion: true,\n          showLineNumbers: true,\n          tabSize: 2,\n        }}\n        commands={[\n          {\n            name: 'prettier',\n            bindKey: { win: 'Ctrl-S', mac: 'Cmd-S' },\n            exec: editor => {\n              try {\n                const formatted = prettier.format(editor.session.getValue(), {\n                  parser: 'babel',\n                  plugins: [parserBabel],\n                });\n                dispatch(setValue(formatted));\n              } catch (err) {\n                console.log('There was an error in compilation.');\n              }\n            },\n          },\n          {\n            name: 'run tests',\n            bindKey: { win: 'Ctrl-M', mac: 'Cmd-M' },\n            exec: async () => {\n              try {\n                await dispatch(clickRun(propsRef.current.id));\n              } catch (err) {\n                console.log('Encountered an error when attempting to run tests.');\n              }\n            },\n          },\n        ]}\n      />\n    </div>\n  );\n}\n\nexport default EditorMain;\n","import * as React from 'react';\nimport AceEditor from 'react-ace';\nimport { useSelector } from 'react-redux';\n\nfunction EditorSecondary() {\n  const value2 = useSelector(state => state.game.value2);\n  const editor2 = React.useRef();\n\n  const onChange2 = () => {\n    editor2.current.editor.resize();\n  };\n\n  return (\n    <div\n      style={{ padding: '1vh 1vw', width: '48.5vw', backgroundColor: 'ivory', borderRadius: '5px' }}\n    >\n      <AceEditor\n        ref={editor2}\n        placeholder=\"No suggestions...\"\n        mode=\"javascript\"\n        theme=\"github\"\n        width={'47vw'}\n        height={'59vh'}\n        name=\"editor2\"\n        readOnly={true}\n        showGutter={true}\n        onChange={onChange2}\n        value={value2}\n        highlightActiveLine={false}\n        wrapEnabled={true}\n        setOptions={{\n          showLineNumbers: true,\n          tabSize: 2,\n        }}\n      />\n    </div>\n  );\n}\n\nexport default EditorSecondary;\n","import * as React from 'react';\nimport { Modal, Button } from 'semantic-ui-react';\nimport hljs from 'highlight.js/lib/core';\nimport javascript from 'highlight.js/lib/languages/javascript';\nimport { useDispatch, useSelector } from 'react-redux';\nimport 'highlight.js/styles/github.css';\nimport { setOpen } from '../redux/gameStore';\n\nhljs.registerLanguage('javascript', javascript);\n\nfunction TestCodeModal() {\n  const dispatch = useDispatch();\n  const open = useSelector(state => state.game.open);\n  const noteCode = useSelector(state => state.game.noteCode);\n\n  return (\n    <Modal\n      onClose={() => dispatch(setOpen(false))}\n      onOpen={() => dispatch(setOpen(true))}\n      open={open}\n    >\n      <Modal.Header>Test Code</Modal.Header>\n      <Modal.Content>\n        <div\n          style={{\n            whiteSpace: 'pre',\n            border: '1px dotted cornflowerblue',\n            backgroundColor: 'lavender',\n            borderRadius: '5px',\n            padding: '1em',\n            fontFamily: 'monospace',\n          }}\n          dangerouslySetInnerHTML={{ __html: hljs.highlight('javascript', noteCode).value }}\n        ></div>\n      </Modal.Content>\n      <Modal.Actions>\n        <Button style={{ width: '138px' }} onClick={() => dispatch(setOpen(false))}>\n          Close\n        </Button>\n      </Modal.Actions>\n    </Modal>\n  );\n}\n\nexport default TestCodeModal;\n","import * as React from 'react';\nimport { Table, Icon } from 'semantic-ui-react';\nimport { constructTest } from '../util.js';\nimport { inventory } from '../data/inventory.js';\nimport prettier from 'prettier/esm/standalone.mjs';\nimport parserBabel from 'prettier/esm/parser-babel.mjs';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { setOpen, setNoteCode, updateTableSort } from '../redux/gameStore';\nimport TestCodeModal from './TestCodeModal';\n\nfunction TestCaseTable() {\n  const dispatch = useDispatch();\n  const results = useSelector(state => state.game.results);\n  const tableSort = useSelector(state => state.game.tableSort);\n  const { id } = useParams();\n\n  const sortedResults = [...results].sort((a, b) => {\n    if (tableSort === 'id') {\n      return a.id - b.id;\n    } else if (tableSort === 'fail') {\n      let aValue = a.ok ? a.id + 10000 : a.id;\n      let bValue = b.ok ? b.id + 10000 : b.id;\n      return aValue - bValue;\n    } else if (tableSort === 'success') {\n      let aValue = a.ok ? a.id : a.id + 10000;\n      let bValue = b.ok ? b.id : b.id + 10000;\n      return aValue - bValue;\n    } else {\n      throw new Error(`Invalid sort choice: ${tableSort}`);\n    }\n  });\n\n  const nextSort = () => {\n    if (tableSort === 'id') {\n      dispatch(updateTableSort('fail'));\n    } else if (tableSort === 'fail') {\n      dispatch(updateTableSort('success'));\n    } else if (tableSort === 'success') {\n      dispatch(updateTableSort('id'));\n    } else {\n      throw new Error(`Invalid sort choice: ${tableSort}`);\n    }\n  };\n\n  if (!sortedResults.length) {\n    return null;\n  }\n\n  const data = inventory[id];\n\n  return (\n    <div>\n      <TestCodeModal />\n\n      <Table celled compact={'very'} className=\"run-results\">\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell style={{ textAlign: 'center' }}>ID</Table.HeaderCell>\n            <Table.HeaderCell style={{ textAlign: 'center' }}>Code</Table.HeaderCell>\n            <Table.HeaderCell>Description</Table.HeaderCell>\n            <Table.HeaderCell>Expected</Table.HeaderCell>\n            <Table.HeaderCell>Actual</Table.HeaderCell>\n            <Table.HeaderCell>Error</Table.HeaderCell>\n            <Table.HeaderCell onClick={nextSort} style={{ textAlign: 'center', cursor: 'pointer' }}>\n              Status\n            </Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n\n        <Table.Body>\n          {sortedResults.map(test => {\n            return (\n              <Table.Row\n                key={test.id}\n                style={{\n                  backgroundColor: test.ok ? 'rgba(0, 255, 0, 0.3)' : 'rgba(255, 0, 0, 0.3)',\n                }}\n              >\n                <Table.Cell style={{ textAlign: 'center' }}>{test.id}</Table.Cell>\n                <Table.Cell style={{ textAlign: 'center' }}>\n                  <Icon\n                    className=\"hover-note\"\n                    name=\"sticky note outline\"\n                    role=\"button\"\n                    onClick={() => {\n                      const constructedTest = constructTest(\n                        data.testCases,\n                        test.inherit,\n                        test.code,\n                        test.evaluate,\n                        data.setupCode,\n                      ).text;\n                      const formatted = prettier.format(constructedTest, {\n                        parser: 'babel',\n                        plugins: [parserBabel],\n                      });\n                      dispatch(setNoteCode(formatted));\n                      dispatch(setOpen(true));\n                    }}\n                  ></Icon>\n                </Table.Cell>\n                <Table.Cell>{test.name}</Table.Cell>\n                <Table.Cell>\n                  {typeof test.expected !== 'string'\n                    ? JSON.stringify(test.expected)\n                    : test.expected}\n                </Table.Cell>\n                <Table.Cell>{test.actual}</Table.Cell>\n                <Table.Cell>{test.error}</Table.Cell>\n                <Table.Cell style={{ textAlign: 'center' }}>\n                  {test.ok ? (\n                    <Icon color=\"green\" name=\"checkmark\" />\n                  ) : (\n                    <Icon color=\"red\" name=\"checkmark\" />\n                  )}\n                </Table.Cell>\n              </Table.Row>\n            );\n          })}\n        </Table.Body>\n      </Table>\n    </div>\n  );\n}\n\nexport default TestCaseTable;\n","import * as React from 'react';\nimport { Card } from 'semantic-ui-react';\nimport { inventory } from '../data/inventory.js';\nimport TestCaseTable from './TestCaseTable';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport showdown from 'showdown';\nimport { setActiveIndex } from '../redux/gameStore.js';\n\nconst converter = new showdown.Converter();\n\nfunction TabCards() {\n  const dispatch = useDispatch();\n  const isBusyTesting = useSelector(state => state.game.isBusyTesting);\n  const activeIndex = useSelector(state => state.game.activeIndex);\n  const results = useSelector(state => state.game.results);\n\n  const { id } = useParams();\n  const data = inventory[id];\n\n  if (!data) {\n    return [];\n  }\n\n  const hasTests = results.length;\n\n  function createMarkup() {\n    return { __html: converter.makeHtml(data.problemText) };\n  }\n\n  return (\n    <Card fluid raised={true} style={{ height: 'calc(32vh - 40px)' }}>\n      <p style={{ padding: '10px 0 0 10px' }}>\n        <span\n          className={activeIndex === 0 ? 'pane-base chosen-pane' : 'pane-base'}\n          onClick={() => dispatch(setActiveIndex(0))}\n        >\n          Problem\n        </span>{' '}\n        |{' '}\n        <span\n          className={activeIndex === 1 ? 'pane-base chosen-pane' : 'pane-base'}\n          onClick={() => dispatch(setActiveIndex(1))}\n        >\n          Test Results\n        </span>\n        <span style={{ float: 'right' }}>\n          {' '}\n          <span style={{ fontVariant: 'small-caps' }}>\n            {data.type} / {data.category}\n          </span>\n          <span\n            style={{\n              backgroundColor: 'azure',\n              color: 'black',\n              display: 'inline-block',\n              border: '1px solid darkslategrey',\n              borderRadius: '50%',\n              width: '1.5em',\n              height: '1.5em',\n              lineHeight: '1.25em',\n              verticalAlign: 'center',\n              boxShadow: '1px 1px 2px lightslategrey',\n              cursor: 'default',\n              marginRight: '1em',\n              marginLeft: '1em',\n              textAlign: 'center',\n            }}\n            title={data.difficulty}\n          >\n            {data.difficulty.slice(0, 1)}\n          </span>\n        </span>\n      </p>\n\n      <Card.Content style={{ height: 'calc(32vh - 70px)', overflowY: 'scroll' }}>\n        {activeIndex === 0 ? <div dangerouslySetInnerHTML={createMarkup()} /> : null}\n\n        {activeIndex === 1 ? (\n          isBusyTesting ? (\n            <p>Testing in Progress...</p>\n          ) : !hasTests ? (\n            <p>Tests have not been run yet for this problem.</p>\n          ) : (\n            <TestCaseTable id={id} />\n          )\n        ) : null}\n      </Card.Content>\n    </Card>\n  );\n}\n\nexport default TabCards;\n","import { inventory } from '../data/inventory.js';\nimport * as React from 'react';\nimport EditorMain from './EditorMain.js';\nimport EditorSecondary from './EditorSecondary.js';\nimport { useParams } from 'react-router-dom';\nimport TabCards from './TabCards';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { setValue, setValue2, setRevealButtonPressed, setIsRunning } from '../redux/gameStore.js';\n\nfunction Problem() {\n  const dispatch = useDispatch();\n  const value = useSelector(state => state.game.value);\n  const value2 = useSelector(state => state.game.value2);\n  const revealButtonPressed = useSelector(state => state.game.revealButtonPressed);\n  const totalSeconds = useSelector(state => state.game.totalSeconds);\n\n  const { id } = useParams();\n  const data = inventory[id];\n\n  React.useEffect(() => {\n    if (!data) {\n      return;\n    }\n\n    // if nothing in main editor, place minimal in there.\n    if (!value) {\n      const transform = [];\n      data.solution.solutionLines.forEach(line => {\n        if (line.stage === 0) {\n          transform.push(line.text);\n        }\n      });\n      dispatch(setValue(transform.join('\\n')));\n    }\n\n    if (\n      !revealButtonPressed &&\n      totalSeconds > data.solution.stages[data.solution.stages.length - 1]\n    ) {\n      dispatch(setRevealButtonPressed(true));\n      dispatch(setIsRunning(false));\n    }\n\n    let durationIndex = 0;\n    for (let [index, duration] of data.solution.stages.entries()) {\n      if (totalSeconds >= duration) {\n        durationIndex = index;\n      }\n    }\n\n    if (revealButtonPressed) {\n      durationIndex = Infinity;\n    }\n\n    const transform = data.solution.solutionLines\n      .map(line => {\n        if (line.stage <= durationIndex) {\n          return line.text;\n        }\n        return '  //';\n      })\n      .join('\\n');\n\n    if (JSON.stringify(value2) !== JSON.stringify(transform)) {\n      dispatch(setValue2(transform));\n    }\n  }, [data, revealButtonPressed, totalSeconds, value, value2, dispatch]);\n\n  if (!data) {\n    return <p>Problem Not Found</p>;\n  }\n\n  return (\n    <React.Fragment>\n      <div style={{ padding: '1vh 1vw' }}>\n        <div style={{ height: 'calc(35vh - 40px)', padding: '1vh 0 1vh 0vw' }}>\n          <TabCards />\n        </div>\n        <div className=\"editor-area columns\">\n          <div className=\"editor-area column\">\n            <EditorMain />\n          </div>\n          <div className=\"column\">\n            <EditorSecondary />\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default Problem;\n","import { createSlice } from '@reduxjs/toolkit';\nimport { categories, MIN_EFFORT, MAX_EFFORT } from '../data/inventory';\n\nconst defaultCategoryData = categories.map(d => {\n  return { name: d, isSelected: true };\n});\n\nconst filterSlice = createSlice({\n  name: 'filter',\n  initialState: {\n    selections: [],\n    results: [],\n    showModal: false,\n    activeProblemText: '',\n    categories: defaultCategoryData,\n    dsChecked: true,\n    algChecked: true,\n    minEffort: MIN_EFFORT,\n    maxEffort: MAX_EFFORT,\n    begChecked: true,\n    intChecked: true,\n    advChecked: true,\n    expChecked: true,\n  },\n  reducers: {\n    setSelections: (state, { type, payload }) => {\n      state.selections = payload;\n    },\n    shiftSelection: (state, { type, payload }) => {\n      state.selections = state.selections.slice(1);\n    },\n    setResults: (state, { type, payload }) => {\n      state.results = payload;\n    },\n    setShowModal: (state, { type, payload }) => {\n      state.showModal = payload;\n    },\n    setActiveProblemText: (state, { type, payload }) => {\n      state.activeProblemText = payload;\n    },\n    setCategories: (state, { type, payload }) => {\n      state.categories = payload;\n    },\n    setDsChecked: (state, { type, payload }) => {\n      state.dsChecked = payload;\n    },\n    setAlgChecked: (state, { type, payload }) => {\n      state.algChecked = payload;\n    },\n    setEffortSlider: (state, { type, payload }) => {\n      state.minEffort = payload[0];\n      state.maxEffort = payload[1];\n    },\n    pressReset: (state, { type, payload }) => {\n      state.categories = defaultCategoryData;\n      state.minEffort = MIN_EFFORT;\n      state.maxEffort = MAX_EFFORT;\n      state.dsChecked = true;\n      state.algChecked = true;\n      state.begChecked = true;\n      state.intChecked = true;\n      state.advChecked = true;\n      state.expChecked = true;\n    },\n    setBegChecked: (state, { type, payload }) => {\n      state.begChecked = payload;\n    },\n    setIntChecked: (state, { type, payload }) => {\n      state.intChecked = payload;\n    },\n    setAdvChecked: (state, { type, payload }) => {\n      state.advChecked = payload;\n    },\n    setExpChecked: (state, { type, payload }) => {\n      state.expChecked = payload;\n    },\n  },\n});\n\nexport const {\n  setSelections,\n  setResults,\n  setShowModal,\n  setActiveProblemText,\n  setCategories,\n  setDsChecked,\n  setAlgChecked,\n  pressReset,\n  setEffortSlider,\n  shiftSelection,\n  setBegChecked,\n  setIntChecked,\n  setAdvChecked,\n  setExpChecked,\n} = filterSlice.actions;\n\nexport const filterReducer = filterSlice.reducer;\n","import * as React from 'react';\nimport { Table, Button } from 'semantic-ui-react';\nimport { getPersonalBests } from './personalBests.js';\nimport { inventory } from './data/inventory.js';\nimport { convertToTimer } from './util.js';\nimport { useDispatch, useSelector } from 'react-redux';\nimport showdown from 'showdown';\nimport { setSessionHistory } from './redux/gameStore';\nimport { setActiveProblemText, setShowModal } from './redux/filterStore';\nconst converter = new showdown.Converter();\n\nfunction SessionStats() {\n  const dispatch = useDispatch();\n  const sessionHistory = useSelector(state => state.game.sessionHistory);\n  const personalBests = getPersonalBests();\n\n  const showModalMarkdown = problemText => {\n    dispatch(setActiveProblemText(problemText));\n    dispatch(setShowModal(true));\n  };\n\n  return (\n    <div style={{ paddingBottom: '30px' }}>\n      <h2 style={{ margin: '0 auto', padding: '30px 0', textAlign: 'center' }}>\n        Session Statistics\n      </h2>\n\n      <Table style={{ margin: 'auto', width: '80vw', maxWidth: '1200px', letterSpacing: '1px' }}>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>ID</Table.HeaderCell>\n            <Table.HeaderCell>Name</Table.HeaderCell>\n            <Table.HeaderCell style={{ textAlign: 'center' }}>Result</Table.HeaderCell>\n            <Table.HeaderCell style={{ textAlign: 'center' }}>Best</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n\n        <Table.Body>\n          {sessionHistory.map((entry, index) => {\n            const measuredTime = convertToTimer(entry.seconds);\n            const bestTime = convertToTimer(personalBests[entry.id]);\n\n            return (\n              <Table.Row\n                key={index}\n                style={{\n                  backgroundColor:\n                    measuredTime === bestTime ? `rgba(0,255,0,0.2)` : `rgba(255,0,0,0.2)`,\n                }}\n              >\n                <Table.Cell>{entry.id}</Table.Cell>\n                <Table.Cell>\n                  <div\n                    style={{ display: 'inline' }}\n                    className=\"hover-link\"\n                    onClick={() => showModalMarkdown(inventory[entry.id].problemText)}\n                    dangerouslySetInnerHTML={{\n                      __html: converter.makeHtml(inventory[entry.id].problemName),\n                    }}\n                  ></div>\n                </Table.Cell>\n                <Table.Cell style={{ textAlign: 'center' }}>{measuredTime}</Table.Cell>\n                <Table.Cell style={{ textAlign: 'center' }}>{bestTime}</Table.Cell>\n              </Table.Row>\n            );\n          })}\n        </Table.Body>\n      </Table>\n\n      {!sessionHistory.length ? (\n        <p style={{ padding: '10px', margin: 'auto', width: '80vw' }}>\n          The session history is empty.\n        </p>\n      ) : (\n        <div\n          style={{\n            width: '100%',\n            padding: '40px 0',\n          }}\n        >\n          <Button\n            style={{ width: '138px', display: 'block', margin: 'auto' }}\n            onClick={() => {\n              dispatch(setSessionHistory([]));\n            }}\n          >\n            Clear Stats\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default SessionStats;\n","import * as React from 'react';\nimport { Table, Button } from 'semantic-ui-react';\nimport { getPersonalBests, clearPersonalBests } from './personalBests.js';\nimport { inventory } from './data/inventory.js';\nimport { convertToTimer, BLANK_TIME } from './util.js';\nimport { useDispatch } from 'react-redux';\nimport showdown from 'showdown';\nimport { setActiveProblemText, setShowModal } from './redux/filterStore';\nconst converter = new showdown.Converter();\n\nfunction HistoricStats() {\n  const dispatch = useDispatch();\n  let [forceUpdate, setForceUpdate] = React.useState(0);\n  let personalBests = getPersonalBests();\n\n  console.log({ personalBests });\n\n  const showModalMarkdown = problemText => {\n    dispatch(setActiveProblemText(problemText));\n    dispatch(setShowModal(true));\n  };\n\n  return (\n    <div style={{ paddingBottom: '30px' }}>\n      <h2 style={{ margin: '0 auto', padding: '30px 0', textAlign: 'center' }}>\n        Historic Statistics\n      </h2>\n\n      <Table style={{ margin: 'auto', width: '80vw', maxWidth: '1200px', letterSpacing: '1px' }}>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>ID</Table.HeaderCell>\n            <Table.HeaderCell>Name</Table.HeaderCell>\n            <Table.HeaderCell style={{ textAlign: 'center' }}>Best</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n\n        <Table.Body>\n          {Object.keys(inventory).map((key, index) => {\n            const bestTime = convertToTimer(personalBests[key]);\n            if (bestTime === BLANK_TIME) {\n              return null;\n            }\n\n            return (\n              <Table.Row\n                key={index}\n                style={{\n                  backgroundColor: `lavender`,\n                }}\n              >\n                <Table.Cell>{key}</Table.Cell>\n                <Table.Cell>\n                  <div\n                    style={{ display: 'inline' }}\n                    className=\"hover-link\"\n                    onClick={() => showModalMarkdown(inventory[key].problemText)}\n                    dangerouslySetInnerHTML={{\n                      __html: converter.makeHtml(inventory[key].problemName),\n                    }}\n                  ></div>\n                </Table.Cell>\n                <Table.Cell style={{ textAlign: 'center' }}>{bestTime}</Table.Cell>\n              </Table.Row>\n            );\n          })}\n        </Table.Body>\n      </Table>\n\n      {!Object.keys(personalBests).length ? (\n        <p style={{ padding: '10px', margin: 'auto', width: '80vw' }}>The history is empty.</p>\n      ) : (\n        <div\n          style={{\n            width: '100%',\n            padding: '40px 0',\n          }}\n        >\n          <Button\n            style={{ width: '138px', display: 'block', margin: 'auto' }}\n            onClick={() => {\n              clearPersonalBests();\n              setForceUpdate(forceUpdate + 1);\n            }}\n          >\n            Clear Stats\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default HistoricStats;\n","import * as React from 'react';\nimport { Menu, Button, Icon, Popup } from 'semantic-ui-react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  convertToTimer,\n  colorCodeTime,\n  HOME_PAGE,\n  GAME_PAGE,\n  SESSION_STATS_PAGE,\n  HISTORIC_STATS_PAGE,\n} from './util.js';\nimport { useParams, useHistory } from 'react-router-dom';\nimport { inventory } from './data/inventory.js';\nimport { clickRun } from './redux/thunks';\nimport {\n  clickNextToResults,\n  clickSkipToResults,\n  clickNext,\n  clickSkip,\n  revealAnswer,\n} from './redux/gameStore';\nimport { shiftSelection, pressReset } from './redux/filterStore';\n\nfunction MainMenu({ page }) {\n  const dispatch = useDispatch();\n  const isBusyTesting = useSelector(state => state.game.isBusyTesting);\n  const revealButtonPressed = useSelector(state => state.game.revealButtonPressed);\n  const results = useSelector(state => state.game.results);\n  const totalSeconds = useSelector(state => state.game.totalSeconds);\n  const selections = useSelector(state => state.filter.selections);\n\n  const history = useHistory();\n  const { id } = useParams();\n  const data = inventory[id];\n\n  let passedTests = 0;\n  for (let result of results) {\n    if (result.ok) {\n      passedTests++;\n    }\n  }\n\n  const totalTests = data && data.testCases && data.testCases.length;\n  const showNextButton = totalTests === passedTests;\n  const hasNext = Boolean(selections && selections.length > 0);\n  const passedAllTests = results.length > 0 && results.every(d => d.ok);\n\n  return (\n    <Menu>\n      {page !== HOME_PAGE ? (\n        <Menu.Item>\n          <Button.Group>\n            <Popup\n              content=\"Home\"\n              trigger={\n                <Button\n                  icon\n                  onClick={() => {\n                    history.push('/');\n                  }}\n                >\n                  <Icon name=\"home\" />\n                </Button>\n              }\n            />\n          </Button.Group>\n        </Menu.Item>\n      ) : null}\n      <Menu.Item>\n        <span style={{ fontWeight: 'bolder', fontSize: '20px', fontVariant: 'small-caps' }}>\n          Puzzler\n        </span>\n      </Menu.Item>\n      {page === HOME_PAGE ? (\n        <Menu.Item>\n          <Button.Group>\n            <Popup\n              content=\"Reset Filters\"\n              trigger={\n                <Button\n                  icon\n                  onClick={() => {\n                    dispatch(pressReset());\n                  }}\n                >\n                  <Icon name=\"undo\" />\n                </Button>\n              }\n            />\n          </Button.Group>\n        </Menu.Item>\n      ) : null}\n      {page === GAME_PAGE ? (\n        <React.Fragment>\n          <Menu.Item>\n            <Button.Group>\n              <Popup\n                content=\"Run Tests (ctrl-m)\"\n                trigger={\n                  <Button\n                    icon\n                    onClick={() => {\n                      if (!isBusyTesting && !revealButtonPressed) {\n                        dispatch(clickRun(id));\n                      }\n                    }}\n                    disabled={isBusyTesting || revealButtonPressed}\n                  >\n                    <Icon name=\"rocket\" className={isBusyTesting ? 'animate-icon' : ''} />\n                  </Button>\n                }\n              />\n\n              <Popup\n                content=\"Proceed to Next Problem\"\n                trigger={\n                  <Button\n                    icon\n                    onClick={() => {\n                      if (showNextButton) {\n                        if (hasNext) {\n                          const nextId = selections[0];\n                          dispatch(clickNext(id));\n                          dispatch(shiftSelection());\n                          history.push(`/${nextId}`);\n                        } else {\n                          dispatch(clickNextToResults(id));\n                          history.push(`/sessionStats`);\n                        }\n                      }\n                    }}\n                    disabled={!showNextButton}\n                  >\n                    <Icon name=\"step forward\" />\n                  </Button>\n                }\n              />\n            </Button.Group>\n          </Menu.Item>\n\n          <Menu.Item>\n            <span\n              style={{\n                color: colorCodeTime(totalSeconds, data, revealButtonPressed, passedAllTests),\n              }}\n            >\n              {convertToTimer(totalSeconds)}\n            </span>\n            {contextMessage(revealButtonPressed, passedAllTests)}\n          </Menu.Item>\n\n          {!hasNext ? (\n            <Menu.Item>\n              <span\n                style={{\n                  fontWeight: 'bold',\n                  color: 'orange',\n                }}\n              >\n                Last Problem\n              </span>\n            </Menu.Item>\n          ) : null}\n\n          <Menu.Item>\n            <Button.Group>\n              <Popup\n                content=\"Reveal Solution\"\n                trigger={\n                  <Button\n                    icon\n                    onClick={() => {\n                      if (!revealButtonPressed && !passedAllTests) {\n                        dispatch(revealAnswer({ id, data }));\n                      }\n                    }}\n                    disabled={revealButtonPressed || passedAllTests}\n                  >\n                    <Icon name=\"eye\" />\n                  </Button>\n                }\n              />\n            </Button.Group>\n          </Menu.Item>\n\n          <Menu.Item>\n            <Button.Group>\n              <Popup\n                content=\"Skip this Problem\"\n                trigger={\n                  <Button\n                    icon\n                    onClick={() => {\n                      if (!passedAllTests) {\n                        if (hasNext) {\n                          const nextId = selections[0];\n                          dispatch(clickSkip(id));\n                          dispatch(shiftSelection());\n                          history.push(`/${nextId}`);\n                        } else {\n                          dispatch(clickSkipToResults(id));\n                          history.push(`/sessionStats`);\n                        }\n                      }\n                    }}\n                    disabled={passedAllTests}\n                  >\n                    <Icon name=\"fast forward\" />\n                  </Button>\n                }\n              />\n            </Button.Group>\n          </Menu.Item>\n        </React.Fragment>\n      ) : null}\n\n      <Menu.Item position=\"right\">\n        {page !== SESSION_STATS_PAGE ? (\n          <Popup\n            content=\"See Session Stats\"\n            trigger={\n              <Button\n                icon\n                style={{ marginRight: '10px' }}\n                onClick={() => {\n                  // if not on homepage\n                  if (id) {\n                    dispatch(clickSkipToResults(id));\n                  }\n                  history.push('/sessionStats');\n                }}\n              >\n                <Icon name=\"file alternate outline\" />\n              </Button>\n            }\n          />\n        ) : null}\n\n        {page !== HISTORIC_STATS_PAGE ? (\n          <Popup\n            content=\"See Historic Stats\"\n            trigger={\n              <Button\n                icon\n                onClick={() => {\n                  // if not on homepage\n                  if (id) {\n                    dispatch(clickSkipToResults(id));\n                  }\n                  history.push('/historicStats');\n                }}\n              >\n                <Icon name=\"history\" />\n              </Button>\n            }\n          />\n        ) : null}\n      </Menu.Item>\n    </Menu>\n  );\n}\n\nfunction contextMessage(revealButtonPressed, passedAllTests) {\n  if (passedAllTests) {\n    return <span style={{ color: 'green', fontWeight: 'bold' }}>- PASSED!</span>;\n  } else if (revealButtonPressed) {\n    return <span style={{ color: 'red' }}>- Stopped</span>;\n  } else {\n    return null;\n  }\n}\n\nexport default MainMenu;\n","import * as React from 'react';\nimport { Card, Table, Icon, Button, Divider } from 'semantic-ui-react';\nimport { inventory } from '../data/inventory';\nimport { useDispatch, useSelector } from 'react-redux';\nimport showdown from 'showdown';\nimport { setSelections, setActiveProblemText, setShowModal } from '../redux/filterStore';\n\nconst converter = new showdown.Converter();\n\nfunction ResultsCard() {\n  const dispatch = useDispatch();\n  const selections = useSelector(state => state.filter.selections);\n  const results = useSelector(state => state.filter.results);\n\n  const addProblemId = problemID => {\n    dispatch(setSelections([...selections, problemID]));\n  };\n\n  const subtractProblemId = problemID => {\n    dispatch(setSelections(selections.filter(d => d !== problemID)));\n  };\n\n  const showModalMarkdown = problemText => {\n    dispatch(setActiveProblemText(problemText));\n    dispatch(setShowModal(true));\n  };\n\n  // results which don't include selected problems\n  const filteredResults = results.filter(d => {\n    return !selections.includes(d);\n  });\n\n  const addRandom = () => {\n    const random = filteredResults[Math.floor(Math.random() * filteredResults.length)];\n    addProblemId(random);\n  };\n\n  return (\n    <Card style={{ width: '100%', height: '100%' }}>\n      <Card.Content header=\"Filter Results\" />\n      <Divider style={{ padding: '0', margin: '0' }} />\n      <div style={{ overflowY: 'scroll' }}>\n        <div style={{ padding: '1em', height: '63px' }}>\n          <div style={{ display: 'inline', height: '36px', lineHeight: '36px', float: 'left' }}>\n            Found {filteredResults.length} results.\n          </div>\n          <Button\n            onClick={() => addRandom()}\n            disabled={Boolean(!filteredResults.length)}\n            icon\n            labelPosition=\"right\"\n            style={{ display: 'inline', float: 'right' }}\n          >\n            Add Random\n            <Icon name=\"right arrow\" />\n          </Button>\n        </div>\n        <div style={{ padding: '0 1em 1em 1em', clear: 'both' }}>\n          <Table celled compact=\"very\">\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell>Name</Table.HeaderCell>\n                <Table.HeaderCell style={{ textAlign: 'center' }}>Difficulty</Table.HeaderCell>\n                <Table.HeaderCell style={{ textAlign: 'center' }}>Effort</Table.HeaderCell>\n                <Table.HeaderCell style={{ textAlign: 'center' }}>Category</Table.HeaderCell>\n                <Table.HeaderCell style={{ textAlign: 'center' }}>Action</Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n\n            {}\n            <Table.Body>\n              {filteredResults.length ? (\n                filteredResults.map(id => {\n                  const problem = inventory[id];\n                  const inProblemSet = selections.includes(problem.problemID);\n                  return (\n                    <Table.Row\n                      key={problem.problemID}\n                      className={inProblemSet ? 'existing-selection' : ''}\n                    >\n                      <Table.Cell>\n                        <div\n                          style={{ display: 'inline' }}\n                          className=\"hover-link\"\n                          onClick={() => showModalMarkdown(problem.problemText)}\n                          dangerouslySetInnerHTML={{\n                            __html: converter.makeHtml(\n                              `**${problem.problemID}**:  ` + problem.problemName,\n                            ),\n                          }}\n                        ></div>\n                      </Table.Cell>\n                      <Table.Cell style={{ textAlign: 'center' }}>\n                        <span\n                          style={{\n                            backgroundColor: 'azure',\n                            color: 'black',\n                            display: 'inline-block',\n                            border: '1px solid darkslategrey',\n                            borderRadius: '50%',\n                            width: '1.5em',\n                            height: '1.5em',\n                            lineHeight: '1.25em',\n                            verticalAlign: 'center',\n                            boxShadow: '1px 1px 2px lightslategrey',\n                            cursor: 'default',\n                          }}\n                          title={problem.difficulty}\n                        >\n                          {problem.difficulty.slice(0, 1)}\n                        </span>\n                      </Table.Cell>\n                      <Table.Cell style={{ textAlign: 'center' }}>{problem.effort}</Table.Cell>\n                      <Table.Cell style={{ textAlign: 'center' }}>{problem.category}</Table.Cell>\n                      <Table.Cell style={{ textAlign: 'center' }}>\n                        {inProblemSet ? (\n                          <Button icon onClick={() => subtractProblemId(problem.problemID)}>\n                            <Icon className=\"hover-circle-off\" name=\"minus\" />\n                          </Button>\n                        ) : (\n                          <Button icon onClick={() => addProblemId(problem.problemID)}>\n                            <Icon className=\"hover-circle-on\" name=\"add\" />\n                          </Button>\n                        )}\n                      </Table.Cell>\n                    </Table.Row>\n                  );\n                })\n              ) : (\n                <Table.Row key={0}>\n                  <Table.Cell colSpan=\"4\">No Results</Table.Cell>\n                </Table.Row>\n              )}\n            </Table.Body>\n          </Table>\n        </div>\n      </div>\n    </Card>\n  );\n}\n\nexport default ResultsCard;\n","import * as React from 'react';\nimport { Card, Table, Button, Icon, Divider } from 'semantic-ui-react';\nimport { inventory } from '../data/inventory';\nimport { useDispatch, useSelector } from 'react-redux';\nimport showdown from 'showdown';\nimport { useHistory, useParams } from 'react-router-dom';\nimport {\n  setSelections,\n  setActiveProblemText,\n  setShowModal,\n  shiftSelection,\n} from '../redux/filterStore';\nimport { clickNext } from '../redux/gameStore';\n\nconst converter = new showdown.Converter();\n\nfunction SelectionsCard() {\n  const history = useHistory();\n  const { id } = useParams();\n  const dispatch = useDispatch();\n  const selections = useSelector(state => state.filter.selections);\n\n  const clearAll = () => {\n    dispatch(setSelections([]));\n  };\n\n  const clickStart = () => {\n    const nextId = selections[0];\n    dispatch(clickNext(id));\n    dispatch(shiftSelection());\n    history.push(`/${nextId}`);\n  };\n\n  const subtractProblemId = problemID => {\n    dispatch(setSelections(selections.filter(d => d !== problemID)));\n  };\n\n  const showModalMarkdown = problemText => {\n    dispatch(setActiveProblemText(problemText));\n    dispatch(setShowModal(true));\n  };\n\n  return (\n    <Card style={{ width: '100%', height: '100%' }}>\n      <Card.Content header=\"Selections\" />\n      <Divider style={{ padding: '0', margin: '0' }} />\n      <div style={{ overflowY: 'scroll' }}>\n        <div style={{ padding: '1em', height: '63px' }}>\n          <Button\n            disabled={Boolean(!selections.length)}\n            style={{ float: 'left' }}\n            onClick={clearAll}\n          >\n            Clear All\n          </Button>\n          <Button\n            style={{ float: 'right' }}\n            onClick={clickStart}\n            disabled={Boolean(!selections.length)}\n            primary={true}\n          >\n            START\n          </Button>\n        </div>\n        <Divider style={{ padding: '0', margin: '0' }} />\n        <div style={{ padding: '1em 1em 0 1em' }}>{selections.length} Problem(s) Selected.</div>\n\n        <div style={{ padding: '1em' }}>\n          <Table celled compact=\"very\">\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell>Name</Table.HeaderCell>\n                <Table.HeaderCell style={{ textAlign: 'center' }}>Difficulty</Table.HeaderCell>\n                <Table.HeaderCell style={{ textAlign: 'center' }}>Effort</Table.HeaderCell>\n                <Table.HeaderCell style={{ textAlign: 'center' }}>Category</Table.HeaderCell>\n                <Table.HeaderCell style={{ textAlign: 'center' }}>Action</Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {selections.length ? (\n                selections.map(id => {\n                  const problem = inventory[id];\n                  return (\n                    <Table.Row key={problem.problemID}>\n                      <Table.Cell>\n                        <div\n                          style={{ display: 'inline' }}\n                          className=\"hover-link\"\n                          onClick={() => showModalMarkdown(problem.problemText)}\n                          dangerouslySetInnerHTML={{\n                            __html: converter.makeHtml(\n                              `**${problem.problemID}**:  ` + problem.problemName,\n                            ),\n                          }}\n                        ></div>\n                      </Table.Cell>\n                      <Table.Cell style={{ textAlign: 'center' }}>\n                        <span\n                          style={{\n                            backgroundColor: 'azure',\n                            color: 'black',\n                            display: 'inline-block',\n                            border: '1px solid darkslategrey',\n                            borderRadius: '50%',\n                            width: '1.5em',\n                            height: '1.5em',\n                            lineHeight: '1.25em',\n                            verticalAlign: 'center',\n                            boxShadow: '1px 1px 2px lightslategrey',\n                            cursor: 'default',\n                          }}\n                          title={problem.difficulty}\n                        >\n                          {problem.difficulty.slice(0, 1)}\n                        </span>\n                      </Table.Cell>\n                      <Table.Cell style={{ textAlign: 'center' }}>{problem.effort}</Table.Cell>\n                      <Table.Cell style={{ textAlign: 'center' }}>{problem.category}</Table.Cell>\n                      <Table.Cell style={{ textAlign: 'center' }}>\n                        <Button icon onClick={() => subtractProblemId(problem.problemID)}>\n                          <Icon className=\"hover-circle-off\" name=\"minus\" />\n                        </Button>\n                      </Table.Cell>\n                    </Table.Row>\n                  );\n                })\n              ) : (\n                <Table.Row key={0}>\n                  <Table.Cell colSpan=\"4\">No Selections</Table.Cell>\n                </Table.Row>\n              )}\n            </Table.Body>\n          </Table>\n        </div>\n      </div>\n    </Card>\n  );\n}\n\nexport default SelectionsCard;\n","import * as React from 'react';\nimport { Card, Checkbox, Button, Popup, Divider } from 'semantic-ui-react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setCategories } from '../redux/filterStore';\n\nexport default function CategoryCard() {\n  const dispatch = useDispatch();\n  const categories = useSelector(state => state.filter.categories);\n\n  const updateCheckbox = name => {\n    const updatedCategories = categories.map(item => {\n      if (item.name === name) {\n        return { name: item.name, isSelected: !item.isSelected };\n      }\n      return item;\n    });\n    dispatch(setCategories(updatedCategories));\n  };\n\n  const selectAll = () => {\n    dispatch(\n      setCategories(\n        categories.map(d => {\n          return { name: d.name, isSelected: true };\n        }),\n      ),\n    );\n  };\n\n  const clearAll = () => {\n    dispatch(\n      setCategories(\n        categories.map(d => {\n          return { name: d.name, isSelected: false };\n        }),\n      ),\n    );\n  };\n\n  const allAreSelected = categories.every(d => d.isSelected === true);\n  const noneAreSelected = categories.every(d => d.isSelected === false);\n\n  return (\n    <Card style={{ width: '100%', height: '100%' }}>\n      <Card.Content header=\"Categories\" />\n      <Divider style={{ padding: '0', margin: '0' }} />\n      <div style={{ width: '100%', height: '100%', overflowY: 'scroll' }}>\n        <div style={{ padding: '1em' }}>\n          <Popup\n            content=\"Select All\"\n            trigger={<Button icon=\"add\" disabled={allAreSelected} onClick={selectAll} />}\n          />\n          <Popup\n            content=\"Clear All\"\n            trigger={<Button icon=\"remove\" disabled={noneAreSelected} onClick={clearAll} />}\n          />\n        </div>\n        <Divider style={{ padding: '0', margin: '0' }} />\n        <div style={{ padding: '1em' }}>\n          {categories.map(item => {\n            return (\n              <Checkbox\n                style={{ display: 'block', padding: '5px 5px' }}\n                key={item.name}\n                label={item.name}\n                onChange={() => {\n                  updateCheckbox(item.name);\n                }}\n                checked={item.isSelected}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </Card>\n  );\n}\n","import * as React from 'react';\nimport { Card, Checkbox } from 'semantic-ui-react';\nimport SliderView from 'semantic-ui-react-slider';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { MIN_EFFORT, MAX_EFFORT } from '../data/inventory';\nimport {\n  setDsChecked,\n  setAlgChecked,\n  setEffortSlider,\n  setBegChecked,\n  setIntChecked,\n  setAdvChecked,\n  setExpChecked,\n} from '../redux/filterStore';\n\nfunction ControlCard() {\n  const dispatch = useDispatch();\n  const dsChecked = useSelector(state => state.filter.dsChecked);\n  const algChecked = useSelector(state => state.filter.algChecked);\n  const minEffort = useSelector(state => state.filter.minEffort);\n  const maxEffort = useSelector(state => state.filter.maxEffort);\n  const begChecked = useSelector(state => state.filter.begChecked);\n  const intChecked = useSelector(state => state.filter.intChecked);\n  const advChecked = useSelector(state => state.filter.advChecked);\n  const expChecked = useSelector(state => state.filter.expChecked);\n\n  const onEffortSliderChange = (minValue, maxValue) => {\n    dispatch(setEffortSlider([minValue, maxValue]));\n  };\n\n  return (\n    <Card style={{ width: '100%', height: '100%', overflowY: 'scroll' }}>\n      <Card.Content header=\"Options\" />\n      <Card.Content style={{ width: '100%', height: '100%', padding: '1em 2em .5em 2em' }}>\n        <div style={{ display: 'block', width: '100%', height: '50%' }}>\n          <div style={{ display: 'block', width: '50%', float: 'left' }}>\n            <Checkbox\n              style={{ display: 'block', padding: '5px 0' }}\n              label=\"Beginner\"\n              onChange={() => {\n                dispatch(setBegChecked(!begChecked));\n              }}\n              checked={begChecked}\n            />\n\n            <Checkbox\n              style={{ display: 'block', padding: '5px 0' }}\n              label=\"Intermediate\"\n              onChange={() => {\n                dispatch(setIntChecked(!intChecked));\n              }}\n              checked={intChecked}\n            />\n\n            <Checkbox\n              style={{ display: 'block', padding: '5px 0' }}\n              label=\"Advanced\"\n              onChange={() => {\n                dispatch(setAdvChecked(!advChecked));\n              }}\n              checked={advChecked}\n            />\n\n            <Checkbox\n              style={{ display: 'block', padding: '5px 0' }}\n              label=\"Expert\"\n              onChange={() => {\n                dispatch(setExpChecked(!expChecked));\n              }}\n              checked={expChecked}\n            />\n          </div>\n          <div style={{ display: 'block', width: '50%', float: 'right' }}>\n            <Checkbox\n              style={{ display: 'block', padding: '5px 0' }}\n              label=\"Data Structures\"\n              onChange={() => {\n                dispatch(setDsChecked(!dsChecked));\n              }}\n              checked={dsChecked}\n            />\n\n            <Checkbox\n              style={{ display: 'block', padding: '5px 0' }}\n              label=\"Algorithms\"\n              onChange={() => {\n                dispatch(setAlgChecked(!algChecked));\n              }}\n              checked={algChecked}\n            />\n          </div>\n        </div>\n        <div style={{ display: 'block', width: '100%', height: '50%' }}>\n          <p style={{ fontWeight: 'bold', width: '100%', textAlign: 'center' }}>\n            Estimated Effort (lines)\n          </p>\n          <SliderView\n            className=\"slider-view\"\n            selectedMinValue={minEffort}\n            selectedMaxValue={maxEffort}\n            onSliderValuesChange={onEffortSliderChange}\n            sliderMinValue={MIN_EFFORT}\n            sliderMaxValue={MAX_EFFORT}\n          />\n        </div>\n      </Card.Content>\n    </Card>\n  );\n}\n\nexport default ControlCard;\n","import * as React from 'react';\nimport { Card } from 'semantic-ui-react';\nimport CategoryCard from './CategoryCard';\nimport ControlCard from './ControlCard';\nimport { inventory } from '../data/inventory';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { BEGINNER, INTERMEDIATE, ADVANCED, EXPERT } from '../data/constants.js';\nimport { setResults } from '../redux/filterStore';\n\nfunction Filters() {\n  const dispatch = useDispatch();\n  const categories = useSelector(state => state.filter.categories);\n  const dsChecked = useSelector(state => state.filter.dsChecked);\n  const algChecked = useSelector(state => state.filter.algChecked);\n  const minEffort = useSelector(state => state.filter.minEffort);\n  const maxEffort = useSelector(state => state.filter.maxEffort);\n  const begChecked = useSelector(state => state.filter.begChecked);\n  const intChecked = useSelector(state => state.filter.intChecked);\n  const advChecked = useSelector(state => state.filter.advChecked);\n  const expChecked = useSelector(state => state.filter.expChecked);\n\n  const runFilters = React.useCallback(() => {\n    const chosenCategories = categories.filter(d => d.isSelected).map(d => d.name);\n\n    const filtered = Object.keys(inventory)\n      .map(d => Number(d))\n      .filter(key => {\n        const item = inventory[String(key)];\n        // check vs categories\n        if (!chosenCategories.includes(item.category)) {\n          return false;\n        }\n        // check vs Beginner Intermediate Advanced\n        if (item.difficulty === BEGINNER && !begChecked) {\n          return false;\n        }\n        if (item.difficulty === INTERMEDIATE && !intChecked) {\n          return false;\n        }\n        if (item.difficulty === ADVANCED && !advChecked) {\n          return false;\n        }\n        if (item.difficulty === EXPERT && !expChecked) {\n          return false;\n        }\n        // check vs effort\n        if (item.effort < minEffort || item.effort > maxEffort) {\n          return false;\n        }\n        // check vs DataStructure vs Algorithm\n        if (item.type === 'data-structure' && !dsChecked) {\n          return false;\n        }\n        if (item.type === 'algorithm' && !algChecked) {\n          return false;\n        }\n        return true;\n      });\n    dispatch(setResults(filtered));\n  }, [\n    algChecked,\n    categories,\n    dsChecked,\n    maxEffort,\n    minEffort,\n    begChecked,\n    intChecked,\n    advChecked,\n    expChecked,\n    dispatch,\n  ]);\n\n  React.useEffect(() => {\n    runFilters();\n  }, [runFilters]);\n\n  return (\n    <div\n      style={{\n        width: '100%',\n        height: '100%',\n        overflowY: 'hidden',\n        overflowX: 'hidden',\n      }}\n    >\n      <Card.Content>\n        <div\n          style={{\n            position: 'absolute',\n            top: '0',\n            left: '0',\n            height: 'calc(47vh - 40px)',\n            width: '18vw',\n          }}\n        >\n          <CategoryCard categories={categories} />\n        </div>\n        <div\n          style={{\n            position: 'absolute',\n            top: '0',\n            left: '19vw',\n            height: 'calc(47vh - 40px)',\n            width: '36vw',\n          }}\n        >\n          <ControlCard />\n        </div>\n      </Card.Content>\n    </div>\n  );\n}\n\nexport default Filters;\n","import * as React from 'react';\nimport ResultsCard from './ResultsCard.js';\nimport SelectionsCard from './SelectionsCard.js';\nimport Filters from './Filters.js';\n\nexport default function HomePage() {\n  return (\n    <React.Fragment>\n      <div\n        style={{\n          position: 'absolute',\n          top: 'calc(40px + 3vh)',\n          left: '2vw',\n          height: 'calc(48vh - 40px)',\n          width: '55vw',\n        }}\n      >\n        <Filters />\n      </div>\n\n      <div\n        style={{\n          position: 'absolute',\n          top: 'calc(40px + 3vh)',\n          left: '58vw',\n          height: 'calc(94vh - 40px)',\n          width: '40vw',\n        }}\n      >\n        <SelectionsCard />\n      </div>\n      <div\n        style={{\n          position: 'absolute',\n          top: '52vh',\n          left: '2vw',\n          height: '45vh',\n          width: '55vw',\n        }}\n      >\n        <ResultsCard />\n      </div>\n    </React.Fragment>\n  );\n}\n","import * as React from 'react';\nimport showdown from 'showdown';\nimport { Modal, Button } from 'semantic-ui-react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setShowModal } from './redux/filterStore';\n\nconst converter = new showdown.Converter();\n\nfunction ProblemTextModal() {\n  const dispatch = useDispatch();\n  const showModal = useSelector(state => state.filter.showModal);\n  const activeProblemText = useSelector(state => state.filter.activeProblemText);\n\n  return (\n    <Modal\n      onClose={() => dispatch(setShowModal(false))}\n      onOpen={() => dispatch(setShowModal(true))}\n      open={showModal}\n    >\n      <Modal.Header>Problem Text</Modal.Header>\n      <Modal.Content>\n        <div dangerouslySetInnerHTML={{ __html: converter.makeHtml(activeProblemText) }}></div>\n      </Modal.Content>\n      <Modal.Actions>\n        <Button style={{ width: '138px' }} onClick={() => dispatch(setShowModal(false))}>\n          Close\n        </Button>\n      </Modal.Actions>\n    </Modal>\n  );\n}\n\nexport default ProblemTextModal;\n","import * as React from 'react';\nimport Problem from './Game/Problem.js';\nimport SessionStats from './SessionStats.js';\nimport HistoricStats from './HistoricStats.js';\nimport { Switch, Route } from 'react-router-dom';\nimport MainMenu from './MainMenu.js';\nimport HomePage from './Home/HomePage.js';\nimport { incrementTotalSeconds } from './redux/gameStore';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ProblemTextModal from './ProblemTextModal';\nimport { HOME_PAGE, SESSION_STATS_PAGE, HISTORIC_STATS_PAGE, GAME_PAGE } from './util.js';\n\nlet interval = null;\n\nfunction App() {\n  const dispatch = useDispatch();\n  const isRunning = useSelector(state => state.game.isRunning);\n\n  // timer implementation\n  React.useEffect(() => {\n    if (isRunning) {\n      interval = window.setInterval(() => {\n        dispatch(incrementTotalSeconds());\n      }, 1000);\n    } else if (interval) {\n      window.clearInterval(interval);\n    }\n  }, [isRunning, dispatch]);\n\n  return (\n    <React.Fragment>\n      <ProblemTextModal />\n      <Switch>\n        <Route exact path={HOME_PAGE}>\n          <MainMenu page={HOME_PAGE} />\n          <HomePage />\n        </Route>\n        <Route exact path={SESSION_STATS_PAGE}>\n          <MainMenu page={SESSION_STATS_PAGE} />\n          <SessionStats />\n        </Route>\n        <Route exact path={HISTORIC_STATS_PAGE}>\n          <MainMenu page={HISTORIC_STATS_PAGE} />\n          <HistoricStats />\n        </Route>\n        <Route exact path={GAME_PAGE}>\n          <MainMenu page={GAME_PAGE} />\n          <Problem />\n        </Route>\n      </Switch>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'ace-builds';\nimport 'ace-builds/src-noconflict/mode-javascript';\nimport 'ace-builds/src-noconflict/theme-dawn';\nimport 'ace-builds/src-noconflict/theme-github';\nimport 'ace-builds/src-noconflict/ext-language_tools';\nimport 'ace-builds/webpack-resolver';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport storageSession from 'redux-persist/lib/storage/session';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport { combineReducers } from 'redux';\nimport { gameReducer } from './redux/gameStore';\nimport { filterReducer } from './redux/filterStore';\n\nconst reducer = combineReducers({\n  game: gameReducer,\n  filter: filterReducer,\n});\n\nconst persistConfig = {\n  key: 'root',\n  version: 1,\n  storage: storageSession,\n};\n\nconst persistedReducer = persistReducer(persistConfig, reducer);\n\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n});\n\nlet persistor = persistStore(store);\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}