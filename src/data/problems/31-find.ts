import { HEAP, DATA_STRUCTURE } from '../constants';

const solution = [
  { stage: 0, text: 'class MinHeap {' },
  { stage: 0, text: '  constructor() {' },
  { stage: 0, text: '    this.heapContainer = [];' },
  { stage: 0, text: '  }' },
  { stage: 0, text: '' },
  { stage: 1, text: '  find(item) {' },
  { stage: 2, text: '    const foundItemIndices = [];' },
  {
    stage: 3,
    text: '    for (let itemIndex = 0; itemIndex < this.heapContainer.length; itemIndex += 1) {',
  },
  { stage: 4, text: '      if (item === this.heapContainer[itemIndex]) {' },
  { stage: 4, text: '        foundItemIndices.push(itemIndex);' },
  { stage: 4, text: '      }' },
  { stage: 3, text: '    }' },
  { stage: 2, text: '    return foundItemIndices;' },
  { stage: 1, text: '  }' },
  { stage: 0, text: '' },
  { stage: 0, text: '}' },
  { stage: 0, text: '' },
];

export const data = {
  problemID: 31,
  problemName: `Implement the **find** method for a *MinHeap* class.`,
  problemText: `Implement a **find** method for a *MinHeap* that accepts a parameter \`item\` and returns an array of indices where matching items are found in the *MinHeap*.`,
  testCases: [
    {
      id: 1,
      name: 'compiles',
      inherit: [],
      code: `const minheap=new MinHeap();`,
      evaluate: `Boolean(minheap);`,
      expected: true,
    },
    {
      id: 2,
      name: 'empty heap',
      inherit: [1],
      code: ``,
      evaluate: `minheap.find(5);`,
      expected: JSON.stringify([]),
    },
    {
      id: 3,
      name: 'one item heap, no match',
      inherit: [1],
      code: `minheap.heapContainer = [4];`,
      evaluate: `minheap.find(5);`,
      expected: JSON.stringify([]),
    },
    {
      id: 4,
      name: 'one item heap, match',
      inherit: [1],
      code: `minheap.heapContainer = [4];`,
      evaluate: `minheap.find(4);`,
      expected: JSON.stringify([0]),
    },
    {
      id: 5,
      name: 'multi-item heap, no match',
      inherit: [1],
      code: `minheap.heapContainer = [4,6,8,10,12];`,
      evaluate: `minheap.find(7);`,
      expected: JSON.stringify([]),
    },
    {
      id: 6,
      name: 'multi-item heap, one match',
      inherit: [1],
      code: `minheap.heapContainer = [4,6,8,10,12];`,
      evaluate: `minheap.find(8);`,
      expected: JSON.stringify([2]),
    },
    {
      id: 7,
      name: 'multi-item heap, multiple matches',
      inherit: [1],
      code: `minheap.heapContainer = [4,6,8,8,8,10,12];`,
      evaluate: `minheap.find(8);`,
      expected: JSON.stringify([2, 3, 4]),
    },
  ],
  setupCode: ``,
  source: [],
  tags: [HEAP, DATA_STRUCTURE],
  solution,
};
