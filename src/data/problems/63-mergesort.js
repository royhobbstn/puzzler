import { SORTING, ALGORITHM, ADVANCED } from '../constants.js';

const solution = [
  { stage: 0, text: '' },
  { stage: 0, text: 'function mergeSort(array) {' },
  { stage: 1, text: '  if (array.length <= 1) {' },
  { stage: 1, text: '    return array;' },
  { stage: 1, text: '  }' },
  { stage: 0, text: '' },
  { stage: 2, text: '  const midpoint = Math.floor(array.length / 2);' },
  { stage: 2, text: '  const leftArray = array.slice(0, midpoint);' },
  { stage: 2, text: '  const rightArray = array.slice(midpoint);' },
  { stage: 0, text: '' },
  { stage: 3, text: '  return merge(mergeSort(leftArray), mergeSort(rightArray));' },
  { stage: 0, text: '}' },
  { stage: 0, text: '' },
  { stage: 4, text: 'function merge(leftArr, rightArr) {' },
  { stage: 5, text: '  const results = [];' },
  { stage: 5, text: '  let leftIndex = 0;' },
  { stage: 5, text: '  let rightIndex = 0;' },
  { stage: 0, text: '' },
  { stage: 6, text: '  while (leftIndex < leftArr.length && rightIndex < rightArr.length) {' },
  { stage: 7, text: '    if (leftArr[leftIndex] < rightArr[rightIndex]) {' },
  { stage: 8, text: '      results.push(leftArr[leftIndex]);' },
  { stage: 8, text: '      leftIndex = leftIndex + 1;' },
  { stage: 7, text: '    } else {' },
  { stage: 9, text: '      results.push(rightArr[rightIndex]);' },
  { stage: 9, text: '      rightIndex = rightIndex + 1;' },
  { stage: 7, text: '    }' },
  { stage: 6, text: '  }' },
  { stage: 0, text: '' },
  { stage: 10, text: '  const leftRemains = leftArr.slice(leftIndex);' },
  { stage: 10, text: '  const rightRemains = rightArr.slice(rightIndex);' },
  { stage: 0, text: '' },
  { stage: 11, text: '  return results.concat(leftRemains).concat(rightRemains);' },
  { stage: 4, text: '}' },
  { stage: 0, text: '' },
];

export const data = {
  problemID: 63,
  problemName: 'Implement the mergesort algorithm.',
  problemText: `Implement a function **mergeSort** which takes an array of unsorted integers, sorts them in place using the Mergesort algorithm and returns the array.`,
  testCases: [
    {
      id: 1,
      name: 'case 1',
      inherit: [],
      code: `const arr = [];`,
      evaluate: `mergeSort(arr);`,
      expected: JSON.stringify([]),
    },
    {
      id: 2,
      name: 'case 2',
      inherit: [],
      code: `const arr = [5, 8, 1, 9, 3, 8, 2, 0, 2, 34, 2, 456, 342, 26, 75, 23];`,
      evaluate: `mergeSort(arr);`,
      expected: JSON.stringify([0, 1, 2, 2, 2, 3, 5, 8, 8, 9, 23, 26, 34, 75, 342, 456]),
    },
    {
      id: 3,
      name: 'case 3',
      inherit: [],
      code: `const arr = [75, 98, 19, 99, 34, 48, 42, 40, 12, 134, 21, 1456, 3421, 1126, 1175, 2311];`,
      evaluate: `mergeSort(arr);`,
      expected: JSON.stringify([
        12,
        19,
        21,
        34,
        40,
        42,
        48,
        75,
        98,
        99,
        134,
        1126,
        1175,
        1456,
        2311,
        3421,
      ]),
    },
  ],
  setupCode: '',
  tags: [ADVANCED, SORTING, ALGORITHM],
  solution,
};
