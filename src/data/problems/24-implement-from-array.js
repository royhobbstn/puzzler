import { STACK, DATA_STRUCTURE, BEGINNER } from '../constants.js';

const solution = [
  { stage: 0, text: 'class Stack {' },
  { stage: 1, text: '  constructor() {' },
  { stage: 1, text: '    this.items = [];' },
  { stage: 1, text: '  }' },
  { stage: 0, text: '' },
  { stage: 2, text: '  isEmpty() {' },
  { stage: 4, text: '    return !this.items.length;' },
  { stage: 2, text: '  }' },
  { stage: 0, text: '' },
  { stage: 2, text: '  peek() {' },
  { stage: 4, text: '    if (this.isEmpty()) {' },
  { stage: 4, text: '      return null;' },
  { stage: 4, text: '    }' },
  { stage: 5, text: '    return this.items[this.items.length - 1];' },
  { stage: 2, text: '  }' },
  { stage: 0, text: '' },
  { stage: 3, text: '  push(value) {' },
  { stage: 5, text: '    this.items.push(value);' },
  { stage: 3, text: '  }' },
  { stage: 0, text: '' },
  { stage: 3, text: '  pop() {' },
  { stage: 6, text: '    if (this.isEmpty()) {' },
  { stage: 6, text: '      return null;' },
  { stage: 6, text: '    }' },
  { stage: 6, text: '    return this.items.pop();' },
  { stage: 3, text: '  }' },
  { stage: 0, text: '' },
  { stage: 0, text: '}' },
  { stage: 0, text: '' },
];

export const data = {
  problemID: 24,
  problemName: 'Implement a *Stack* using an *Array*',
  problemText:
    'Given a *Stack* class, implement the following methods: **isEmpty** (which returns a boolean indicating if there are any values in the stack), **peek** (which returns - but does not remove - the value at the top of the stack), **push** (which adds a value to the top of the stack - does not return anything), and **pop** (which removes and returns the value at the top of the stack).  Base the implementation on an *Array* data structure.  Return `null` for **peek** and **pop** if the stack is empty.',
  testCases: [
    {
      id: 1,
      name: 'compiles',
      inherit: [],
      code: `const stack=new Stack();`,
      evaluate: `Boolean(stack);`,
      expected: true,
    },
    {
      id: 2,
      name: 'peek on empty stack is null',
      inherit: [1],
      code: ``,
      evaluate: `stack.peek();`,
      expected: null,
    },
    {
      id: 3,
      name: 'pop on empty stack is null',
      inherit: [1],
      code: ``,
      evaluate: `stack.pop();`,
      expected: null,
    },
    {
      id: 4,
      name: 'isEmpty on empty stack is true',
      inherit: [1],
      code: ``,
      evaluate: `stack.isEmpty();`,
      expected: true,
    },
    {
      id: 5,
      name: 'isEmpty on stack with an item is false',
      inherit: [1],
      code: `stack.push(5);`,
      evaluate: `stack.isEmpty();`,
      expected: false,
    },
    {
      id: 6,
      name: 'peek on stack with an item returns that value',
      inherit: [1, 5],
      code: ``,
      evaluate: `stack.peek();`,
      expected: 5,
    },
    {
      id: 7,
      name: 'peek on stack with two items returns correct value',
      inherit: [1, 5],
      code: `stack.push(9);`,
      evaluate: `stack.peek();`,
      expected: 9,
    },
    {
      id: 8,
      name: 'peek does not remove items',
      inherit: [1, 5, 7],
      code: ``,
      evaluate: `stack.peek();stack.peek();`,
      expected: 9,
    },
    {
      id: 9,
      name: 'pop removes and returns correct item in stack (1)',
      inherit: [1, 5, 7],
      code: ``,
      evaluate: `stack.pop();`,
      expected: 9,
    },
    {
      id: 10,
      name: 'pop removes and returns correct item in stack (2)',
      inherit: [1, 5, 7],
      code: ``,
      evaluate: `stack.pop();stack.pop();`,
      expected: 5,
    },
  ],
  setupCode: '',
  tags: [STACK, DATA_STRUCTURE],
  difficulty: BEGINNER,
  solution: {
    stages: [0, 30, 60, 90, 120, 150, 210],
    solutionLines: solution,
  },
};
