import { ALGORITHM, BINARY_SEARCH } from '../constants';

const solution = [
  { stage: 0, text: '' },
  { stage: 0, text: 'function find_range(arr, key) {' },
  { stage: 1, text: '  const result = [-1, -1];' },
  { stage: 2, text: '  result[0] = binary_search(arr, key, false);' },
  { stage: 3, text: '  if (result[0] !== -1) {' },
  { stage: 4, text: '    result[1] = binary_search(arr, key, true);' },
  { stage: 3, text: '  }' },
  { stage: 0, text: '' },
  { stage: 5, text: '  return result;' },
  { stage: 0, text: '}' },
  { stage: 0, text: '' },
  { stage: 6, text: 'function binary_search(arr, key, findMaxIndex) {' },
  { stage: 7, text: '  let keyIndex = -1;' },
  { stage: 7, text: '  let start = 0;' },
  { stage: 8, text: '  let end = arr.length - 1;' },
  { stage: 0, text: '' },
  { stage: 9, text: '  while (start <= end) {' },
  { stage: 10, text: '    let mid = Math.floor(start + (end - start) / 2);' },
  { stage: 11, text: '    if (key < arr[mid]) {' },
  { stage: 12, text: '      end = mid - 1;' },
  { stage: 11, text: '    } else if (key > arr[mid]) {' },
  { stage: 13, text: '      start = mid + 1;' },
  { stage: 11, text: '    } else {' },
  { stage: 14, text: '      keyIndex = mid;' },
  { stage: 15, text: '      if (findMaxIndex) {' },
  { stage: 16, text: '        start = mid + 1;' },
  { stage: 15, text: '      } else {' },
  { stage: 17, text: '        end = mid - 1;' },
  { stage: 15, text: '      }' },
  { stage: 11, text: '    }' },
  { stage: 9, text: '  }' },
  { stage: 0, text: '' },
  { stage: 18, text: '  return keyIndex;' },
  { stage: 6, text: '}' },
  { stage: 0, text: '' },
];

export const data = {
  problemID: 178,
  problemName: `Number Range`,
  problemText: `Given an array of numbers sorted in ascending order, find the range of a given number ‘key’. The range of the ‘key’ will be the first and last position of the ‘key’ in the array.

  Write a function to return the range of the ‘key’. If the ‘key’ is not present return [-1, -1].`,
  testCases: [
    {
      id: 1,
      name: 'example 1',
      inherit: [],
      code: ``,
      evaluate: `find_range([4, 6, 6, 6, 9], 6);`,
      expected: JSON.stringify([1, 3]),
    },
    {
      id: 2,
      name: 'example 2',
      inherit: [],
      code: ``,
      evaluate: `find_range([1, 3, 8, 10, 15], 10);`,
      expected: JSON.stringify([3, 3]),
    },
    {
      id: 3,
      name: 'example 3',
      inherit: [],
      code: ``,
      evaluate: `find_range([1, 3, 8, 10, 15], 12);`,
      expected: JSON.stringify([-1, -1]),
    },
  ],
  setupCode: ``,
  source: ['https://www.educative.io/courses/grokking-the-coding-interview/R1B78K9oBEz'],
  tags: [BINARY_SEARCH, ALGORITHM],
  solution,
};
