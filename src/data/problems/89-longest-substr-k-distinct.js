import { ALGORITHM, SLIDING_WINDOW } from '../constants.ts';

const solution = [
  { stage: 0, text: '' },
  { stage: 0, text: 'function longest_substring_with_k_distinct(str, k) {' },
  { stage: 1, text: '  let windowStart = 0;' },
  { stage: 1, text: '  let longestSubstring = 0;' },
  { stage: -1, text: '  // characters (key) by count (value)' },
  { stage: 1, text: '  let charFrequency = {};' },
  { stage: 1, text: '  let distinct = 0;' },
  { stage: 0, text: '' },
  { stage: 2, text: '  for (let windowEnd = 0; windowEnd < str.length; windowEnd++) {' },
  { stage: 3, text: '    const rightChar = str[windowEnd];' },
  { stage: 0, text: '' },
  { stage: -4, text: '    // check to see if rightChar is a key in charFrequency' },
  { stage: 4, text: '    if (!(rightChar in charFrequency)) {' },
  { stage: 5, text: '      charFrequency[rightChar] = 0;' },
  {
    stage: -6,
    text: '      // since it is a new character, increment count of distinct characters',
  },
  { stage: 6, text: '      distinct++;' },
  { stage: 4, text: '    }' },
  { stage: 7, text: '    charFrequency[rightChar] += 1;' },
  { stage: 0, text: '' },
  {
    stage: -8,
    text: "    // if we've exceeded distinct character limit, remove until within limit",
  },
  { stage: 8, text: '    while (distinct > k) {' },
  { stage: 9, text: '      const leftChar = str[windowStart];' },
  { stage: 9, text: '      charFrequency[leftChar] -= 1;' },
  { stage: 10, text: '      if (charFrequency[leftChar] === 0) {' },
  {
    stage: -11,
    text:
      '        // remove character entirely from frequency hashMap (since we use for ... in above to check membership)',
  },
  { stage: 11, text: '        delete charFrequency[leftChar];' },
  { stage: 11, text: '        distinct--;' },
  { stage: 10, text: '      }' },
  { stage: 0, text: '' },
  { stage: 12, text: '      windowStart++;' },
  { stage: 8, text: '    }' },
  { stage: 0, text: '' },
  {
    stage: 13,
    text: '    longestSubstring = Math.max(longestSubstring, windowEnd - windowStart + 1);',
  },
  { stage: 2, text: '  }' },
  { stage: 0, text: '' },
  { stage: 14, text: '  return longestSubstring;' },
  { stage: 0, text: '}' },
  { stage: 0, text: '' },
];

export const data = {
  problemID: 89,
  problemName: `Longest Substring K Distinct Characters`,
  problemText: `Given a string, find the length of the longest substring in it with no more than K distinct characters.`,
  testCases: [
    {
      id: 1,
      name: 'example 1',
      inherit: [],
      code: ``,
      evaluate: `longest_substring_with_k_distinct('araaci', 2);`,
      expected: 4,
    },
    {
      id: 2,
      name: 'example 2',
      inherit: [],
      code: ``,
      evaluate: `longest_substring_with_k_distinct('araaci', 1);`,
      expected: 2,
    },
    {
      id: 3,
      name: 'example 3',
      inherit: [],
      code: ``,
      evaluate: `longest_substring_with_k_distinct('cbbebi', 3);`,
      expected: 5,
    },
  ],
  setupCode: ``,
  source: ['https://www.educative.io/courses/grokking-the-coding-interview/YQQwQMWLx80'],
  tags: [SLIDING_WINDOW, ALGORITHM],
  solution,
};
