import { ALGORITHM, SLIDING_WINDOW, INTERMEDIATE } from '../constants.js';

const solution = [
  { stage: 0, text: '' },
  { stage: 0, text: 'function longest_substring_with_k_distinct(str, k) {' },
  { stage: 1, text: '  let windowStart = 0;' },
  { stage: 1, text: '  let maxLength = 0;' },
  { stage: 2, text: '  let charFrequency = {};' },
  { stage: 0, text: '' },
  { stage: 3, text: '  for (let windowEnd = 0; windowEnd < str.length; windowEnd++) {' },
  { stage: 4, text: '    const rightChar = str[windowEnd];' },
  { stage: 5, text: '    if (!(rightChar in charFrequency)) {' },
  { stage: 5, text: '      charFrequency[rightChar] = 0;' },
  { stage: 5, text: '    }' },
  { stage: 6, text: '    charFrequency[rightChar] += 1;' },
  { stage: 0, text: '' },
  { stage: 7, text: '    while (Object.keys(charFrequency).length > k) {' },
  { stage: 8, text: '      const leftChar = str[windowStart];' },
  { stage: 8, text: '      charFrequency[leftChar] -= 1;' },
  { stage: 9, text: '      if (charFrequency[leftChar] === 0) {' },
  { stage: 9, text: '        delete charFrequency[leftChar];' },
  { stage: 9, text: '      }' },
  { stage: 10, text: '      windowStart += 1;' },
  { stage: 7, text: '    }' },
  { stage: 0, text: '' },
  { stage: 11, text: '    maxLength = Math.max(maxLength, windowEnd - windowStart + 1);' },
  { stage: 3, text: '  }' },
  { stage: 0, text: '' },
  { stage: 12, text: '  return maxLength;' },
  { stage: 0, text: '}' },
  { stage: 0, text: '' },
];

export const data = {
  problemID: 89,
  problemName: `Longest Substring K Distinct Characters`,
  problemText: `Given a string, find the length of the longest substring in it with no more than K distinct characters.`,
  testCases: [
    {
      id: 1,
      name: 'example 1',
      inherit: [],
      code: ``,
      evaluate: `longest_substring_with_k_distinct('araaci', 2);`,
      expected: 4,
    },
    {
      id: 2,
      name: 'example 2',
      inherit: [],
      code: ``,
      evaluate: `longest_substring_with_k_distinct('araaci', 1);`,
      expected: 2,
    },
    {
      id: 3,
      name: 'example 3',
      inherit: [],
      code: ``,
      evaluate: `longest_substring_with_k_distinct('cbbebi', 3);`,
      expected: 5,
    },
  ],
  setupCode: ``,
  tags: [SLIDING_WINDOW, ALGORITHM],
  difficulty: INTERMEDIATE,
  solution: {
    stages: [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330, 390],
    solutionLines: solution,
  },
};
