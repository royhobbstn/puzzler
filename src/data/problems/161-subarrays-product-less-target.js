import { ALGORITHM, TWO_POINTERS } from '../constants.js';

const solution = [
  { stage: 0, text: '' },
  { stage: 0, text: 'function find_subarrays(arr, target) {' },
  { stage: 1, text: '  let result = [];' },
  { stage: -2, text: '  // product must start at 1 rather than 0, as its initialized value is' },
  { stage: -2, text: '  // used immediately to calculate a product' },
  { stage: 2, text: '  let product = 1;' },
  { stage: 3, text: '  let left = 0;' },
  { stage: 0, text: '' },
  { stage: 4, text: '  for (let right = 0; right < arr.length; right++) {' },
  { stage: -5, text: '    // incorporate the element at index right into the subarray' },
  { stage: 5, text: '    product *= arr[right];' },
  { stage: 0, text: '' },
  { stage: -6, text: '    // if the product of the subarray exceeds target, take away items at' },
  { stage: -6, text: '    // the left side of the subarray until back within bounds' },
  { stage: 6, text: '    while (product >= target && left < arr.length) {' },
  { stage: 7, text: '      product /= arr[left];' },
  { stage: 7, text: '      left += 1;' },
  { stage: 6, text: '    }' },
  { stage: 0, text: '' },
  { stage: -8, text: "    // if we're here, than we have a left / right bounds of a subarray" },
  { stage: -8, text: '    // to incorporate into our result' },
  { stage: 0, text: '' },
  { stage: -8, text: '    // ideally tempList is a LinkedList Queue implementation where' },
  { stage: -8, text: '    // adding to the front is an 0(1) operation' },
  { stage: 8, text: '    const tempList = [];' },
  { stage: 0, text: '' },
  { stage: -9, text: '    // to avoid duplicates, we will start with a subarray containing' },
  { stage: -9, text: '    // only arr[right] and then extend it' },
  { stage: 9, text: '    for (let i = right; i > left - 1; i--) {' },
  { stage: 10, text: '      tempList.unshift(arr[i]);' },
  { stage: -11, text: '      // push a COPY of the subarray to the result set' },
  { stage: 11, text: '      result.push(JSON.parse(JSON.stringify(tempList)));' },
  { stage: 9, text: '    }' },
  { stage: 4, text: '  }' },
  { stage: 0, text: '' },
  { stage: 12, text: '  return result;' },
  { stage: 0, text: '}' },
  { stage: 0, text: '' },
];

export const data = {
  problemID: 161,
  problemName: `Subarrays with Product less than Target`,
  problemText: `Given an array with positive numbers and a target number, find all of its contiguous subarrays whose product is less than the target number.
  
  A subarray can have one element or more.`,
  testCases: [
    {
      id: 1,
      name: 'example 1',
      inherit: [],
      code: ``,
      evaluate: `find_subarrays([2, 5, 3, 10], 30);`,
      expected: JSON.stringify([[2], [5], [2, 5], [3], [5, 3], [10]]),
    },
    {
      id: 2,
      name: 'example 2',
      inherit: [],
      code: ``,
      evaluate: `find_subarrays([8, 2, 6, 5], 50);`,
      expected: JSON.stringify([[8], [2], [8, 2], [6], [2, 6], [5], [6, 5]]),
    },
  ],
  setupCode: ``,
  source: ['https://www.educative.io/courses/grokking-the-coding-interview/RMV1GV1yPYz'],
  tags: [TWO_POINTERS, ALGORITHM],
  solution,
};
