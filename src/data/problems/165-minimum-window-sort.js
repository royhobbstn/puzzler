import { ALGORITHM, INTERMEDIATE, TWO_POINTERS } from '../constants.js';

const solution = [
  { stage: 0, text: '' },
  { stage: 0, text: 'function shortest_window_sort(arr) {' },
  { stage: 1, text: '  let low = 0;' },
  { stage: 1, text: '  let high = arr.length - 1;' },
  { stage: 0, text: '' },
  { stage: 2, text: '  while (low < arr.length - 1 && arr[low] <= arr[low + 1]) {' },
  { stage: 3, text: '    low += 1;' },
  { stage: 2, text: '  }' },
  { stage: 0, text: '' },
  { stage: 4, text: '  if (low === arr.length - 1) {' },
  { stage: 5, text: '    return 0;' },
  { stage: 4, text: '  }' },
  { stage: 0, text: '' },
  { stage: 6, text: '  while (high > 0 && arr[high] >= arr[high - 1]) {' },
  { stage: 7, text: '    high -= 1;' },
  { stage: 6, text: '  }' },
  { stage: 0, text: '' },
  { stage: 8, text: '  let subarrayMax = -Infinity;' },
  { stage: 8, text: '  let subarrayMin = Infinity;' },
  { stage: 0, text: '' },
  { stage: 9, text: '  for (let k = low; k < high + 1; k++) {' },
  { stage: 10, text: '    subarrayMax = Math.max(subarrayMax, arr[k]);' },
  { stage: 11, text: '    subarrayMin = Math.min(subarrayMin, arr[k]);' },
  { stage: 9, text: '  }' },
  { stage: 0, text: '' },
  { stage: 12, text: '  while (low > 0 && arr[low - 1] > subarrayMin) {' },
  { stage: 13, text: '    low -= 1;' },
  { stage: 12, text: '  }' },
  { stage: 0, text: '' },
  { stage: 14, text: '  while (high < arr.length - 1 && arr[high + 1] < subarrayMax) {' },
  { stage: 15, text: '    high += 1;' },
  { stage: 14, text: '  }' },
  { stage: 0, text: '' },
  { stage: 16, text: '  return high - low + 1;' },
  { stage: 0, text: '}' },
  { stage: 0, text: '' },
];

export const data = {
  problemID: 165,
  problemName: `Minimum Window Sort`,
  problemText: `Given an array, find the length of the smallest subarray in it which when sorted will sort the whole array.`,
  testCases: [
    {
      id: 1,
      name: 'example 1',
      inherit: [],
      code: ``,
      evaluate: `shortest_window_sort([1, 2, 5, 3, 7, 10, 9, 12]);`,
      expected: 5,
    },
    {
      id: 2,
      name: 'example 2',
      inherit: [],
      code: ``,
      evaluate: `shortest_window_sort([1, 3, 2, 0, -1, 7, 10]);`,
      expected: 5,
    },
    {
      id: 3,
      name: 'example 3',
      inherit: [],
      code: ``,
      evaluate: `shortest_window_sort([1, 2, 3]);`,
      expected: 0,
    },
    {
      id: 4,
      name: 'example 4',
      inherit: [],
      code: ``,
      evaluate: `shortest_window_sort([3, 2, 1]);`,
      expected: 3,
    },
  ],
  setupCode: ``,
  source: [],
  tags: [INTERMEDIATE, TWO_POINTERS, ALGORITHM],
  solution,
};
