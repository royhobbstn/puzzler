import { ALGORITHM, TOPOLOGICAL_SORT } from '../constants.ts';

const solution = [
  { stage: 0, text: '' },
  { stage: 0, text: 'function print_orders(tasks, prerequisites) {' },
  { stage: 1, text: '  const sortedOrder = [];' },
  { stage: 2, text: '  if (tasks <= 0) {' },
  { stage: 3, text: '    return sortedOrder;' },
  { stage: 2, text: '  }' },
  { stage: 0, text: '' },
  { stage: 4, text: '  const inDegree = Array(tasks).fill(0);' },
  { stage: 0, text: '' },
  { stage: 5, text: '  const graph = Array(tasks)' },
  { stage: 5, text: '    .fill(0)' },
  { stage: 5, text: '    .map(() => Array());' },
  { stage: 0, text: '' },
  { stage: 6, text: '  prerequisites.forEach(prerequisite => {' },
  { stage: 7, text: '    const parent = prerequisite[0];' },
  { stage: 7, text: '    let child = prerequisite[1];' },
  { stage: 8, text: '    graph[parent].push(child);' },
  { stage: 8, text: '    inDegree[child]++;' },
  { stage: 6, text: '  });' },
  { stage: 0, text: '' },
  { stage: 9, text: '  const sources = [];' },
  { stage: 10, text: '  for (let i = 0; i < inDegree.length; i++) {' },
  { stage: 11, text: '    if (inDegree[i] === 0) {' },
  { stage: 12, text: '      sources.push(i);' },
  { stage: 11, text: '    }' },
  { stage: 10, text: '  }' },
  { stage: 0, text: '' },
  { stage: 13, text: '  const sorts = [];' },
  {
    stage: 14,
    text: '  print_all_topological_sorts(graph, inDegree, sources, sortedOrder, sorts);',
  },
  { stage: 15, text: '  return sorts;' },
  { stage: 0, text: '}' },
  { stage: 0, text: '' },
  {
    stage: 16,
    text: 'function print_all_topological_sorts(graph, inDegree, sources, sortedOrder, sorts) {',
  },
  { stage: 17, text: '  if (sources.length > 0) {' },
  { stage: 18, text: '    for (let i = 0; i < sources.length; i++) {' },
  { stage: 19, text: '      const vertex = sources[i];' },
  { stage: 20, text: '      sortedOrder.push(vertex);' },
  { stage: 21, text: '      const sourcesForNextCall = sources.slice(0);' },
  { stage: 22, text: '      sourcesForNextCall.splice(sourcesForNextCall.indexOf(vertex), 1);' },
  { stage: 0, text: '' },
  { stage: 23, text: '      graph[vertex].forEach(child => {' },
  { stage: 24, text: '        inDegree[child]--;' },
  { stage: 25, text: '        if (inDegree[child] === 0) {' },
  { stage: 26, text: '          sourcesForNextCall.push(child);' },
  { stage: 25, text: '        }' },
  { stage: 23, text: '      });' },
  { stage: 0, text: '' },
  {
    stage: 27,
    text:
      '      print_all_topological_sorts(graph, inDegree, sourcesForNextCall, sortedOrder, sorts);',
  },
  { stage: 0, text: '' },
  { stage: 28, text: '      sortedOrder.splice(sortedOrder.indexOf(vertex), 1);' },
  { stage: 29, text: '      for (let p = 0; p < graph[vertex].length; p++) {' },
  { stage: 30, text: '        inDegree[graph[vertex][p]] += 1;' },
  { stage: 29, text: '      }' },
  { stage: 18, text: '    }' },
  { stage: 17, text: '  }' },
  { stage: 0, text: '' },
  { stage: 31, text: '  if (sortedOrder.length === inDegree.length) {' },
  { stage: 32, text: '    sorts.push(sortedOrder.slice(0));' },
  { stage: 31, text: '  }' },
  { stage: 16, text: '}' },
  { stage: 0, text: '' },
];

export const data = {
  problemID: 190,
  problemName: `All Tasks Scheduling Orders`,
  problemText: `There are ‘N’ tasks, labeled from ‘0’ to ‘N-1’. Each task can have some prerequisite tasks which need to be completed before it can be scheduled. Given the number of tasks and a list of prerequisite pairs, write a method to print all possible ordering of tasks meeting all prerequisites.`,
  testCases: [
    {
      id: 1,
      name: 'example 1',
      inherit: [],
      code: ``,
      evaluate: `print_orders(3, [
        [0, 1],
        [1, 2],
      ]);`,
      expected: JSON.stringify([[0, 1, 2]]),
    },
    {
      id: 2,
      name: 'example 2',
      inherit: [],
      code: ``,
      evaluate: `print_orders(4, [
        [3, 2],
        [3, 0],
        [2, 0],
        [2, 1],
      ]);`,
      expected: JSON.stringify([
        [3, 2, 0, 1],
        [3, 2, 1, 0],
      ]),
    },
    {
      id: 3,
      name: 'example 3',
      inherit: [],
      code: ``,
      evaluate: `print_orders(6, [
        [2, 5],
        [0, 5],
        [0, 4],
        [1, 4],
        [3, 2],
        [1, 3],
      ]);`,
      expected: JSON.stringify([
        [0, 1, 4, 3, 2, 5],
        [0, 1, 3, 4, 2, 5],
        [0, 1, 3, 2, 4, 5],
        [0, 1, 3, 2, 5, 4],
        [1, 0, 3, 4, 2, 5],
        [1, 0, 3, 2, 4, 5],
        [1, 0, 3, 2, 5, 4],
        [1, 0, 4, 3, 2, 5],
        [1, 3, 0, 2, 4, 5],
        [1, 3, 0, 2, 5, 4],
        [1, 3, 0, 4, 2, 5],
        [1, 3, 2, 0, 5, 4],
        [1, 3, 2, 0, 4, 5],
      ]),
    },
  ],
  setupCode: ``,
  source: ['https://www.educative.io/courses/grokking-the-coding-interview/q2YmVjQMMr3'],
  tags: [TOPOLOGICAL_SORT, ALGORITHM],
  solution,
};
