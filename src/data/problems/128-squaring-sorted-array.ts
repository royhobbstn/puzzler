import { ALGORITHM, TWO_POINTERS } from '../constants';

const solution = [
  { stage: 0, text: '' },
  { stage: 0, text: 'function make_squares(arr) {' },
  { stage: 1, text: '  const n = arr.length;' },
  { stage: 0, text: '' },
  { stage: -2, text: '  // create an empty array filled with zeros (not technically necessary)' },
  { stage: 2, text: '  let squares = Array(n).fill(0);' },
  { stage: -3, text: "  // we're going to be populating the array starting from the last index" },
  { stage: 3, text: '  let highestSquareIdx = n - 1;' },
  { stage: 0, text: '' },
  {
    stage: -4,
    text: "  // we'll iterate the array using two pointers; from the left and the right",
  },
  { stage: 4, text: '  let left = 0;' },
  { stage: 4, text: '  let right = n - 1;' },
  { stage: 0, text: '' },
  { stage: 5, text: '  while (left <= right) {' },
  { stage: 6, text: '    let leftSquare = arr[left] * arr[left];' },
  { stage: 6, text: '    let rightSquare = arr[right] * arr[right];' },
  { stage: -7, text: '    // compare the squares of the elements on the left and right sides' },
  {
    stage: -7,
    text: '    // from whichever one is greater, we populate the end of the result array',
  },
  { stage: -7, text: '    // and then decrement the pointer on that side of the array' },
  { stage: 7, text: '    if (leftSquare > rightSquare) {' },
  { stage: 8, text: '      squares[highestSquareIdx] = leftSquare;' },
  { stage: 8, text: '      left += 1;' },
  { stage: 7, text: '    } else {' },
  { stage: 9, text: '      squares[highestSquareIdx] = rightSquare;' },
  { stage: 9, text: '      right -= 1;' },
  { stage: 7, text: '    }' },
  { stage: 0, text: '' },
  {
    stage: -10,
    text: '    // every iteration of the while loop fills an index of the result array',
  },
  { stage: 10, text: '    highestSquareIdx -= 1;' },
  { stage: 5, text: '  }' },
  { stage: 0, text: '' },
  { stage: 11, text: '  return squares;' },
  { stage: 0, text: '}' },
  { stage: 0, text: '' },
];

export const data = {
  problemID: 128,
  problemName: `Squaring Sorted Array`,
  problemText: `Given a sorted array, create a new array containing squares of all the numbers of the input array in the sorted order.`,
  testCases: [
    {
      id: 1,
      name: 'example 1',
      inherit: [],
      code: ``,
      evaluate: `make_squares([-2, -1, 0, 2, 3]);`,
      expected: JSON.stringify([0, 1, 4, 4, 9]),
    },
    {
      id: 2,
      name: 'example 2',
      inherit: [],
      code: ``,
      evaluate: `make_squares([-3, -1, 0, 1, 2]);`,
      expected: JSON.stringify([0, 1, 1, 4, 9]),
    },
  ],
  setupCode: ``,
  source: ['https://www.educative.io/courses/grokking-the-coding-interview/R1ppNG3nV9R'],
  tags: [TWO_POINTERS, ALGORITHM],
  solution,
};
