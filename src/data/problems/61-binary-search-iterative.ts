import { BINARY_SEARCH, ALGORITHM } from '../constants';

const solution = [
  { stage: 0, text: '' },
  { stage: 0, text: 'function binarySearchIterative(sortedArray, n) {' },
  {
    stage: -1,
    text: '  // use two pointers, one as the first index in the array, one as the last',
  },
  { stage: 1, text: '  let startIndex = 0;' },
  { stage: 1, text: '  let endIndex = sortedArray.length - 1;' },
  { stage: 0, text: '' },
  { stage: 2, text: '  while (startIndex <= endIndex) {' },
  { stage: -3, text: '    // calculate the middle index of the (remaining) array' },
  { stage: 3, text: '    let middleIndex = Math.floor((startIndex + endIndex) / 2);' },
  { stage: 3, text: '    let val = sortedArray[middleIndex];' },
  { stage: 0, text: '' },
  { stage: 4, text: '    if (n < val) {' },
  {
    stage: -5,
    text: "      // the number we're looking for is less than the number at middleIndex",
  },
  { stage: -5, text: '      // update the endIndex to be one less than middleIndex' },
  { stage: 5, text: '      endIndex = middleIndex - 1;' },
  { stage: 4, text: '    } else if (n > val) {' },
  {
    stage: -6,
    text: "      // the number we're looking for is greater than the number at middleIndex",
  },
  { stage: -6, text: '      // update the startIndex to be one more than middleIndex' },
  { stage: 6, text: '      startIndex = middleIndex + 1;' },
  { stage: 4, text: '    } else {' },
  { stage: -7, text: "      // we've found the target number (n).  Return the index." },
  { stage: 7, text: '      return middleIndex;' },
  { stage: 4, text: '    }' },
  { stage: 2, text: '  }' },
  { stage: 0, text: '' },
  { stage: 8, text: '  return -1;' },
  { stage: 0, text: '}' },
  { stage: 0, text: '' },
];

export const data = {
  problemID: 61,
  problemName: 'Implement an iterative binary search function.',
  problemText: `Implement a function **binarySearchIterative** which takes an array of sorted, unique integers \`array\`, and a single integer \`n\` and returns the index where that integer is found in the array, or \`-1\` if not found.
  Please solve **iteratively**.`,
  testCases: [
    {
      id: 1,
      name: 'case 1',
      inherit: [],
      code: `const arr = [1, 2, 3, 5, 7, 8, 9, 11, 13, 15, 17, 18, 21, 24, 27, 31, 34, 38, 42, 46, 50];`,
      evaluate: `binarySearchIterative(arr, 8);`,
      expected: 5,
    },
    {
      id: 2,
      name: 'case 2',
      inherit: [1],
      code: ``,
      evaluate: `binarySearchIterative(arr, 13);`,
      expected: 8,
    },
    {
      id: 3,
      name: 'case 3',
      inherit: [1],
      code: ``,
      evaluate: `binarySearchIterative(arr, 18);`,
      expected: 11,
    },
    {
      id: 4,
      name: 'case 4',
      inherit: [1],
      code: ``,
      evaluate: `binarySearchIterative(arr, 42);`,
      expected: 18,
    },
    {
      id: 5,
      name: 'case 5',
      inherit: [1],
      code: ``,
      evaluate: `binarySearchIterative(arr, 6);`,
      expected: -1,
    },
  ],
  setupCode: '',
  source: [],
  tags: [BINARY_SEARCH, ALGORITHM],
  solution,
};
