import { ALGORITHM, SLIDING_WINDOW } from '../constants.ts';

const solution = [
  { stage: 0, text: '' },
  { stage: 0, text: 'function find_word_concatenation(str, words) {' },
  { stage: 1, text: '  if (words.length === 0 || words[0].length === 0) {' },
  { stage: 1, text: '    return [];' },
  { stage: 1, text: '  }' },
  { stage: 0, text: '' },
  { stage: 2, text: '  const wordFrequency = {};' },
  { stage: 0, text: '' },
  { stage: 3, text: '  words.forEach(word => {' },
  { stage: 4, text: '    if (!(word in wordFrequency)) {' },
  { stage: 5, text: '      wordFrequency[word] = 0;' },
  { stage: 4, text: '    }' },
  { stage: 5, text: '    wordFrequency[word] += 1;' },
  { stage: 3, text: '  });' },
  { stage: 0, text: '' },
  { stage: 6, text: '  const resultIndices = [];' },
  { stage: 6, text: '  const wordsCount = words.length;' },
  { stage: 6, text: '  const wordLength = words[0].length;' },
  { stage: 0, text: '' },
  { stage: 7, text: '  for (let i = 0; i < str.length - wordsCount * wordLength + 1; i++) {' },
  { stage: 8, text: '    const wordsSeen = {};' },
  { stage: 9, text: '    for (let j = 0; j < wordsCount; j++) {' },
  { stage: 10, text: '      let next_word_index = i + j * wordLength;' },
  {
    stage: 11,
    text: '      let word = str.substring(next_word_index, next_word_index + wordLength);',
  },
  { stage: 12, text: '      if (!(word in wordFrequency)) {' },
  { stage: 12, text: '        break;' },
  { stage: 12, text: '      }' },
  { stage: 0, text: '' },
  { stage: 13, text: '      if (!(word in wordsSeen)) {' },
  { stage: 13, text: '        wordsSeen[word] = 0;' },
  { stage: 13, text: '      }' },
  { stage: 14, text: '      wordsSeen[word] += 1;' },
  { stage: 0, text: '' },
  { stage: 15, text: '      if (wordsSeen[word] > (wordFrequency[word] || 0)) {' },
  { stage: 15, text: '        break;' },
  { stage: 15, text: '      }' },
  { stage: 0, text: '' },
  { stage: 16, text: '      if (j + 1 === wordsCount) {' },
  { stage: 16, text: '        resultIndices.push(i);' },
  { stage: 16, text: '      }' },
  { stage: 9, text: '    }' },
  { stage: 7, text: '  }' },
  { stage: 0, text: '' },
  { stage: 17, text: '  return resultIndices;' },
  { stage: 0, text: '}' },
  { stage: 0, text: '' },
];

export const data = {
  problemID: 97,
  problemName: `Words Concatenation`,
  problemText: `Given a string and a list of words, find all the starting indices of substrings in the given string that are a concatenation of all the given words exactly once without any overlapping of words. It is given that all words are of the same length.`,
  testCases: [
    {
      id: 1,
      name: 'example 1',
      inherit: [],
      code: ``,
      evaluate: `find_word_concatenation('catfoxcat', ['cat', 'fox']);`,
      expected: JSON.stringify([0, 3]),
    },
    {
      id: 2,
      name: 'example 2',
      inherit: [],
      code: ``,
      evaluate: `find_word_concatenation('catcatfoxfox', ['cat', 'fox']);`,
      expected: JSON.stringify([3]),
    },
  ],
  setupCode: ``,
  source: ['https://www.educative.io/courses/grokking-the-coding-interview/N8nMBvDQJ0m'],
  tags: [SLIDING_WINDOW, ALGORITHM],
  solution,
};
