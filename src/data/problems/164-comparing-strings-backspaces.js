import { ALGORITHM, TWO_POINTERS } from '../constants.js';

const solution = [
  { stage: 0, text: '' },
  { stage: 0, text: 'function backspace_compare(str1, str2) {' },
  { stage: 1, text: '  let index1 = str1.length - 1;' },
  { stage: 1, text: '  let index2 = str2.length - 1;' },
  { stage: 0, text: '' },
  { stage: 2, text: '  while (index1 >= 0 || index2 >= 0) {' },
  { stage: 3, text: '    let i1 = get_next_valid_char_index(str1, index1);' },
  { stage: 4, text: '    let i2 = get_next_valid_char_index(str2, index2);' },
  { stage: 5, text: '    if (i1 < 0 && i2 < 0) {' },
  { stage: 6, text: '      return true;' },
  { stage: 5, text: '    }' },
  { stage: 7, text: '    if (i1 < 0 || i2 < 0) {' },
  { stage: 8, text: '      return false;' },
  { stage: 7, text: '    }' },
  { stage: 9, text: '    if (str1[i1] !== str2[i2]) {' },
  { stage: 10, text: '      return false;' },
  { stage: 9, text: '    }' },
  { stage: 0, text: '' },
  { stage: 11, text: '    index1 = i1 - 1;' },
  { stage: 11, text: '    index2 = i2 - 1;' },
  { stage: 2, text: '  }' },
  { stage: 0, text: '' },
  { stage: 12, text: '  return true;' },
  { stage: 0, text: '}' },
  { stage: 0, text: '' },
  { stage: 13, text: 'function get_next_valid_char_index(str, index) {' },
  { stage: 14, text: '  let backspaceCount = 0;' },
  { stage: 15, text: '  while (index >= 0) {' },
  { stage: 16, text: "    if (str[index] === '#') {" },
  { stage: 17, text: '      backspaceCount += 1;' },
  { stage: 16, text: '    } else if (backspaceCount > 0) {' },
  { stage: 18, text: '      backspaceCount -= 1;' },
  { stage: 16, text: '    } else {' },
  { stage: 19, text: '      break;' },
  { stage: 16, text: '    }' },
  { stage: 0, text: '' },
  { stage: 20, text: '    index -= 1;' },
  { stage: 15, text: '  }' },
  { stage: 0, text: '' },
  { stage: 21, text: '  return index;' },
  { stage: 13, text: '}' },
  { stage: 0, text: '' },
];

export const data = {
  problemID: 164,
  problemName: `Comparing Strings Containing Backspaces`,
  problemText: `Given two strings containing backspaces (identified by the character ‘#’), check if the two strings are equal.`,
  testCases: [
    {
      id: 1,
      name: 'example 1',
      inherit: [],
      code: ``,
      evaluate: `backspace_compare('xy#z', 'xzz#');`,
      expected: true,
    },
    {
      id: 2,
      name: 'example 2',
      inherit: [],
      code: ``,
      evaluate: `backspace_compare('xy#z', 'xyz#');`,
      expected: false,
    },
    {
      id: 3,
      name: 'example 3',
      inherit: [],
      code: ``,
      evaluate: `backspace_compare('xp#', 'xyz##');`,
      expected: true,
    },
    {
      id: 4,
      name: 'example 4',
      inherit: [],
      code: ``,
      evaluate: `backspace_compare('xywrrmp', 'xywrrmu#p');`,
      expected: true,
    },
  ],
  setupCode: ``,
  source: [],
  tags: [TWO_POINTERS, ALGORITHM],
  solution,
};
