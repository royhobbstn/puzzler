import { DOUBLY_LINKED_LIST, DATA_STRUCTURE } from '../constants';

const solution = [
  { stage: 0, text: 'class DoublyLinkedListNode {' },
  { stage: 0, text: '  constructor(value, next = null, previous = null) {' },
  { stage: 0, text: '    this.value = value;' },
  { stage: 0, text: '    this.next = next;' },
  { stage: 0, text: '    this.previous = previous;' },
  { stage: 0, text: '  }' },
  { stage: 0, text: '}' },
  { stage: 0, text: '' },
  { stage: 0, text: 'class DoublyLinkedList {' },
  { stage: 0, text: '  constructor() {' },
  { stage: 0, text: '    this.head = null;' },
  { stage: 0, text: '    this.tail = null;' },
  { stage: 0, text: '  }' },
  { stage: 0, text: '' },
  { stage: 1, text: '  append(value) {' },
  { stage: 2, text: '    const newNode = new DoublyLinkedListNode(value);' },
  { stage: 2, text: '' },
  { stage: 3, text: '    if (!this.head) {' },
  { stage: 4, text: '      this.head = newNode;' },
  { stage: 4, text: '      this.tail = newNode;' },
  { stage: 4, text: '      return this;' },
  { stage: 3, text: '    }' },
  { stage: 3, text: '' },
  { stage: 5, text: '    this.tail.next = newNode;' },
  { stage: 5, text: '    newNode.previous = this.tail;' },
  { stage: 5, text: '    this.tail = newNode;' },
  { stage: 2, text: '    return this;' },
  { stage: 1, text: '  }' },
  { stage: 0, text: '' },
  { stage: 0, text: '}' },
  { stage: 0, text: '' },
];

export const data = {
  problemID: 11,
  problemName: 'Implement **append** in a *DoublyLinkedList* class.',
  problemText:
    'Write an **append** method in a *DoublyLinkedList* class that accepts an arbitrary `value` parameter, creates a *DoublyLinkedListNode*, and adds it to the end of the list.  The method should return the original list.',
  testCases: [
    {
      id: 1,
      name: 'compiles',
      inherit: [],
      code: `const dll=new DoublyLinkedList();`,
      evaluate: `Boolean(dll);`,
      expected: true,
    },
    {
      id: 2,
      name: 'append onto empty list, head set correctly',
      inherit: [1],
      code: `dll.append(3);`,
      evaluate: `dll.head.value;`,
      expected: 3,
    },
    {
      id: 3,
      name: 'append onto empty list, tail set correctly',
      inherit: [1, 2],
      code: ``,
      evaluate: `dll.tail.value;`,
      expected: 3,
    },
    {
      id: 4,
      name: 'append 2nd item onto list, check head',
      inherit: [1, 2],
      code: `dll.append(8);`,
      evaluate: `dll.head.value;`,
      expected: 3,
    },
    {
      id: 5,
      name: 'append 2nd item onto list, check tail',
      inherit: [1, 2, 4],
      code: ``,
      evaluate: `dll.tail.value;`,
      expected: 8,
    },
    {
      id: 6,
      name: 'append 2nd item onto list, check head next',
      inherit: [1, 2, 4],
      code: ``,
      evaluate: `dll.head.next.value;`,
      expected: 8,
    },
  ],
  setupCode: '',
  source: [],
  tags: [DOUBLY_LINKED_LIST, DATA_STRUCTURE],
  solution,
};
