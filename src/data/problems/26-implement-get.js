import {
  LINKED_LIST_CLASS_EXT,
  HASH_TABLE_PROTOTYPE_HASH,
  HASH_TABLE_PROTOTYPE_SET,
} from '../code-imports/import-index.js';
import { HASH_TABLE, DATA_STRUCTURE } from '../constants.js';

const solution = [
  { stage: -1, text: '// class LinkedList {' },
  { stage: -1, text: '//   findKey(key: string) LinkedListNode' },
  { stage: -1, text: '// }' },
  { stage: -1, text: '//' },
  { stage: -1, text: '// class LinkedListNode {' },
  { stage: -1, text: '//   constructor(key, value, next = null) {' },
  { stage: -1, text: '//     this.key = key;' },
  { stage: -1, text: '//     this.value = value;' },
  { stage: -1, text: '//     this.next = next;' },
  { stage: -1, text: '//   }' },
  { stage: -1, text: '// }' },
  { stage: -1, text: '//' },
  { stage: -1, text: '// All code above is implicitly included in your environment' },
  { stage: 0, text: '' },
  { stage: 0, text: 'class HashTable {' },
  { stage: 0, text: '  constructor(hashTableSize = 32) {' },
  { stage: 0, text: '    this.buckets = Array(hashTableSize)' },
  { stage: 0, text: '      .fill(null)' },
  { stage: 0, text: '      .map(() => new LinkedList());' },
  { stage: 0, text: '  }' },
  { stage: 0, text: '' },
  { stage: -1, text: '  // IMPLEMENTED:  hash(key: string) int' },
  { stage: -1, text: '' },
  { stage: 1, text: '  get(key) {' },
  { stage: 2, text: '    const bucketLinkedList = this.buckets[this.hash(key)];' },
  { stage: 3, text: '    const node = bucketLinkedList.findKey(key);' },
  { stage: 3, text: '    return node ? node.value : undefined;' },
  { stage: 1, text: '  }' },
  { stage: 0, text: '' },
  { stage: 0, text: '}' },
  { stage: 0, text: '' },
];

export const data = {
  problemID: 26,
  problemName: 'Implement **get** in a *HashTable* class.',
  problemText:
    'Given a *HashTable* class and an associated *LinkedList* class, implement a **get** method in the *HashTable* class that will retrieve a `value` from the hash table for a given `key`, or `undefined` if the `key` does not exist.',
  testCases: [
    {
      id: 1,
      name: 'compiles',
      inherit: [],
      code: `const ht=new HashTable();`,
      evaluate: `Boolean(ht);`,
      expected: true,
    },
    {
      id: 2,
      name: 'get a key that doesnt exist',
      inherit: [1],
      code: ``,
      evaluate: `ht.get('key1');`,
      expected: undefined,
    },
    {
      id: 3,
      name: 'get a key',
      inherit: [1],
      code: `ht.set('key1', 99);`,
      evaluate: `ht.get('key1');`,
      expected: 99,
    },
  ],
  setupCode: `${LINKED_LIST_CLASS_EXT} ${HASH_TABLE_PROTOTYPE_HASH} ${HASH_TABLE_PROTOTYPE_SET}`,
  source: [],
  tags: [HASH_TABLE, DATA_STRUCTURE],
  solution,
};
