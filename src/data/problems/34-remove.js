import {
  MIN_HEAP_CHILD_FNS,
  MIN_HEAP_HEAPIFY_UP,
  MIN_HEAP_HEAPIFY_DOWN,
  MIN_HEAP_PARENT_FNS,
  MIN_HEAP_SWAP,
  MIN_HEAP_FIND,
} from '../code-imports/import-index.js';
import { HEAP, DATA_STRUCTURE } from '../constants.js';

const solution = [
  { stage: 0, text: 'class MinHeap {' },
  { stage: 0, text: '  constructor() {' },
  { stage: 0, text: '    this.heapContainer = [];' },
  { stage: 0, text: '  }' },
  { stage: 0, text: '' },
  { stage: -1, text: '// IMPLEMENTED:  heapifyUp(index: int)' },
  { stage: -1, text: '// IMPLEMENTED:  heapifyDown(index: int)' },
  { stage: -1, text: '// IMPLEMENTED:  find(item: int) []index:int' },
  { stage: -1, text: '// IMPLEMENTED:  parent(index: int) item:int' },
  { stage: -1, text: '// IMPLEMENTED:  hasLeftChild(index: int) bool' },
  { stage: 0, text: '' },
  { stage: 1, text: '  remove(item) {' },
  { stage: 2, text: '    const numberOfItemsToRemove = this.find(item).length;' },
  { stage: 2, text: '' },
  {
    stage: 3,
    text: '    for (let iteration = 0; iteration < numberOfItemsToRemove; iteration += 1) {',
  },
  { stage: 4, text: '      const indexToRemove = this.find(item).pop();' },
  { stage: 4, text: '      if (indexToRemove === this.heapContainer.length - 1) {' },
  { stage: 5, text: '        this.heapContainer.pop();' },
  { stage: 4, text: '      } else {' },
  { stage: 5, text: '        this.heapContainer[indexToRemove] = this.heapContainer.pop();' },
  { stage: 5, text: '        const parentItem = this.parent(indexToRemove);' },
  { stage: 6, text: '' },
  { stage: 6, text: '        if (' },
  { stage: 6, text: '          this.hasLeftChild(indexToRemove) &&' },
  { stage: 6, text: '          (!parentItem || parentItem <= this.heapContainer[indexToRemove])' },
  { stage: 6, text: '        ) {' },
  { stage: 7, text: '          this.heapifyDown(indexToRemove);' },
  { stage: 6, text: '        } else {' },
  { stage: 8, text: '          this.heapifyUp(indexToRemove);' },
  { stage: 6, text: '        }' },
  { stage: 4, text: '      }' },
  { stage: 3, text: '    }' },
  { stage: 2, text: '    return this;' },
  { stage: 1, text: '  }' },
  { stage: 0, text: '' },
  { stage: 0, text: '}' },
  { stage: 0, text: '' },
];

export const data = {
  problemID: 34,
  problemName: `Implement **remove** for a *MinHeap* class.`,
  problemText: `Implement a **remove** method for a *MinHeap* to receive an \`item\` (integer) and remove all instances of that item from the heap.  The method should then return the heap.
  
  (note: remove duplicate items from back to front)`,
  testCases: [
    {
      id: 1,
      name: 'compiles',
      inherit: [],
      code: `const minheap=new MinHeap();`,
      evaluate: `Boolean(minheap);`,
      expected: true,
    },
    {
      id: 2,
      name: 'remove from empty heap, remains empty heap',
      inherit: [1],
      code: ``,
      evaluate: `minheap.remove(5);JSON.stringify(minheap.heapContainer);`,
      expected: JSON.stringify([]),
    },
    {
      id: 3,
      name: 'remove from empty heap, returns empty heap',
      inherit: [1],
      code: ``,
      evaluate: `minheap.remove(5) === minheap;`,
      expected: true,
    },
    {
      id: 4,
      name: 'remove one from one item heap, heap becomes empty',
      inherit: [1],
      code: `minheap.heapContainer = [5];minheap.remove(5);`,
      evaluate: `JSON.stringify(minheap.heapContainer);`,
      expected: JSON.stringify([]),
    },
    {
      id: 5,
      name: 'remove one from two item heap, one item remains',
      inherit: [1],
      code: `minheap.heapContainer = [5,6];minheap.remove(5);`,
      evaluate: `JSON.stringify(minheap.heapContainer);`,
      expected: JSON.stringify([6]),
    },
    {
      id: 6,
      name: 'remove value from two item heap where value is duplicated',
      inherit: [1],
      code: `minheap.heapContainer = [5,5];minheap.remove(5);`,
      evaluate: `JSON.stringify(minheap.heapContainer);`,
      expected: JSON.stringify([]),
    },
    {
      id: 7,
      name: 'complex example',
      inherit: [1],
      code: `minheap.heapContainer = [1,2,4,6,3,5,6,10,8,7];minheap.remove(5).remove(6);`,
      evaluate: `JSON.stringify(minheap.heapContainer);`,
      expected: JSON.stringify([1, 2, 4, 10, 3, 7, 8]),
    },
  ],
  setupCode: `${MIN_HEAP_PARENT_FNS} ${MIN_HEAP_CHILD_FNS} ${MIN_HEAP_FIND} ${MIN_HEAP_HEAPIFY_UP} ${MIN_HEAP_HEAPIFY_DOWN} ${MIN_HEAP_SWAP}


  `,
  source: [],
  tags: [HEAP, DATA_STRUCTURE],
  solution,
};
