import { ALGORITHM, INTERMEDIATE, TOPOLOGICAL_SORT } from '../constants.js';

const solution = [
  { stage: 0, text: '' },
  { stage: 0, text: 'function find_order(tasks, prerequisites) {' },
  { stage: 1, text: '  const sortedOrder = [];' },
  { stage: 2, text: '  if (tasks <= 0) {' },
  { stage: 3, text: '    return sortedOrder;' },
  { stage: 2, text: '  }' },
  { stage: 0, text: '' },
  { stage: 4, text: '  const inDegree = Array(tasks).fill(0);' },
  { stage: 5, text: '  const graph = Array(tasks)' },
  { stage: 5, text: '    .fill(0)' },
  { stage: 5, text: '    .map(() => Array());' },
  { stage: 0, text: '' },
  { stage: 6, text: '  prerequisites.forEach(prerequisite => {' },
  { stage: 7, text: '    let parent = prerequisite[0];' },
  { stage: 7, text: '    let  child = prerequisite[1];' },
  { stage: 8, text: '    graph[parent].push(child);' },
  { stage: 8, text: '    inDegree[child]++;' },
  { stage: 6, text: '  });' },
  { stage: 0, text: '' },
  { stage: 9, text: '  const sources = [];' },
  { stage: 10, text: '  for (let i = 0; i < inDegree.length; i++) {' },
  { stage: 11, text: '    if (inDegree[i] === 0) {' },
  { stage: 12, text: '      sources.push(i);' },
  { stage: 11, text: '    }' },
  { stage: 10, text: '  }' },
  { stage: 0, text: '' },
  { stage: 13, text: '  while (sources.length > 0) {' },
  { stage: 14, text: '    const vertex = sources.shift();' },
  { stage: 15, text: '    sortedOrder.push(vertex);' },
  { stage: 16, text: '    graph[vertex].forEach(child => {' },
  { stage: 17, text: '      inDegree[child] -= 1;' },
  { stage: 18, text: '      if (inDegree[child] === 0) {' },
  { stage: 19, text: '        sources.push(child);' },
  { stage: 18, text: '      }' },
  { stage: 16, text: '    });' },
  { stage: 13, text: '  }' },
  { stage: 0, text: '' },
  { stage: 20, text: '  if (sortedOrder.length !== tasks) {' },
  { stage: 21, text: '    return [];' },
  { stage: 20, text: '  }' },
  { stage: 0, text: '' },
  { stage: 22, text: '  return sortedOrder;' },
  { stage: 0, text: '}' },
  { stage: 0, text: '' },
];

export const data = {
  problemID: 189,
  problemName: `Tasks Scheduling Order`,
  problemText: `There are ‘N’ tasks, labeled from ‘0’ to ‘N-1’. Each task can have some prerequisite tasks which need to be completed before it can be scheduled. Given the number of tasks and a list of prerequisite pairs, write a method to find the ordering of tasks we should pick to finish all tasks.`,
  testCases: [
    {
      id: 1,
      name: 'example 1',
      inherit: [],
      code: ``,
      evaluate: `find_order(3, [
        [0, 1],
        [1, 2],
      ]);`,
      expected: JSON.stringify([0, 1, 2]),
    },
    {
      id: 2,
      name: 'example 2',
      inherit: [],
      code: ``,
      evaluate: `find_order(3, [
        [0, 1],
        [1, 2],
        [2, 0],
      ]);`,
      expected: JSON.stringify([]),
    },
    {
      id: 3,
      name: 'example 3',
      inherit: [],
      code: ``,
      evaluate: `find_order(6, [
        [0, 4],
        [1, 4],
        [3, 2],
        [1, 3],
      ]);`,
      expected: JSON.stringify([0, 1, 5, 4, 3, 2]),
    },
  ],
  setupCode: ``,
  source: [],
  tags: [INTERMEDIATE, TOPOLOGICAL_SORT, ALGORITHM],
  solution,
};
