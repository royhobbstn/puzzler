import { ALGORITHM, TOPOLOGICAL_SORT } from '../constants.js';

const solution = [
  { stage: 0, text: '' },
  { stage: 0, text: 'function find_trees(nodes, edges) {' },
  { stage: 1, text: '  if (nodes <= 0) {' },
  { stage: 2, text: '    return [];' },
  { stage: 1, text: '  }' },
  { stage: 0, text: '' },
  { stage: 3, text: '  if (nodes === 1) {' },
  { stage: 4, text: '    return [0];' },
  { stage: 3, text: '  }' },
  { stage: 0, text: '' },
  { stage: 5, text: '  const inDegree = Array(nodes).fill(0);' },
  { stage: 0, text: '' },
  { stage: 6, text: '  const graph = Array(nodes)' },
  { stage: 6, text: '    .fill(0)' },
  { stage: 6, text: '    .map(() => Array());' },
  { stage: 0, text: '' },
  { stage: 7, text: '  edges.forEach(edge => {' },
  { stage: 8, text: '    let n1 = edge[0];' },
  { stage: 8, text: '    let n2 = edge[1];' },
  { stage: 9, text: '    graph[n1].push(n2);' },
  { stage: 9, text: '    graph[n2].push(n1);' },
  { stage: 10, text: '    inDegree[n1] += 1;' },
  { stage: 10, text: '    inDegree[n2] += 1;' },
  { stage: 7, text: '  });' },
  { stage: 0, text: '' },
  { stage: 11, text: '  const leaves = [];' },
  { stage: 12, text: '  for (let i = 0; i < inDegree.length; i++) {' },
  { stage: 13, text: '    if (inDegree[i] === 1) {' },
  { stage: 14, text: '      leaves.push(i);' },
  { stage: 13, text: '    }' },
  { stage: 12, text: '  }' },
  { stage: 0, text: '' },
  { stage: 15, text: '  let totalNodes = nodes;' },
  { stage: 16, text: '  while (totalNodes > 2) {' },
  { stage: 17, text: '    let leavesSize = leaves.length;' },
  { stage: 17, text: '    totalNodes -= leavesSize;' },
  { stage: 0, text: '' },
  { stage: 18, text: '    for (let i = 0; i < leavesSize; i++) {' },
  { stage: 19, text: '      let vertex = leaves.shift();' },
  { stage: 0, text: '' },
  { stage: 20, text: '      graph[vertex].forEach(child => {' },
  { stage: 21, text: '        inDegree[child] -= 1;' },
  { stage: 22, text: '        if (inDegree[child] === 1) {' },
  { stage: 23, text: '          leaves.push(child);' },
  { stage: 22, text: '        }' },
  { stage: 20, text: '      });' },
  { stage: 0, text: '' },
  { stage: 18, text: '    }' },
  { stage: 16, text: '  }' },
  { stage: 0, text: '' },
  { stage: 24, text: '  return leaves;' },
  { stage: 0, text: '}' },
  { stage: 0, text: '' },
];

export const data = {
  problemID: 193,
  problemName: `Minimum Height Trees`,
  problemText: `We are given an undirected graph that has characteristics of a k-ary tree. In such a graph, we can choose any node as the root to make a k-ary tree. The root (or the tree) with the minimum height will be called Minimum Height Tree (MHT). There can be multiple MHTs for a graph. In this problem, we need to find all those roots which give us MHTs. Write a method to find all MHTs of the given graph and return a list of their roots.`,
  testCases: [
    {
      id: 1,
      name: 'example 1',
      inherit: [],
      code: ``,
      evaluate: `find_trees(5, [
        [0, 1],
        [1, 2],
        [1, 3],
        [2, 4],
      ]);`,
      expected: JSON.stringify([1, 2]),
    },
    {
      id: 2,
      name: 'example 2',
      inherit: [],
      code: ``,
      evaluate: `find_trees(4, [
        [0, 1],
        [0, 2],
        [2, 3],
      ]);`,
      expected: JSON.stringify([0, 2]),
    },
    {
      id: 3,
      name: 'example 3',
      inherit: [],
      code: ``,
      evaluate: `find_trees(4, [
        [1, 2],
        [1, 3],
      ]);`,
      expected: JSON.stringify([1]),
    },
  ],
  setupCode: ``,
  source: [],
  tags: [TOPOLOGICAL_SORT, ALGORITHM],
  solution,
};
