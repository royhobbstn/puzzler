import { ALGORITHM, SLIDING_WINDOW } from '../constants.js';

const solution = [
  { stage: 0, text: '' },
  { stage: 0, text: 'function length_of_longest_substring(arr, k) {' },
  { stage: 1, text: '  let windowStart = 0;' },
  { stage: 1, text: '  let maxLength = 0;' },
  { stage: 1, text: '  let maxOnesCount = 0;' },
  { stage: 0, text: '' },
  { stage: 2, text: '  for (let windowEnd = 0; windowEnd < arr.length; windowEnd++) {' },
  { stage: 3, text: '    if (arr[windowEnd] === 1) {' },
  { stage: 4, text: '      maxOnesCount += 1;' },
  { stage: 3, text: '    }' },
  { stage: 0, text: '' },
  { stage: 5, text: '    if (windowEnd - windowStart + 1 - maxOnesCount > k) {' },
  { stage: 6, text: '      if (arr[windowStart] === 1) {' },
  { stage: 7, text: '        maxOnesCount -= 1;' },
  { stage: 6, text: '      }' },
  { stage: 7, text: '      windowStart += 1;' },
  { stage: 5, text: '    }' },
  { stage: 0, text: '' },
  { stage: 8, text: '    maxLength = Math.max(maxLength, windowEnd - windowStart + 1);' },
  { stage: 2, text: '  }' },
  { stage: 0, text: '' },
  { stage: 9, text: '  return maxLength;' },
  { stage: 0, text: '}' },
  { stage: 0, text: '' },
];

export const data = {
  problemID: 93,
  problemName: `Longest Binary Subarray After Replacement`,
  problemText: `Given an array containing 0s and 1s, if you are allowed to replace no more than ‘k’ 0s with 1s, find the length of the longest contiguous subarray having all 1s.`,
  testCases: [
    {
      id: 1,
      name: 'example 1',
      inherit: [],
      code: ``,
      evaluate: `length_of_longest_substring([0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1], 2);`,
      expected: 6,
    },
    {
      id: 2,
      name: 'example 2',
      inherit: [],
      code: ``,
      evaluate: `length_of_longest_substring([0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1], 3);`,
      expected: 9,
    },
  ],
  setupCode: ``,
  source: ['https://www.educative.io/courses/grokking-the-coding-interview/B6VypRxPolJ'],
  tags: [SLIDING_WINDOW, ALGORITHM],
  solution,
};
