import { STACK, ALGORITHM, EXPERT } from '../constants.js';

const solution = [
  { stage: 0, text: '' },
  { stage: 0, text: 'function calculate(s) {' },
  { stage: 1, text: "  s = s.replaceAll(' ', '');" },
  { stage: 1, text: '  const stack = [];' },
  { stage: 2, text: "  let sign = '+';" },
  { stage: 2, text: '  let i = 0;' },
  { stage: 3, text: '  while (i < s.length) {' },
  { stage: 4, text: '    let c = s[i];' },
  { stage: 4, text: "    if (c === '(') {" },
  { stage: 5, text: '      let l = 1;' },
  { stage: 5, text: '      let j = i + 1;' },
  { stage: 5, text: '      while (j < s.length && l > 0) {' },
  { stage: 6, text: "        if (s[j] === '(') {" },
  { stage: 7, text: '          l++;' },
  { stage: 6, text: "        } else if (s.charAt(j) == ')') {" },
  { stage: 7, text: '          l--;' },
  { stage: 6, text: '        }' },
  { stage: 7, text: '        j++;' },
  { stage: 5, text: '      }' },
  { stage: 8, text: '      let blockValue = calculate(s.substring(i + 1, j - 1));' },
  { stage: 8, text: '      i = j;' },
  { stage: 9, text: "      if (sign === '+') {" },
  { stage: 10, text: '        stack.push(blockValue);' },
  { stage: 9, text: "      } else if (sign === '-') {" },
  { stage: 10, text: '        stack.push(-blockValue);' },
  { stage: 9, text: "      } else if (sign === '*') {" },
  { stage: 10, text: '        stack.push(stack.pop() * blockValue);' },
  { stage: 9, text: "      } else if (sign === '/') {" },
  { stage: 11, text: '        let temp = stack.pop() / blockValue;' },
  { stage: 11, text: '        if (temp < 0) {' },
  { stage: 11, text: '          stack.push(Math.ceil(temp));' },
  { stage: 11, text: '        } else {' },
  { stage: 11, text: '          stack.push(Math.floor(temp));' },
  { stage: 11, text: '        }' },
  { stage: 9, text: '      }' },
  { stage: 4, text: '    } else if (isCharNumber(c)) {' },
  { stage: 12, text: '      let j = i;' },
  { stage: 12, text: '      let value = 0;' },
  { stage: 13, text: '      while (j < s.length && isCharNumber(s[j])) {' },
  { stage: 14, text: "        value = 10 * value + (s[j] - '0');" },
  { stage: 14, text: '        j++;' },
  { stage: 13, text: '      }' },
  { stage: 15, text: '      i = j;' },
  { stage: 16, text: "      if (sign === '+') {" },
  { stage: 17, text: '        stack.push(value);' },
  { stage: 16, text: "      } else if (sign === '-') {" },
  { stage: 17, text: '        stack.push(-value);' },
  { stage: 16, text: "      } else if (sign === '*') {" },
  { stage: 17, text: '        stack.push(stack.pop() * value);' },
  { stage: 16, text: "      } else if (sign === '/') {" },
  { stage: 18, text: '        let temp = stack.pop() / value;' },
  { stage: 18, text: '        if (temp < 0) {' },
  { stage: 19, text: '          stack.push(Math.ceil(temp));' },
  { stage: 18, text: '        } else {' },
  { stage: 19, text: '          stack.push(Math.floor(temp));' },
  { stage: 18, text: '        }' },
  { stage: 16, text: '      }' },
  { stage: 4, text: '    } else {' },
  { stage: 20, text: '      sign = c;' },
  { stage: 20, text: '      i++;' },
  { stage: 4, text: '    }' },
  { stage: 3, text: '  }' },
  { stage: 0, text: '' },
  { stage: 21, text: '  let res = 0;' },
  { stage: 21, text: '  while (stack.length) {' },
  { stage: 22, text: '    res += stack.pop();' },
  { stage: 21, text: '  }' },
  { stage: 22, text: '  return res;' },
  { stage: 0, text: '}' },
  { stage: 0, text: '' },
  { stage: 5, text: 'function isCharNumber(c) {' },
  { stage: 5, text: "  return c >= '0' && c <= '9';" },
  { stage: 5, text: '}' },
  { stage: 0, text: '' },
];

export const data = {
  problemID: 67,
  problemName: 'Implement a Calculator to evaluate an expression string. (Lvl 3)',
  problemText: `Implement a **calculate** function that takes a string \`s\`, and evaluates it with respect to parentheses grouping and order of operations.
  Integer division should truncate to 0.  (ex: 5/2 = 2).  Assume the expression string is always a valid expression.`,
  testCases: [
    {
      id: 1,
      name: 'single integer',
      inherit: [],
      code: ``,
      evaluate: `calculate('5');`,
      expected: 5,
    },
    {
      id: 2,
      name: 'simple expression',
      inherit: [],
      code: ``,
      evaluate: `calculate('2+2');`,
      expected: 4,
    },
    {
      id: 3,
      name: 'simple expression whitespace',
      inherit: [],
      code: ``,
      evaluate: `calculate('2 + 2');`,
      expected: 4,
    },
    {
      id: 4,
      name: 'proper order of operations',
      inherit: [],
      code: ``,
      evaluate: `calculate('12-4/2');`,
      expected: 10,
    },
    {
      id: 5,
      name: 'truncate integer division',
      inherit: [],
      code: ``,
      evaluate: `calculate('10-5/2');`,
      expected: 8,
    },
    {
      id: 6,
      name: 'simple parentheses',
      inherit: [],
      code: ``,
      evaluate: `calculate('(5-2)*(8+4)');`,
      expected: 36,
    },
    {
      id: 7,
      name: 'advanced 1',
      inherit: [],
      code: ``,
      evaluate: `calculate('3*(10+5*2)/4+(6/2+12)');`,
      expected: 30,
    },
  ],
  setupCode: ``,
  tags: [EXPERT, STACK, ALGORITHM],
  solution,
};
