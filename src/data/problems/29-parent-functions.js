import { HEAP, DATA_STRUCTURE, INTERMEDIATE } from '../constants.js';

const solution = [
  { stage: 0, text: 'class MinHeap {' },
  { stage: 0, text: '  constructor() {' },
  { stage: 0, text: '    this.heapContainer = [];' },
  { stage: 0, text: '  }' },
  { stage: 0, text: '' },
  { stage: 1, text: '  getParentIndex(childIndex) {' },
  { stage: 2, text: '    return Math.floor((childIndex - 1) / 2);' },
  { stage: 1, text: '  }' },
  { stage: 2, text: '' },
  { stage: 1, text: '  hasParent(childIndex) {' },
  { stage: 3, text: '    return this.getParentIndex(childIndex) >= 0;' },
  { stage: 1, text: '  }' },
  { stage: 3, text: '' },
  { stage: 1, text: '  parent(childIndex) {' },
  { stage: 4, text: '    return this.heapContainer[this.getParentIndex(childIndex)];' },
  { stage: 1, text: '  }' },
  { stage: 4, text: '' },
  { stage: 0, text: '}' },
  { stage: 0, text: '' },
];

export const data = {
  problemID: 29,
  problemName: `Implement parent index functions for a *MinHeap* class.`,
  problemText: `Implement the following methods for the *MinHeap* data structure:  
   - **getParentIndex** (childIndex: integer) => integer  
   - **hasParent** (childIndex: integer) => boolean  
   - **parent** (childIndex: integer) => heap value  
`,
  testCases: [
    {
      id: 1,
      name: 'compiles',
      inherit: [],
      code: `const minheap=new MinHeap();`,
      evaluate: `Boolean(minheap);`,
      expected: true,
    },
    {
      id: 2,
      name: 'getParentIndex - 1',
      inherit: [1],
      code: ``,
      evaluate: `minheap.getParentIndex(1);`,
      expected: 0,
    },
    {
      id: 3,
      name: 'getParentIndex - 2',
      inherit: [1],
      code: ``,
      evaluate: `minheap.getParentIndex(2);`,
      expected: 0,
    },
    {
      id: 4,
      name: 'getParentIndex - 3',
      inherit: [1],
      code: ``,
      evaluate: `minheap.getParentIndex(5);`,
      expected: 2,
    },
    {
      id: 5,
      name: 'getParentIndex - 4',
      inherit: [1],
      code: ``,
      evaluate: `minheap.getParentIndex(6);`,
      expected: 2,
    },
    {
      id: 6,
      name: 'getParentIndex - 5',
      inherit: [1],
      code: ``,
      evaluate: `minheap.getParentIndex(7);`,
      expected: 3,
    },
    {
      id: 7,
      name: 'hasParent - 1',
      inherit: [1],
      code: ``,
      evaluate: `minheap.hasParent(0);`,
      expected: false,
    },
    {
      id: 8,
      name: 'hasParent - 2',
      inherit: [1],
      code: ``,
      evaluate: `minheap.hasParent(1);`,
      expected: true,
    },
    {
      id: 9,
      name: 'parent - 1',
      inherit: [1],
      code: `minheap.heapContainer = [1,4,5,8,10,12,16];`,
      evaluate: `minheap.parent(1);`,
      expected: 1,
    },
    {
      id: 10,
      name: 'parent - 2',
      inherit: [1, 9],
      code: ``,
      evaluate: `minheap.parent(2);`,
      expected: 1,
    },
    {
      id: 11,
      name: 'parent - 3',
      inherit: [1, 9],
      code: ``,
      evaluate: `minheap.parent(3);`,
      expected: 4,
    },
    {
      id: 12,
      name: 'parent - 4',
      inherit: [1, 9],
      code: ``,
      evaluate: `minheap.parent(4);`,
      expected: 4,
    },
    {
      id: 13,
      name: 'parent - 5',
      inherit: [1, 9],
      code: ``,
      evaluate: `minheap.parent(5);`,
      expected: 5,
    },
    {
      id: 14,
      name: 'parent - 6',
      inherit: [1, 9],
      code: ``,
      evaluate: `minheap.parent(6);`,
      expected: 5,
    },
  ],
  setupCode: ``,
  tags: [INTERMEDIATE, HEAP, DATA_STRUCTURE],
  solution,
};
