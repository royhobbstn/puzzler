import { ALGORITHM, CURATED } from '../constants.ts';

const solution = [
  { stage: 0, text: '' },
  { stage: 0, text: 'function merge(intervals) {' },
  { stage: 1, text: '  const ret = [];' },
  { stage: 0, text: '' },
  { stage: -2, text: '  // sort intervvals by start value' },
  { stage: 2, text: '  intervals.sort((a, b) => {' },
  { stage: 3, text: '    return a[0] - b[0];' },
  { stage: 2, text: '  });' },
  { stage: 0, text: '' },
  { stage: -4, text: "  // create a 'draft' interval initialized to first interval in array" },
  { stage: 4, text: '  let last = intervals[0];' },
  { stage: 0, text: '' },
  { stage: -5, text: '  // start loop at second item in array' },
  { stage: 5, text: '  for (let i = 1; i < intervals.length; i++) {' },
  { stage: 6, text: '    const current = intervals[i];' },
  { stage: 0, text: '' },
  {
    stage: -7,
    text: '    // if end value in last interval is greater than first value in current interval',
  },
  { stage: -7, text: '    // then last and current intervals can be merged' },
  { stage: 7, text: '    if (last[1] >= current[0]) {' },
  { stage: -8, text: '      // merge by taking the greater of the end values in each interval' },
  { stage: -8, text: '      // because last interval could completely cover current interval' },
  { stage: 8, text: '      last = [last[0], Math.max(last[1], current[1])];' },
  { stage: 7, text: '    } else {' },
  { stage: -9, text: '      // otherwise, push last interval to return array' },
  { stage: -9, text: "      // and iniatilize a new 'draft' interval from the current interval" },
  { stage: 9, text: '      ret.push(last);' },
  { stage: 10, text: '      last = current;' },
  { stage: 7, text: '    }' },
  { stage: 5, text: '  }' },
  { stage: 0, text: '' },
  { stage: -11, text: '  // always push the draft interval when loop has completed' },
  { stage: -11, text: '  // unless there were no items in array to begin with' },
  { stage: 11, text: '  if (last) {' },
  { stage: 12, text: '    ret.push(last);' },
  { stage: 11, text: '  }' },
  { stage: 0, text: '' },
  { stage: 13, text: '  return ret;' },
  { stage: 0, text: '}' },
  { stage: 0, text: '' },
];

export const data = {
  problemID: 76,
  problemName: `Solve Merge Intervals`,
  problemText: `Given an array of intervals where intervals[i] = [start-i, end-i], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.`,
  testCases: [
    {
      id: 1,
      name: 'example 1',
      inherit: [],
      code: `const intervals = [[0, 5],[11, 15],[4, 6],[8, 9],[1, 2],[12, 16],[2, 4]];`,
      evaluate: `merge(intervals);`,
      expected: JSON.stringify([
        [0, 6],
        [8, 9],
        [11, 16],
      ]),
    },
    {
      id: 2,
      name: 'example 2',
      inherit: [],
      code: `const intervals = [[1, 3],[2, 6],[8, 10],[15, 18]];`,
      evaluate: `merge(intervals);`,
      expected: JSON.stringify([
        [1, 6],
        [8, 10],
        [15, 18],
      ]),
    },
    {
      id: 3,
      name: 'example 3',
      inherit: [],
      code: `const intervals = [[1, 4],[4, 5]];`,
      evaluate: `merge(intervals);`,
      expected: JSON.stringify([[1, 5]]),
    },
    {
      id: 4,
      name: 'example 4',
      inherit: [],
      code: `const intervals = [[1, 6],[4, 5]];`,
      evaluate: `merge(intervals);`,
      expected: JSON.stringify([[1, 6]]),
    },
  ],
  setupCode: ``,
  lcid: 56,
  source: ['https://leetcode.com/problems/merge-intervals'],
  tags: [ALGORITHM, CURATED],
  solution,
};
