import {
  GRAPH_PROTOTYPE_ADD_EDGE,
  GRAPH_PROTOTYPE_ADD_VERTEX,
} from '../code-imports/import-index.js';
import { GRAPH, DATA_STRUCTURE } from '../constants.ts';

const solution = [
  { stage: 0, text: 'class Vertex {' },
  { stage: 0, text: '  constructor(key) {' },
  { stage: 0, text: '    this.key = key;' },
  { stage: 0, text: '  }' },
  { stage: 0, text: '}' },
  { stage: 0, text: '' },
  { stage: 0, text: 'class Edge {' },
  { stage: 0, text: '  constructor(weight) {' },
  { stage: 0, text: '    this.weight = weight;' },
  { stage: 0, text: '  }' },
  { stage: 0, text: '}' },
  { stage: 0, text: '' },
  { stage: 0, text: 'class Graph {' },
  { stage: 0, text: '  constructor(isDirected = true) {' },
  { stage: 0, text: '    this.isDirected = isDirected === true;' },
  { stage: 0, text: '    this.adjList = {};' },
  { stage: 0, text: '    this.vertices = {};' },
  { stage: 0, text: '  }' },
  { stage: 0, text: '' },
  { stage: 1, text: '  deleteVertex(vertexKey) {' },
  { stage: 2, text: '    delete this.vertices[vertexKey];' },
  { stage: 2, text: '    delete this.adjList[vertexKey];' },
  { stage: 3, text: '    for (let key of Object.keys(this.adjList)) {' },
  { stage: 4, text: '      for (let vk of Object.keys(this.adjList[key])) {' },
  { stage: 5, text: '        if (vk === vertexKey) {' },
  { stage: 5, text: '          delete this.adjList[key][vk];' },
  { stage: 5, text: '        }' },
  { stage: 4, text: '      }' },
  { stage: 3, text: '    }' },
  { stage: 1, text: '  }' },
  { stage: 0, text: '' },
  { stage: 0, text: '}' },
  { stage: 0, text: '' },
];

export const data = {
  problemID: 49,
  problemName: `Implement the **deleteVertex** method for a *Graph* class.`,
  problemText: `Implement a **deleteVertex** method that accepts a \`vertexKey\` (string), with no return value.  You must delete all items in the adjacency list which use that vertex.`,
  testCases: [
    {
      id: 1,
      name: 'compiles',
      inherit: [],
      code: `const graph=new Graph();`,
      evaluate: `Boolean(graph);`,
      expected: true,
    },
    {
      id: 2,
      name: 'add, then delete vertex',
      inherit: [1],
      code: `graph.addVertex('A');graph.deleteVertex('A');`,
      evaluate: `Boolean(graph.vertices['A']);`,
      expected: false,
    },
    {
      id: 3,
      name: 'add edge, make sure vertex is deleted from AdjList',
      inherit: [1],
      code: `graph.addEdge('A','B');graph.deleteVertex('A');`,
      evaluate: `graph.adjList['A'] === undefined;`,
      expected: true,
    },
    {
      id: 4,
      name: 'removed from reverse side of AdjList',
      inherit: [],
      code: `const graph=new Graph(false);graph.addEdge('A','B');graph.deleteVertex('A');`,
      evaluate: `JSON.stringify(graph.adjList['B']);`,
      expected: JSON.stringify({}),
    },
  ],
  setupCode: `${GRAPH_PROTOTYPE_ADD_VERTEX} ${GRAPH_PROTOTYPE_ADD_EDGE}`,
  source: [],
  tags: [GRAPH, DATA_STRUCTURE],
  solution,
};
