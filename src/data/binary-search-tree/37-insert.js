import { BINARY_SEARCH_TREE, DATA_STRUCTURE, BEGINNER } from '../constants.js';

const solution = [
  { stage: 0, text: 'class BinarySearchTreeNode {' },
  { stage: 0, text: '  constructor(value) {' },
  { stage: 0, text: '    this.value = value;' },
  { stage: 0, text: '    this.left = null;' },
  { stage: 0, text: '    this.right = null;' },
  { stage: 0, text: '  }' },
  { stage: 0, text: '}' },
  { stage: 0, text: '' },
  { stage: 0, text: 'class BinarySearchTree {' },
  { stage: 0, text: '  constructor() {' },
  { stage: 0, text: '    this.root = null;' },
  { stage: 0, text: '  }' },
  { stage: 0, text: '' },
  { stage: 0, text: '  insert(value) {' },
  { stage: 0, text: '    const thisNode = new BinarySearchTreeNode(value);' },
  { stage: 0, text: '    if (!this.root) {' },
  { stage: 0, text: '      this.root = thisNode;' },
  { stage: 0, text: '    } else {' },
  { stage: 0, text: '      let currentRoot = this.root;' },
  { stage: 0, text: '      while (true) {' },
  { stage: 0, text: '        if (currentRoot.value > value) {' },
  { stage: 0, text: '          if (currentRoot.left != null) {' },
  { stage: 0, text: '            currentRoot = currentRoot.left;' },
  { stage: 0, text: '          } else {' },
  { stage: 0, text: '            currentRoot.left = thisNode;' },
  { stage: 0, text: '            break;' },
  { stage: 0, text: '          }' },
  { stage: 0, text: '        } else if (currentRoot.value < value) {' },
  { stage: 0, text: '          if (currentRoot.right != null) {' },
  { stage: 0, text: '            currentRoot = currentRoot.right;' },
  { stage: 0, text: '          } else {' },
  { stage: 0, text: '            currentRoot.right = thisNode;' },
  { stage: 0, text: '            break;' },
  { stage: 0, text: '          }' },
  { stage: 0, text: '        } else {' },
  { stage: 0, text: '          break;' },
  { stage: 0, text: '        }' },
  { stage: 0, text: '      }' },
  { stage: 0, text: '    }' },
  { stage: 0, text: '  }' },
  { stage: 0, text: '' },
  { stage: 0, text: '}' },
  { stage: 0, text: '' },
];

export const data = {
  problemID: 37,
  problemName: 'Implement `insert` in a Binary Search Tree',
  problemText:
    'Write an **insert** method in a BinarySearchTree Class that accepts an integer value and inserts it at the proper place in the Binary Search Tree.',
  testCases: [
    {
      id: 1,
      name: 'compiles',
      inherit: [],
      code: `const tree=new BinarySearchTree();`,
      evaluate: `tree;`,
      expected: `{"head":null,"tail":null}`,
    },
  ],
  setupCode: '',
  category: BINARY_SEARCH_TREE,
  type: DATA_STRUCTURE,
  difficulty: BEGINNER,
  maxExecutionTime: 2,
  solution: {
    stages: [0, 30, 60, 120],
    solutionLines: solution,
  },
};
