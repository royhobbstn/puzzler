import { BINARY_SEARCH_TREE, DATA_STRUCTURE, BEGINNER } from '../constants.js';

const solution = [
  { stage: 0, text: 'class BinarySearchTreeNode {' },
  { stage: 0, text: '  constructor(value) {' },
  { stage: 0, text: '    this.value = value;' },
  { stage: 0, text: '    this.left = null;' },
  { stage: 0, text: '    this.right = null;' },
  { stage: 0, text: '  }' },
  { stage: 0, text: '}' },
  { stage: 0, text: '' },
  { stage: 0, text: 'class BinarySearchTree {' },
  { stage: 0, text: '  constructor() {' },
  { stage: 0, text: '    this.root = null;' },
  { stage: 0, text: '  }' },
  { stage: 0, text: '' },
  { stage: 0, text: '  delete(value) {' },
  { stage: 0, text: '    return deleteRecursively(this.root, value);' },
  { stage: 0, text: '' },
  { stage: 0, text: '    function deleteRecursively(root, value) {' },
  { stage: 0, text: '      if (!root) {' },
  { stage: 0, text: '        return null;' },
  { stage: 0, text: '      } else if (value < root.value) {' },
  { stage: 0, text: '        root.left = deleteRecursively(root.left, value);' },
  { stage: 0, text: '      } else if (value > root.value) {' },
  { stage: 0, text: '        root.right = deleteRecursively(root.right, value);' },
  { stage: 0, text: '      } else {' },
  { stage: 0, text: '        if (!root.left && !root.right) {' },
  { stage: 0, text: '          return null;' },
  { stage: 0, text: '        } else if (!root.left) {' },
  { stage: 0, text: '          root = root.right;' },
  { stage: 0, text: '          return root;' },
  { stage: 0, text: '        } else if (!root.right) {' },
  { stage: 0, text: '          root = root.left;' },
  { stage: 0, text: '          return root;' },
  { stage: 0, text: '        } else {' },
  { stage: 0, text: '          const temp = findMin(root.right);' },
  { stage: 0, text: '          root.value = temp.value;' },
  { stage: 0, text: '          root.right = deleteRecursively(root.right, temp.value);' },
  { stage: 0, text: '          return root;' },
  { stage: 0, text: '        }' },
  { stage: 0, text: '      }' },
  { stage: 0, text: '      return root;' },
  { stage: 0, text: '    }' },
  { stage: 0, text: '' },
  { stage: 0, text: '    function findMin(root) {' },
  { stage: 0, text: '      while (root.left) {' },
  { stage: 0, text: '        root = root.left;' },
  { stage: 0, text: '      }' },
  { stage: 0, text: '      return root;' },
  { stage: 0, text: '    }' },
  { stage: 0, text: '  }' },
  { stage: 0, text: '' },
  { stage: 0, text: '}' },
  { stage: 0, text: '' },
];

export const data = {
  problemID: 39,
  problemName: 'Implement `delete` in a Binary Search Tree',
  problemText:
    'Write a **delete** method in a BinarySearchTree Class that accepts an integer value and deletes that value from a tree, while maintaining a valid Binary Search Tree structure.',
  testCases: [
    {
      id: 1,
      name: 'compiles',
      inherit: [],
      code: `const tree=new BinarySearchTree();`,
      evaluate: `tree;`,
      expected: `{"head":null,"tail":null}`,
    },
  ],
  setupCode: '',
  category: BINARY_SEARCH_TREE,
  type: DATA_STRUCTURE,
  difficulty: BEGINNER,
  maxExecutionTime: 2,
  solution: {
    stages: [0, 30, 60, 120],
    solutionLines: solution,
  },
};
