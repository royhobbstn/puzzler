import { TRIE, DATA_STRUCTURE, BEGINNER } from '../constants.js';

const solution = [
  { stage: 0, text: 'class TrieNode {' },
  { stage: 0, text: '  constructor() {' },
  { stage: 0, text: '    this.children = {};' },
  { stage: 0, text: '    this.endOfWord = false;' },
  { stage: 0, text: '  }' },
  { stage: 0, text: '}' },
  { stage: 0, text: '' },
  { stage: 0, text: 'class Trie {' },
  { stage: 0, text: '  constructor() {' },
  { stage: 0, text: '    this.root = new TrieNode();' },
  { stage: 0, text: '  }' },
  { stage: 0, text: '' },
  { stage: 0, text: '  search(word) {' },
  { stage: 0, text: '    let current = this.root;' },
  { stage: 0, text: '    for (let i = 0; i < word.length; i++) {' },
  { stage: 0, text: '      const ch = word.charAt(i);' },
  { stage: 0, text: '      const node = current.children[ch];' },
  { stage: 0, text: '      if (node == null) {' },
  { stage: 0, text: '        return false;' },
  { stage: 0, text: '      }' },
  { stage: 0, text: '      current = node;' },
  { stage: 0, text: '    }' },
  { stage: 0, text: '    return current.endOfWord;' },
  { stage: 0, text: '  }' },
  { stage: 0, text: '' },
  { stage: 0, text: '}' },
  { stage: 0, text: '' },
];

export const data = {
  problemID: 54,
  problemName: `Implement the search method for a Trie class.`,
  problemText: `Implement a search method that takes in a word (string) and returns a boolean true or false depending on if it can be found in the Trie.`,
  testCases: [
    {
      id: 1,
      name: 'compiles',
      inherit: [],
      code: `const trie=new Trie();`,
      evaluate: `trie;`,
      expected: `{"head":null,"tail":null}`,
    },
  ],
  setupCode: '',
  category: TRIE,
  type: DATA_STRUCTURE,
  difficulty: BEGINNER,
  maxExecutionTime: 2,
  solution: {
    stages: [0, 30, 60, 120],
    solutionLines: solution,
  },
};
