import { HASH_TABLE, DATA_STRUCTURE, BEGINNER } from '../constants.js';

const solution = [
  { stage: 0, text: 'class LinkedListNode {' },
  { stage: 0, text: '  constructor(key, value, next = null) {' },
  { stage: 0, text: '    this.key = key;' },
  { stage: 0, text: '    this.value = value;' },
  { stage: 0, text: '    this.next = next;' },
  { stage: 0, text: '  }' },
  { stage: 0, text: '}' },
  { stage: 0, text: '' },
  { stage: 0, text: 'class LinkedList {' },
  { stage: 0, text: '  constructor() {' },
  { stage: 0, text: '    this.head = null;' },
  { stage: 0, text: '    this.tail = null;' },
  { stage: 0, text: '  }' },
  { stage: 0, text: '' },
  { stage: 0, text: '  append(key, value) {' },
  { stage: 0, text: '    const newNode = new LinkedListNode(key, value);' },
  { stage: 0, text: '    if (!this.head) {' },
  { stage: 0, text: '      this.head = newNode;' },
  { stage: 0, text: '      this.tail = newNode;' },
  { stage: 0, text: '      return this;' },
  { stage: 0, text: '    }' },
  { stage: 0, text: '    this.tail.next = newNode;' },
  { stage: 0, text: '    this.tail = newNode;' },
  { stage: 0, text: '    return this;' },
  { stage: 0, text: '  }' },
  { stage: 0, text: '' },
  { stage: 0, text: '  findKey(key) {' },
  { stage: 0, text: '    if (!this.head) {' },
  { stage: 0, text: '      return null;' },
  { stage: 0, text: '    }' },
  { stage: 0, text: '    let current = this.head;' },
  { stage: 0, text: '    while (current) {' },
  { stage: 0, text: '      if (current.key === key) {' },
  { stage: 0, text: '        return current;' },
  { stage: 0, text: '      }' },
  { stage: 0, text: '      current = current.next;' },
  { stage: 0, text: '    }' },
  { stage: 0, text: '    return null;' },
  { stage: 0, text: '  }' },
  { stage: 0, text: '' },
  { stage: 0, text: '  deleteKey(key) {' },
  { stage: 0, text: '    if (!this.head) {' },
  { stage: 0, text: '      return null;' },
  { stage: 0, text: '    }' },
  { stage: 0, text: '    if (key === this.head.key) {' },
  { stage: 0, text: '      const deletedHead = this.head;' },
  { stage: 0, text: '      if (this.head.next) {' },
  { stage: 0, text: '        this.head = this.head.next;' },
  { stage: 0, text: '      } else {' },
  { stage: 0, text: '        this.head = null;' },
  { stage: 0, text: '        this.tail = null;' },
  { stage: 0, text: '      }' },
  { stage: 0, text: '      return deletedHead;' },
  { stage: 0, text: '    } else if (key === this.tail.key) {' },
  { stage: 0, text: '      const deletedTail = this.tail;' },
  { stage: 0, text: '      let currentNode = this.head;' },
  { stage: 0, text: '      while (currentNode.next) {' },
  { stage: 0, text: '        if (!currentNode.next.next) {' },
  { stage: 0, text: '          currentNode.next = null;' },
  { stage: 0, text: '        } else {' },
  { stage: 0, text: '          currentNode = currentNode.next;' },
  { stage: 0, text: '        }' },
  { stage: 0, text: '      }' },
  { stage: 0, text: '      this.tail = currentNode;' },
  { stage: 0, text: '      return deletedTail;' },
  { stage: 0, text: '    } else {' },
  { stage: 0, text: '      let currentNode = this.head;' },
  { stage: 0, text: '      while (currentNode.next) {' },
  { stage: 0, text: '        if (currentNode.next.key === key) {' },
  { stage: 0, text: '          const deletedNode = currentNode.next;' },
  { stage: 0, text: '          currentNode.next = deletedNode.next;' },
  { stage: 0, text: '          return deletedNode;' },
  { stage: 0, text: '        }' },
  { stage: 0, text: '        currentNode = currentNode.next;' },
  { stage: 0, text: '      }' },
  { stage: 0, text: '      return null;' },
  { stage: 0, text: '    }' },
  { stage: 0, text: '  }' },
  { stage: 0, text: '}' },
  { stage: 0, text: '' },
  { stage: 0, text: '/* All code above is implicitly included in your environment */' },
  { stage: 0, text: '' },
  { stage: 0, text: 'class HashTable {' },
  { stage: 0, text: '  constructor(hashTableSize = 32) {' },
  { stage: 0, text: '    this.buckets = Array(hashTableSize)' },
  { stage: 0, text: '      .fill(null)' },
  { stage: 0, text: '      .map(() => new LinkedList());' },
  { stage: 0, text: '  }' },
  { stage: 0, text: '' },
  { stage: 0, text: '  hash(key) {' },
  { stage: 0, text: '    const hash = Array.from(key).reduce(' },
  {
    stage: 0,
    text: '      (hashAccumulator, keySymbol) => hashAccumulator + keySymbol.charCodeAt(0), 0);',
  },
  { stage: 0, text: '    return hash % this.buckets.length;' },
  { stage: 0, text: '  }' },
  { stage: 0, text: '' },
  { stage: 0, text: '  delete(key) {' },
  { stage: 0, text: '    const keyHash = this.hash(key);' },
  { stage: 0, text: '    const bucketLinkedList = this.buckets[keyHash];' },
  { stage: 0, text: '    const deletedNode = bucketLinkedList.deleteKey(key);' },
  { stage: 0, text: '    if (deletedNode) {' },
  { stage: 0, text: '      return deletedNode.value;' },
  { stage: 0, text: '    }' },
  { stage: 0, text: '    return null;' },
  { stage: 0, text: '  }' },
  { stage: 0, text: '}' },
  { stage: 0, text: '' },
];

export const data = {
  problemID: 27,
  problemName: 'Implement **delete** in a Hash Table.',
  problemText: `Given a \`HashTable\` class and an associated \`LinkedList\` class, implement a **delete** method in the \`HashTable\` class that will delete the entry for a given key.
  
  The method must return the value of the deleted item, or \`null\` if an item matching the key was not found.`,
  testCases: [
    {
      id: 1,
      name: 'compiles',
      inherit: [],
      code: `const ht=new Hash Table();`,
      evaluate: `ht;`,
      expected: `{"head":null,"tail":null}`,
    },
  ],
  setupCode: '',
  category: HASH_TABLE,
  type: DATA_STRUCTURE,
  difficulty: BEGINNER,
  maxExecutionTime: 2,
  solution: {
    stages: [0, 30, 60, 120],
    solutionLines: solution,
  },
};
